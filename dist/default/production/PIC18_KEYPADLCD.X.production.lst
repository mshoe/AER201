

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Mar 27 17:05:48 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           ; Version 1.40
    38                           ; Generated 01/12/2016 GMT
    39                           ; 
    40                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4620 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	idataCOMRAM
    73  0030E2                     __pidataCOMRAM:
    74                           	opt stack 0
    75                           
    76                           ;initializer for _test_state
    77  0030E2  0001               	dw	1
    78                           
    79                           ;initializer for _keypress
    80  0030E4  4C                 	db	76
    81                           
    82                           ;initializer for _oneDigitChar
    83  0030E5  30                 	db	48
    84                           
    85                           ;initializer for _temp
    86  0030E6  4C                 	db	76
    87                           
    88                           ;initializer for _tenDigitChar
    89  0030E7  30                 	db	48
    90                           
    91                           	psect	idataBANK0
    92  0030E8                     __pidataBANK0:
    93                           	opt stack 0
    94                           
    95                           ;initializer for _lcd_mode
    96  0030E8  0001               	dw	1
    97                           
    98                           ;initializer for _timer_counter4
    99  0030EA  0001               	dw	1
   100                           
   101                           	psect	smallconst
   102  001000                     __psmallconst:
   103                           	opt stack 0
   104  001000  00                 	db	0
   105  001001                     _keys:
   106                           	opt stack 0
   107  001001  31                 	db	49
   108  001002  32                 	db	50
   109  001003  33                 	db	51
   110  001004  41                 	db	65
   111  001005  34                 	db	52
   112  001006  35                 	db	53
   113  001007  36                 	db	54
   114  001008  42                 	db	66
   115  001009  37                 	db	55
   116  00100A  38                 	db	56
   117  00100B  39                 	db	57
   118  00100C  43                 	db	67
   119  00100D  2A                 	db	42
   120  00100E  30                 	db	48
   121  00100F  23                 	db	35
   122  001010  44                 	db	68
   123  001011  00                 	db	0
   124  001012                     __end_of_keys:
   125                           	opt stack 0
   126  001012                     _AGITATE_DC:
   127                           	opt stack 0
   128  001012  61A8               	dw	25000
   129  001014                     __end_of_AGITATE_DC:
   130                           	opt stack 0
   131  001014                     _AGITATE_WAIT_1:
   132                           	opt stack 0
   133  001014  09C4               	dw	2500
   134  001016                     __end_of_AGITATE_WAIT_1:
   135                           	opt stack 0
   136  001016                     _AGITATE_WAIT_2:
   137                           	opt stack 0
   138  001016  2710               	dw	10000
   139  001018                     __end_of_AGITATE_WAIT_2:
   140                           	opt stack 0
   141  001018                     _ELEC_DOWN:
   142                           	opt stack 0
   143  001018  0014               	dw	20
   144  00101A                     __end_of_ELEC_DOWN:
   145                           	opt stack 0
   146  00101A                     _ELEC_UP:
   147                           	opt stack 0
   148  00101A  0022               	dw	34
   149  00101C                     __end_of_ELEC_UP:
   150                           	opt stack 0
   151  00101C                     _FORWARD_POS_0_C:
   152                           	opt stack 0
   153  00101C  0022               	dw	34
   154  00101E                     __end_of_FORWARD_POS_0_C:
   155                           	opt stack 0
   156  00101E                     _FORWARD_POS_1:
   157                           	opt stack 0
   158  00101E  0023               	dw	35
   159  001020                     __end_of_FORWARD_POS_1:
   160                           	opt stack 0
   161  001020                     _FORWARD_POS_1_9V:
   162                           	opt stack 0
   163  001020  001A               	dw	26
   164  001022                     __end_of_FORWARD_POS_1_9V:
   165                           	opt stack 0
   166  001022                     _FORWARD_POS_1_AA:
   167                           	opt stack 0
   168  001022  001A               	dw	26
   169  001024                     __end_of_FORWARD_POS_1_AA:
   170                           	opt stack 0
   171  001024                     _FORWARD_POS_1_C:
   172                           	opt stack 0
   173  001024  0017               	dw	23
   174  001026                     __end_of_FORWARD_POS_1_C:
   175                           	opt stack 0
   176  001026                     _FORWARD_POS_2:
   177                           	opt stack 0
   178  001026  0019               	dw	25
   179  001028                     __end_of_FORWARD_POS_2:
   180                           	opt stack 0
   181  001028                     _FORWARD_POS_2_9V:
   182                           	opt stack 0
   183  001028  000D               	dw	13
   184  00102A                     __end_of_FORWARD_POS_2_9V:
   185                           	opt stack 0
   186  00102A                     _FORWARD_POS_2_AA:
   187                           	opt stack 0
   188  00102A  0006               	dw	6
   189  00102C                     __end_of_FORWARD_POS_2_AA:
   190                           	opt stack 0
   191  00102C                     _FORWARD_POS_2_C:
   192                           	opt stack 0
   193  00102C  0008               	dw	8
   194  00102E                     __end_of_FORWARD_POS_2_C:
   195                           	opt stack 0
   196  00102E                     _MAX_COUNT:
   197                           	opt stack 0
   198  00102E  0002               	dw	2
   199  001030                     __end_of_MAX_COUNT:
   200                           	opt stack 0
   201  001030                     _RAMP_9V:
   202                           	opt stack 0
   203  001030  0034               	dw	52
   204  001032                     __end_of_RAMP_9V:
   205                           	opt stack 0
   206  001032                     _RAMP_AA:
   207                           	opt stack 0
   208  001032  001F               	dw	31
   209  001034                     __end_of_RAMP_AA:
   210                           	opt stack 0
   211  001034                     _RAMP_C:
   212                           	opt stack 0
   213  001034  0014               	dw	20
   214  001036                     __end_of_RAMP_C:
   215                           	opt stack 0
   216  001036                     _RAMP_DEAD:
   217                           	opt stack 0
   218  001036  0029               	dw	41
   219  001038                     __end_of_RAMP_DEAD:
   220                           	opt stack 0
   221  001038                     _RESET_POS:
   222                           	opt stack 0
   223  001038  0034               	dw	52
   224  00103A                     __end_of_RESET_POS:
   225                           	opt stack 0
   226  00103A                     _RESET_POS_9V:
   227                           	opt stack 0
   228  00103A  002C               	dw	44
   229  00103C                     __end_of_RESET_POS_9V:
   230                           	opt stack 0
   231  00103C                     _RESET_POS_AA:
   232                           	opt stack 0
   233  00103C  0024               	dw	36
   234  00103E                     __end_of_RESET_POS_AA:
   235                           	opt stack 0
   236  00103E                     _RESET_POS_C:
   237                           	opt stack 0
   238  00103E  0028               	dw	40
   239  001040                     __end_of_RESET_POS_C:
   240                           	opt stack 0
   241  001040                     _SENSOR_WAIT:
   242                           	opt stack 0
   243  001040  61A8               	dw	25000
   244  001042                     __end_of_SENSOR_WAIT:
   245                           	opt stack 0
   246  001042                     _SERVO_F_WAIT:
   247                           	opt stack 0
   248  001042  C350               	dw	50000
   249  001044                     __end_of_SERVO_F_WAIT:
   250                           	opt stack 0
   251  001044                     _SERVO_WAIT:
   252                           	opt stack 0
   253  001044  61A8               	dw	25000
   254  001046                     __end_of_SERVO_WAIT:
   255                           	opt stack 0
   256  001046                     _VOLT_WAIT:
   257                           	opt stack 0
   258  001046  30D4               	dw	12500
   259  001048                     __end_of_VOLT_WAIT:
   260                           	opt stack 0
   261  001048  00                 	db	0	; dummy byte at the end
   262  0000                     
   263                           	psect	nvCOMRAM
   264  000074                     __pnvCOMRAM:
   265                           	opt stack 0
   266  000074                     _timer_on:
   267                           	opt stack 0
   268  000074                     	ds	2
   269  0000                     _ADCON0	set	4034
   270  0000                     _ADCON1	set	4033
   271  0000                     _INTCONbits	set	4082
   272  0000                     _LATB	set	3978
   273  0000                     _LATCbits	set	3979
   274  0000                     _LATD	set	3980
   275  0000                     _LATDbits	set	3980
   276  0000                     _OSCCON	set	4051
   277  0000                     _OSCTUNEbits	set	3995
   278  0000                     _PORTAbits	set	3968
   279  0000                     _PORTB	set	3969
   280  0000                     _PORTBbits	set	3969
   281  0000                     _PORTCbits	set	3970
   282  0000                     _PORTEbits	set	3972
   283  0000                     _T0CON	set	4053
   284  0000                     _T1CON	set	4045
   285  0000                     _TMR0H	set	4055
   286  0000                     _TMR0L	set	4054
   287  0000                     _TMR1H	set	4047
   288  0000                     _TMR1L	set	4046
   289  0000                     _TRISA	set	3986
   290  0000                     _TRISB	set	3987
   291  0000                     _TRISC	set	3988
   292  0000                     _TRISD	set	3989
   293  0000                     _TRISEbits	set	3990
   294  0000                     _PEIE	set	32662
   295  0000                     _TMR0IF	set	32658
   296  0000                     _TMR0ON	set	32431
   297  0000                     _TMR1IE	set	31976
   298  0000                     _TMR1IF	set	31984
   299  0000                     _TMR1ON	set	32360
   300  0000                     _TMR3IE	set	32001
   301                           
   302                           ; #config settings
   303  0000                     
   304                           	psect	cinit
   305  002F36                     __pcinit:
   306                           	opt stack 0
   307  002F36                     start_initialization:
   308                           	opt stack 0
   309  002F36                     __initialization:
   310                           	opt stack 0
   311                           
   312                           ; Initialize objects allocated to BANK0 (4 bytes)
   313                           ; load TBLPTR registers with __pidataBANK0
   314  002F36  0EE8               	movlw	low __pidataBANK0
   315  002F38  6EF6               	movwf	tblptrl,c
   316  002F3A  0E30               	movlw	high __pidataBANK0
   317  002F3C  6EF7               	movwf	tblptrh,c
   318  002F3E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   319  002F40  6EF8               	movwf	tblptru,c
   320  002F42  EE00  F0BB         	lfsr	0,__pdataBANK0
   321  002F46  EE10 F004          	lfsr	1,4
   322  002F4A                     copy_data0:
   323  002F4A  0009               	tblrd		*+
   324  002F4C  CFF5 FFEE          	movff	tablat,postinc0
   325  002F50  50E5               	movf	postdec1,w,c
   326  002F52  50E1               	movf	fsr1l,w,c
   327  002F54  E1FA               	bnz	copy_data0
   328                           
   329                           ; Initialize objects allocated to COMRAM (6 bytes)
   330                           ; load TBLPTR registers with __pidataCOMRAM
   331  002F56  0EE2               	movlw	low __pidataCOMRAM
   332  002F58  6EF6               	movwf	tblptrl,c
   333  002F5A  0E30               	movlw	high __pidataCOMRAM
   334  002F5C  6EF7               	movwf	tblptrh,c
   335  002F5E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   336  002F60  6EF8               	movwf	tblptru,c
   337  002F62  EE00  F06E         	lfsr	0,__pdataCOMRAM
   338  002F66  EE10 F006          	lfsr	1,6
   339  002F6A                     copy_data1:
   340  002F6A  0009               	tblrd		*+
   341  002F6C  CFF5 FFEE          	movff	tablat,postinc0
   342  002F70  50E5               	movf	postdec1,w,c
   343  002F72  50E1               	movf	fsr1l,w,c
   344  002F74  E1FA               	bnz	copy_data1
   345                           
   346                           ; Clear objects allocated to BANK0 (14 bytes)
   347  002F76  EE00  F0AD         	lfsr	0,__pbssBANK0
   348  002F7A  0E0E               	movlw	14
   349  002F7C                     clear_0:
   350  002F7C  6AEE               	clrf	postinc0,c
   351  002F7E  06E8               	decf	wreg,f,c
   352  002F80  E1FD               	bnz	clear_0
   353                           
   354                           ; Clear objects allocated to COMRAM (50 bytes)
   355  002F82  EE00  F03C         	lfsr	0,__pbssCOMRAM
   356  002F86  0E32               	movlw	50
   357  002F88                     clear_1:
   358  002F88  6AEE               	clrf	postinc0,c
   359  002F8A  06E8               	decf	wreg,f,c
   360  002F8C  E1FD               	bnz	clear_1
   361  002F8E                     end_of_initialization:
   362                           	opt stack 0
   363  002F8E                     __end_of__initialization:
   364                           	opt stack 0
   365  002F8E  9076               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   366  002F90  9276               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   367  002F92  0E00               	movlw	low (__Lmediumconst shr (0+16))
   368  002F94  6EF8               	movwf	tblptru,c
   369  002F96  0100               	movlb	0
   370  002F98  EF11  F016         	goto	_main	;jump to C main() function
   371                           tblptru	equ	0xFF8
   372                           tblptrh	equ	0xFF7
   373                           tblptrl	equ	0xFF6
   374                           tablat	equ	0xFF5
   375                           postinc0	equ	0xFEE
   376                           wreg	equ	0xFE8
   377                           postdec1	equ	0xFE5
   378                           fsr1l	equ	0xFE1
   379                           
   380                           	psect	bssCOMRAM
   381  00003C                     __pbssCOMRAM:
   382                           	opt stack 0
   383  00003C                     _servo_duties:
   384                           	opt stack 0
   385  00003C                     	ds	10
   386  000046                     _AC_wait:
   387                           	opt stack 0
   388  000046                     	ds	2
   389  000048                     _oneDigit:
   390                           	opt stack 0
   391  000048                     	ds	2
   392  00004A                     _sensor9V:
   393                           	opt stack 0
   394  00004A                     	ds	2
   395  00004C                     _sensorAA:
   396                           	opt stack 0
   397  00004C                     	ds	2
   398  00004E                     _sensorC:
   399                           	opt stack 0
   400  00004E                     	ds	2
   401  000050                     _sensor_incrementer:
   402                           	opt stack 0
   403  000050                     	ds	2
   404  000052                     _sensor_state:
   405                           	opt stack 0
   406  000052                     	ds	2
   407  000054                     _state:
   408                           	opt stack 0
   409  000054                     	ds	2
   410  000056                     _tenDigit:
   411                           	opt stack 0
   412  000056                     	ds	2
   413  000058                     _test_counter:
   414                           	opt stack 0
   415  000058                     	ds	2
   416  00005A                     _test_mode:
   417                           	opt stack 0
   418  00005A                     	ds	2
   419  00005C                     _timer_counter:
   420                           	opt stack 0
   421  00005C                     	ds	2
   422  00005E                     _timer_counter2:
   423                           	opt stack 0
   424  00005E                     	ds	2
   425  000060                     _timer_counter3:
   426                           	opt stack 0
   427  000060                     	ds	2
   428  000062                     _volt9V:
   429                           	opt stack 0
   430  000062                     	ds	2
   431  000064                     _voltAA:
   432                           	opt stack 0
   433  000064                     	ds	2
   434  000066                     _voltC:
   435                           	opt stack 0
   436  000066                     	ds	2
   437  000068                     _voltcheck_1:
   438                           	opt stack 0
   439  000068                     	ds	2
   440  00006A                     _voltcheck_2:
   441                           	opt stack 0
   442  00006A                     	ds	2
   443  00006C                     _voltcheck_3:
   444                           	opt stack 0
   445  00006C                     	ds	2
   446                           tblptru	equ	0xFF8
   447                           tblptrh	equ	0xFF7
   448                           tblptrl	equ	0xFF6
   449                           tablat	equ	0xFF5
   450                           postinc0	equ	0xFEE
   451                           wreg	equ	0xFE8
   452                           postdec1	equ	0xFE5
   453                           fsr1l	equ	0xFE1
   454                           
   455                           	psect	dataCOMRAM
   456  00006E                     __pdataCOMRAM:
   457                           	opt stack 0
   458  00006E                     _test_state:
   459                           	opt stack 0
   460  00006E                     	ds	2
   461  000070                     _keypress:
   462                           	opt stack 0
   463  000070                     	ds	1
   464  000071                     _oneDigitChar:
   465                           	opt stack 0
   466  000071                     	ds	1
   467  000072                     _temp:
   468                           	opt stack 0
   469  000072                     	ds	1
   470  000073                     _tenDigitChar:
   471                           	opt stack 0
   472  000073                     	ds	1
   473                           tblptru	equ	0xFF8
   474                           tblptrh	equ	0xFF7
   475                           tblptrl	equ	0xFF6
   476                           tablat	equ	0xFF5
   477                           postinc0	equ	0xFEE
   478                           wreg	equ	0xFE8
   479                           postdec1	equ	0xFE5
   480                           fsr1l	equ	0xFE1
   481                           
   482                           	psect	bssBANK0
   483  0000AD                     __pbssBANK0:
   484                           	opt stack 0
   485  0000AD                     _count9V:
   486                           	opt stack 0
   487  0000AD                     	ds	2
   488  0000AF                     _countAA:
   489                           	opt stack 0
   490  0000AF                     	ds	2
   491  0000B1                     _countC:
   492                           	opt stack 0
   493  0000B1                     	ds	2
   494  0000B3                     _countDead:
   495                           	opt stack 0
   496  0000B3                     	ds	2
   497  0000B5                     _operation_time:
   498                           	opt stack 0
   499  0000B5                     	ds	2
   500  0000B7                     _rlb:
   501                           	opt stack 0
   502  0000B7                     	ds	2
   503  0000B9                     _rlf:
   504                           	opt stack 0
   505  0000B9                     	ds	2
   506                           tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           postinc0	equ	0xFEE
   511                           wreg	equ	0xFE8
   512                           postdec1	equ	0xFE5
   513                           fsr1l	equ	0xFE1
   514                           
   515                           	psect	dataBANK0
   516  0000BB                     __pdataBANK0:
   517                           	opt stack 0
   518  0000BB                     _lcd_mode:
   519                           	opt stack 0
   520  0000BB                     	ds	2
   521  0000BD                     _timer_counter4:
   522                           	opt stack 0
   523  0000BD                     	ds	2
   524                           tblptru	equ	0xFF8
   525                           tblptrh	equ	0xFF7
   526                           tblptrl	equ	0xFF6
   527                           tablat	equ	0xFF5
   528                           postinc0	equ	0xFEE
   529                           wreg	equ	0xFE8
   530                           postdec1	equ	0xFE5
   531                           fsr1l	equ	0xFE1
   532                           
   533                           	psect	cstackBANK0
   534  000080                     __pcstackBANK0:
   535                           	opt stack 0
   536  000080                     ?___wmul:
   537                           	opt stack 0
   538  000080                     ?___awdiv:
   539                           	opt stack 0
   540  000080                     ?___awmod:
   541                           	opt stack 0
   542  000080                     ?___lwdiv:
   543                           	opt stack 0
   544  000080                     ?___lwmod:
   545                           	opt stack 0
   546  000080                     lcdNibble@temp:
   547                           	opt stack 0
   548  000080                     ___wmul@multiplier:
   549                           	opt stack 0
   550  000080                     ___awdiv@dividend:
   551                           	opt stack 0
   552  000080                     ___awmod@dividend:
   553                           	opt stack 0
   554  000080                     ___lwdiv@dividend:
   555                           	opt stack 0
   556  000080                     ___lwmod@dividend:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x0
   560  000080                     	ds	1
   561  000081                     lcdNibble@data:
   562                           	opt stack 0
   563                           
   564                           ; 1 bytes @ 0x1
   565  000081                     	ds	1
   566  000082                     lcdInst@data:
   567                           	opt stack 0
   568  000082                     putch@data:
   569                           	opt stack 0
   570  000082                     ___wmul@multiplicand:
   571                           	opt stack 0
   572  000082                     ___awdiv@divisor:
   573                           	opt stack 0
   574  000082                     ___awmod@divisor:
   575                           	opt stack 0
   576  000082                     ___lwdiv@divisor:
   577                           	opt stack 0
   578  000082                     ___lwmod@divisor:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x2
   582  000082                     	ds	1
   583  000083                     ??_initLCD:
   584                           
   585                           ; 1 bytes @ 0x3
   586  000083                     	ds	1
   587  000084                     ??_print_simu:
   588  000084                     ??_intro:
   589  000084                     ___awdiv@counter:
   590                           	opt stack 0
   591  000084                     ___awmod@counter:
   592                           	opt stack 0
   593  000084                     ___lwdiv@counter:
   594                           	opt stack 0
   595  000084                     ___lwmod@counter:
   596                           	opt stack 0
   597  000084                     ___wmul@product:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0x4
   601  000084                     	ds	1
   602  000085                     ___awdiv@sign:
   603                           	opt stack 0
   604  000085                     ___awmod@sign:
   605                           	opt stack 0
   606  000085                     ___lwdiv@quotient:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x5
   610  000085                     	ds	1
   611  000086                     ___awdiv@quotient:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x6
   615  000086                     	ds	2
   616  000088                     ??_print_batteries:
   617  000088                     ??_keypad:
   618                           
   619                           ; 1 bytes @ 0x8
   620  000088                     	ds	1
   621  000089                     print_batteries@ten9V:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x9
   625  000089                     	ds	2
   626  00008B                     print_batteries@one9V:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0xB
   630  00008B                     	ds	2
   631  00008D                     print_batteries@tenC:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0xD
   635  00008D                     	ds	2
   636  00008F                     print_batteries@oneC:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0xF
   640  00008F                     	ds	2
   641  000091                     print_batteries@tenAA:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x11
   645  000091                     	ds	2
   646  000093                     print_batteries@oneAA:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x13
   650  000093                     	ds	2
   651  000095                     print_batteries@tenDrained:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x15
   655  000095                     	ds	2
   656  000097                     print_batteries@oneDrained:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x17
   660  000097                     	ds	2
   661  000099                     print_batteries@minOpChar:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x19
   665  000099                     	ds	1
   666  00009A                     print_batteries@tenOpChar:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0x1A
   670  00009A                     	ds	1
   671  00009B                     print_batteries@oneOpChar:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x1B
   675  00009B                     	ds	1
   676  00009C                     print_batteries@chten9V:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0x1C
   680  00009C                     	ds	1
   681  00009D                     print_batteries@chone9V:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x1D
   685  00009D                     	ds	1
   686  00009E                     print_batteries@chtenC:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x1E
   690  00009E                     	ds	1
   691  00009F                     print_batteries@choneC:
   692                           	opt stack 0
   693                           
   694                           ; 1 bytes @ 0x1F
   695  00009F                     	ds	1
   696  0000A0                     print_batteries@chtenAA:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0x20
   700  0000A0                     	ds	1
   701  0000A1                     print_batteries@choneAA:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x21
   705  0000A1                     	ds	1
   706  0000A2                     print_batteries@chtenDrained:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x22
   710  0000A2                     	ds	1
   711  0000A3                     print_batteries@choneDrained:
   712                           	opt stack 0
   713                           
   714                           ; 1 bytes @ 0x23
   715  0000A3                     	ds	1
   716  0000A4                     print_batteries@minOpDigit:
   717                           	opt stack 0
   718                           
   719                           ; 2 bytes @ 0x24
   720  0000A4                     	ds	2
   721  0000A6                     print_batteries@tenOpDigit:
   722                           	opt stack 0
   723                           
   724                           ; 2 bytes @ 0x26
   725  0000A6                     	ds	2
   726  0000A8                     print_batteries@oneOpDigit:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0x28
   730  0000A8                     	ds	2
   731  0000AA                     ??_FSM:
   732                           
   733                           ; 1 bytes @ 0x2A
   734  0000AA                     	ds	3
   735  0000AD                     tblptru	equ	0xFF8
   736                           tblptrh	equ	0xFF7
   737                           tblptrl	equ	0xFF6
   738                           tablat	equ	0xFF5
   739                           postinc0	equ	0xFEE
   740                           wreg	equ	0xFE8
   741                           postdec1	equ	0xFE5
   742                           fsr1l	equ	0xFE1
   743                           
   744                           ; 1 bytes @ 0x2D
   745                           
   746                           	psect	cstackCOMRAM
   747  000001                     __pcstackCOMRAM:
   748                           	opt stack 0
   749  000001                     ??_handler:
   750  000001                     
   751                           ; 1 bytes @ 0x0
   752  000001                     	ds	19
   753  000014                     handler@x:
   754                           	opt stack 0
   755                           
   756                           ; 2 bytes @ 0x13
   757  000014                     	ds	2
   758  000016                     handler@y:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x15
   762  000016                     	ds	2
   763  000018                     handler@w:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0x17
   767  000018                     	ds	2
   768  00001A                     handler@L:
   769                           	opt stack 0
   770                           
   771                           ; 2 bytes @ 0x19
   772  00001A                     	ds	2
   773  00001C                     handler@z:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x1B
   777  00001C                     	ds	2
   778  00001E                     handler@x_669:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x1D
   782  00001E                     	ds	2
   783  000020                     handler@y_670:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x1F
   787  000020                     	ds	2
   788  000022                     handler@w_671:
   789                           	opt stack 0
   790                           
   791                           ; 2 bytes @ 0x21
   792  000022                     	ds	2
   793  000024                     handler@L_672:
   794                           	opt stack 0
   795                           
   796                           ; 2 bytes @ 0x23
   797  000024                     	ds	2
   798  000026                     handler@z_673:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0x25
   802  000026                     	ds	2
   803  000028                     handler@x_682:
   804                           	opt stack 0
   805                           
   806                           ; 2 bytes @ 0x27
   807  000028                     	ds	2
   808  00002A                     handler@y_683:
   809                           	opt stack 0
   810                           
   811                           ; 2 bytes @ 0x29
   812  00002A                     	ds	2
   813  00002C                     handler@w_684:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0x2B
   817  00002C                     	ds	2
   818  00002E                     handler@L_685:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0x2D
   822  00002E                     	ds	2
   823  000030                     handler@z_686:
   824                           	opt stack 0
   825                           
   826                           ; 2 bytes @ 0x2F
   827  000030                     	ds	2
   828  000032                     handler@x_687:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x31
   832  000032                     	ds	2
   833  000034                     handler@y_688:
   834                           	opt stack 0
   835                           
   836                           ; 2 bytes @ 0x33
   837  000034                     	ds	2
   838  000036                     handler@w_689:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x35
   842  000036                     	ds	2
   843  000038                     handler@L_690:
   844                           	opt stack 0
   845                           
   846                           ; 2 bytes @ 0x37
   847  000038                     	ds	2
   848  00003A                     handler@z_691:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x39
   852  00003A                     	ds	2
   853                           tblptru	equ	0xFF8
   854                           tblptrh	equ	0xFF7
   855                           tblptrl	equ	0xFF6
   856                           tablat	equ	0xFF5
   857                           postinc0	equ	0xFEE
   858                           wreg	equ	0xFE8
   859                           postdec1	equ	0xFE5
   860                           fsr1l	equ	0xFE1
   861                           
   862 ;;
   863 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   864 ;;
   865 ;; *************** function _main *****************
   866 ;; Defined at:
   867 ;;		line 1330 in file "main.c"
   868 ;; Parameters:    Size  Location     Type
   869 ;;		None
   870 ;; Auto vars:     Size  Location     Type
   871 ;;		None
   872 ;; Return value:  Size  Location     Type
   873 ;;                  1    wreg      void 
   874 ;; Registers used:
   875 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   876 ;; Tracked objects:
   877 ;;		On entry : 0/0
   878 ;;		On exit  : 0/0
   879 ;;		Unchanged: 0/0
   880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   885 ;;Total ram usage:        0 bytes
   886 ;; Hardware stack levels required when called:    6
   887 ;; This function calls:
   888 ;;		_FSM
   889 ;;		_intro
   890 ;;		_keypad
   891 ;; This function is called by:
   892 ;;		Startup code after reset
   893 ;; This function uses a non-reentrant model
   894 ;;
   895                           
   896                           	psect	text0
   897  002C22                     __ptext0:
   898                           	opt stack 0
   899  002C22                     _main:
   900                           	opt stack 25
   901                           
   902                           ;main.c: 1358: TRISC = 0b10000000;
   903                           
   904                           ;incstack = 0
   905  002C22  0E80               	movlw	128
   906  002C24  6E94               	movwf	3988,c	;volatile
   907                           
   908                           ;main.c: 1359: LATCbits.LATC5 = 0;
   909  002C26  9A8B               	bcf	3979,5,c	;volatile
   910                           
   911                           ;main.c: 1360: rlb = 0;
   912  002C28  0E00               	movlw	0
   913  002C2A  0100               	movlb	0	; () banked
   914  002C2C  6FB8               	movwf	(_rlb+1)& (0+255),b
   915  002C2E  0E00               	movlw	0
   916  002C30  6FB7               	movwf	_rlb& (0+255),b
   917                           
   918                           ; BSR set to: 0
   919                           ;main.c: 1362: LATCbits.LATC6 = 0;
   920  002C32  9C8B               	bcf	3979,6,c	;volatile
   921                           
   922                           ;main.c: 1363: rlf = 0;
   923  002C34  0E00               	movlw	0
   924  002C36  0100               	movlb	0	; () banked
   925  002C38  6FBA               	movwf	(_rlf+1)& (0+255),b
   926  002C3A  0E00               	movlw	0
   927  002C3C  6FB9               	movwf	_rlf& (0+255),b
   928                           
   929                           ; BSR set to: 0
   930                           ;main.c: 1365: TRISEbits.RE1 = 1;
   931  002C3E  8296               	bsf	3990,1,c	;volatile
   932                           
   933                           ; BSR set to: 0
   934                           ;main.c: 1368: TRISA = 0xFF;
   935  002C40  6892               	setf	3986,c	;volatile
   936                           
   937                           ;main.c: 1371: TRISD = 0x00;
   938  002C42  0E00               	movlw	0
   939  002C44  6E95               	movwf	3989,c	;volatile
   940                           
   941                           ; BSR set to: 0
   942                           ;main.c: 1374: TRISB = 0xFF;
   943  002C46  6893               	setf	3987,c	;volatile
   944                           
   945                           ;main.c: 1375: ADCON0 = 0x00;
   946  002C48  0E00               	movlw	0
   947  002C4A  6EC2               	movwf	4034,c	;volatile
   948                           
   949                           ; BSR set to: 0
   950                           ;main.c: 1376: ADCON1 = 0xFF;
   951  002C4C  68C1               	setf	4033,c	;volatile
   952                           
   953                           ;main.c: 1377: LATB = 0x00;
   954  002C4E  0E00               	movlw	0
   955  002C50  6E8A               	movwf	3978,c	;volatile
   956                           
   957                           ; BSR set to: 0
   958                           ;main.c: 1383: OSCCON = OSCCON | 0b01110000;
   959  002C52  50D3               	movf	4051,w,c	;volatile
   960  002C54  0970               	iorlw	112
   961  002C56  6ED3               	movwf	4051,c	;volatile
   962                           
   963                           ; BSR set to: 0
   964                           ;main.c: 1385: OSCTUNEbits.PLLEN = 1;
   965  002C58  8C9B               	bsf	3995,6,c	;volatile
   966                           
   967                           ; BSR set to: 0
   968                           ;main.c: 1392: TMR1IE = 1;
   969  002C5A  809D               	bsf	3997,0,c	;volatile
   970                           
   971                           ; BSR set to: 0
   972                           ;main.c: 1394: TMR3IE = 1;
   973  002C5C  82A0               	bsf	4000,1,c	;volatile
   974                           
   975                           ; BSR set to: 0
   976                           ;main.c: 1396: PEIE = 1;
   977  002C5E  8CF2               	bsf	intcon,6,c	;volatile
   978                           
   979                           ; BSR set to: 0
   980                           ;main.c: 1404: T1CON = 0b10000000;
   981  002C60  0E80               	movlw	128
   982  002C62  6ECD               	movwf	4045,c	;volatile
   983                           
   984                           ; BSR set to: 0
   985                           ;main.c: 1405: TMR1H = 0b11111111;
   986  002C64  68CF               	setf	4047,c	;volatile
   987                           
   988                           ; BSR set to: 0
   989                           ;main.c: 1406: TMR1L = 0b01011111;
   990  002C66  0E5F               	movlw	95
   991  002C68  6ECE               	movwf	4046,c	;volatile
   992                           
   993                           ; BSR set to: 0
   994                           ;main.c: 1408: TMR1ON = 1;
   995  002C6A  80CD               	bsf	4045,0,c	;volatile
   996                           
   997                           ; BSR set to: 0
   998                           ;main.c: 1411: T0CON = 0b00000111;
   999  002C6C  0E07               	movlw	7
  1000  002C6E  6ED5               	movwf	4053,c	;volatile
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;main.c: 1412: TMR0H = 0b10000101;
  1004  002C70  0E85               	movlw	133
  1005  002C72  6ED7               	movwf	4055,c	;volatile
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;main.c: 1413: TMR0L = 0b11101101;
  1009  002C74  0EED               	movlw	237
  1010  002C76  6ED6               	movwf	4054,c	;volatile
  1011                           
  1012                           ; BSR set to: 0
  1013                           ;main.c: 1415: TMR0ON = 1;
  1014  002C78  8ED5               	bsf	4053,7,c	;volatile
  1015                           
  1016                           ; BSR set to: 0
  1017                           ;main.c: 1418: servo_duties[SERVO_9V] = RESET_POS_9V;
  1018  002C7A  0E3A               	movlw	low _RESET_POS_9V
  1019  002C7C  6EF6               	movwf	tblptrl,c
  1020  002C7E                     	if	1	;There is more than 1 active tblptr byte
  1021  002C7E  0E10               	movlw	high _RESET_POS_9V
  1022  002C80  6EF7               	movwf	tblptrh,c
  1023  002C82                     	endif
  1024  002C82                     	if	0	;There are less than 3 active tblptr bytes
  1025  002C82                     	endif
  1026  002C82  0009               	tblrd		*+
  1027  002C84  CFF5 F03C          	movff	tablat,_servo_duties
  1028  002C88  000A               	tblrd		*-
  1029  002C8A  CFF5 F03D          	movff	tablat,_servo_duties+1
  1030                           
  1031                           ; BSR set to: 0
  1032                           ;main.c: 1419: servo_duties[SERVO_C] = RESET_POS_C;
  1033  002C8E  0E3E               	movlw	low _RESET_POS_C
  1034  002C90  6EF6               	movwf	tblptrl,c
  1035  002C92                     	if	1	;There is more than 1 active tblptr byte
  1036  002C92  0E10               	movlw	high _RESET_POS_C
  1037  002C94  6EF7               	movwf	tblptrh,c
  1038  002C96                     	endif
  1039  002C96                     	if	0	;There are less than 3 active tblptr bytes
  1040  002C96                     	endif
  1041  002C96  0009               	tblrd		*+
  1042  002C98  CFF5 F03E          	movff	tablat,_servo_duties+2
  1043  002C9C  000A               	tblrd		*-
  1044  002C9E  CFF5 F03F          	movff	tablat,_servo_duties+3
  1045                           
  1046                           ; BSR set to: 0
  1047                           ;main.c: 1420: servo_duties[SERVO_AA] = RESET_POS_AA;
  1048  002CA2  0E3C               	movlw	low _RESET_POS_AA
  1049  002CA4  6EF6               	movwf	tblptrl,c
  1050  002CA6                     	if	1	;There is more than 1 active tblptr byte
  1051  002CA6  0E10               	movlw	high _RESET_POS_AA
  1052  002CA8  6EF7               	movwf	tblptrh,c
  1053  002CAA                     	endif
  1054  002CAA                     	if	0	;There are less than 3 active tblptr bytes
  1055  002CAA                     	endif
  1056  002CAA  0009               	tblrd		*+
  1057  002CAC  CFF5 F040          	movff	tablat,_servo_duties+4
  1058  002CB0  000A               	tblrd		*-
  1059  002CB2  CFF5 F041          	movff	tablat,_servo_duties+5
  1060                           
  1061                           ; BSR set to: 0
  1062                           ;main.c: 1421: servo_duties[SERVO_ELEC] = ELEC_UP;
  1063  002CB6  0E1A               	movlw	low _ELEC_UP
  1064  002CB8  6EF6               	movwf	tblptrl,c
  1065  002CBA                     	if	1	;There is more than 1 active tblptr byte
  1066  002CBA  0E10               	movlw	high _ELEC_UP
  1067  002CBC  6EF7               	movwf	tblptrh,c
  1068  002CBE                     	endif
  1069  002CBE                     	if	0	;There are less than 3 active tblptr bytes
  1070  002CBE                     	endif
  1071  002CBE  0009               	tblrd		*+
  1072  002CC0  CFF5 F042          	movff	tablat,_servo_duties+6
  1073  002CC4  000A               	tblrd		*-
  1074  002CC6  CFF5 F043          	movff	tablat,_servo_duties+7
  1075                           
  1076                           ; BSR set to: 0
  1077                           ;main.c: 1422: servo_duties[SERVO_RAMP] = RAMP_DEAD;
  1078  002CCA  0E36               	movlw	low _RAMP_DEAD
  1079  002CCC  6EF6               	movwf	tblptrl,c
  1080  002CCE                     	if	1	;There is more than 1 active tblptr byte
  1081  002CCE  0E10               	movlw	high _RAMP_DEAD
  1082  002CD0  6EF7               	movwf	tblptrh,c
  1083  002CD2                     	endif
  1084  002CD2                     	if	0	;There are less than 3 active tblptr bytes
  1085  002CD2                     	endif
  1086  002CD2  0009               	tblrd		*+
  1087  002CD4  CFF5 F044          	movff	tablat,_servo_duties+8
  1088  002CD8  000A               	tblrd		*-
  1089  002CDA  CFF5 F045          	movff	tablat,_servo_duties+9
  1090                           
  1091                           ; BSR set to: 0
  1092                           ;main.c: 1423: timer_on = 1;
  1093  002CDE  0E00               	movlw	0
  1094  002CE0  6E75               	movwf	_timer_on+1,c
  1095  002CE2  0E01               	movlw	1
  1096  002CE4  6E74               	movwf	_timer_on,c
  1097                           
  1098                           ; BSR set to: 0
  1099                           ;main.c: 1426: (INTCONbits.GIE = 1);
  1100  002CE6  8EF2               	bsf	intcon,7,c	;volatile
  1101                           
  1102                           ; BSR set to: 0
  1103                           ;main.c: 1431: intro();
  1104  002CE8  ECFF  F017         	call	_intro	;wreg free
  1105  002CEC                     l4393:
  1106                           
  1107                           ;main.c: 1435: keypad();
  1108  002CEC  EC0F  F013         	call	_keypad	;wreg free
  1109                           
  1110                           ;main.c: 1436: FSM();
  1111  002CF0  EC25  F008         	call	_FSM	;wreg free
  1112  002CF4  D7FB               	goto	l4393
  1113  002CF6                     __end_of_main:
  1114                           	opt stack 0
  1115                           tblptru	equ	0xFF8
  1116                           tblptrh	equ	0xFF7
  1117                           tblptrl	equ	0xFF6
  1118                           tablat	equ	0xFF5
  1119                           intcon	equ	0xFF2
  1120                           postinc0	equ	0xFEE
  1121                           wreg	equ	0xFE8
  1122                           postdec1	equ	0xFE5
  1123                           fsr1l	equ	0xFE1
  1124                           
  1125 ;; *************** function _keypad *****************
  1126 ;; Defined at:
  1127 ;;		line 1198 in file "main.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;		None
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;		None
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  1    wreg      void 
  1134 ;; Registers used:
  1135 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1144 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;Total ram usage:        1 bytes
  1146 ;; Hardware stack levels used:    1
  1147 ;; Hardware stack levels required when called:    5
  1148 ;; This function calls:
  1149 ;;		___awdiv
  1150 ;;		___awmod
  1151 ;;		_initLCD
  1152 ;;		_intro
  1153 ;;		_print_simu
  1154 ;;		_putch
  1155 ;; This function is called by:
  1156 ;;		_main
  1157 ;; This function uses a non-reentrant model
  1158 ;;
  1159                           
  1160                           	psect	text1
  1161  00261E                     __ptext1:
  1162                           	opt stack 0
  1163  00261E                     _keypad:
  1164                           	opt stack 25
  1165                           
  1166                           ;main.c: 1203: if (PORTBbits.RB1 == 1) {
  1167                           
  1168                           ;incstack = 0
  1169  00261E  A281               	btfss	3969,1,c	;volatile
  1170  002620  0012               	return	
  1171                           
  1172                           ;main.c: 1205: keypress = (PORTB & 0xF0)>>4;
  1173  002622  3881               	swapf	3969,w,c	;volatile
  1174  002624  0B0F               	andlw	15
  1175  002626  0B0F               	andlw	15
  1176  002628  6E70               	movwf	_keypress,c
  1177                           
  1178                           ;main.c: 1206: temp = keys[keypress];
  1179  00262A  5070               	movf	_keypress,w,c
  1180  00262C  0D01               	mullw	1
  1181  00262E  0E01               	movlw	low _keys
  1182  002630  24F3               	addwf	prodl,w,c
  1183  002632  6EF6               	movwf	tblptrl,c
  1184  002634  0E10               	movlw	high _keys
  1185  002636  20F4               	addwfc	prodh,w,c
  1186  002638  6EF7               	movwf	tblptrh,c
  1187  00263A                     	if	0	;There are less than 3 active tblptr bytes
  1188  00263A                     	endif
  1189  00263A  0008               	tblrd		*
  1190  00263C  CFF5 F072          	movff	tablat,_temp
  1191                           
  1192                           ;main.c: 1213: __nop();
  1193  002640  F000               	nop	
  1194                           
  1195                           ;main.c: 1214: __nop();
  1196  002642  F000               	nop	
  1197                           
  1198                           ;main.c: 1216: switch (temp) {
  1199  002644  D165               	goto	l4335
  1200  002646                     l4219:
  1201                           
  1202                           ;main.c: 1218: if (state == RESET) {
  1203  002646  5054               	movf	_state,w,c
  1204  002648  1055               	iorwf	_state+1,w,c
  1205  00264A  A4D8               	btfss	status,2,c
  1206  00264C  0012               	return	
  1207                           
  1208                           ;main.c: 1220: if (test_mode == 1)
  1209  00264E  045A               	decf	_test_mode,w,c
  1210  002650  105B               	iorwf	_test_mode+1,w,c
  1211  002652  A4D8               	btfss	status,2,c
  1212  002654  D004               	goto	l4225
  1213                           
  1214                           ;main.c: 1221: state = TEST;
  1215  002656  0E00               	movlw	0
  1216  002658  6E55               	movwf	_state+1,c
  1217  00265A  0E62               	movlw	98
  1218  00265C  D003               	goto	L1
  1219  00265E                     l4225:
  1220                           
  1221                           ;main.c: 1222: else
  1222                           ;main.c: 1223: state = WAIT;
  1223  00265E  0E00               	movlw	0
  1224  002660  6E55               	movwf	_state+1,c
  1225  002662  0E01               	movlw	1
  1226  002664                     L1:
  1227  002664  6E54               	movwf	_state,c
  1228                           
  1229                           ;main.c: 1227: if (lcd_mode == 1)
  1230  002666  0100               	movlb	0	; () banked
  1231  002668  05BB               	decf	_lcd_mode& (0+255),w,b
  1232  00266A  0100               	movlb	0	; () banked
  1233  00266C  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  1234  00266E  B4D8               	btfsc	status,2,c
  1235                           
  1236                           ; BSR set to: 0
  1237                           ;main.c: 1228: print_simu();
  1238  002670  EC99  F014         	call	_print_simu	;wreg free
  1239                           
  1240                           ;main.c: 1233: sensor_state = RESET_SENSOR;
  1241  002674  0E00               	movlw	0
  1242  002676  6E53               	movwf	_sensor_state+1,c
  1243  002678  0E00               	movlw	0
  1244  00267A  6E52               	movwf	_sensor_state,c
  1245                           
  1246                           ;main.c: 1235: servo_duties[SERVO_9V] = RESET_POS_9V;
  1247  00267C  0E3A               	movlw	low _RESET_POS_9V
  1248  00267E  6EF6               	movwf	tblptrl,c
  1249  002680                     	if	1	;There is more than 1 active tblptr byte
  1250  002680  0E10               	movlw	high _RESET_POS_9V
  1251  002682  6EF7               	movwf	tblptrh,c
  1252  002684                     	endif
  1253  002684                     	if	0	;There are less than 3 active tblptr bytes
  1254  002684                     	endif
  1255  002684  0009               	tblrd		*+
  1256  002686  CFF5 F03C          	movff	tablat,_servo_duties
  1257  00268A  000A               	tblrd		*-
  1258  00268C  CFF5 F03D          	movff	tablat,_servo_duties+1
  1259                           
  1260                           ;main.c: 1236: servo_duties[SERVO_C] = RESET_POS_C;
  1261  002690  0E3E               	movlw	low _RESET_POS_C
  1262  002692  6EF6               	movwf	tblptrl,c
  1263  002694                     	if	1	;There is more than 1 active tblptr byte
  1264  002694  0E10               	movlw	high _RESET_POS_C
  1265  002696  6EF7               	movwf	tblptrh,c
  1266  002698                     	endif
  1267  002698                     	if	0	;There are less than 3 active tblptr bytes
  1268  002698                     	endif
  1269  002698  0009               	tblrd		*+
  1270  00269A  CFF5 F03E          	movff	tablat,_servo_duties+2
  1271  00269E  000A               	tblrd		*-
  1272  0026A0  CFF5 F03F          	movff	tablat,_servo_duties+3
  1273                           
  1274                           ;main.c: 1237: servo_duties[SERVO_AA] = RESET_POS_AA;
  1275  0026A4  0E3C               	movlw	low _RESET_POS_AA
  1276  0026A6  6EF6               	movwf	tblptrl,c
  1277  0026A8                     	if	1	;There is more than 1 active tblptr byte
  1278  0026A8  0E10               	movlw	high _RESET_POS_AA
  1279  0026AA  6EF7               	movwf	tblptrh,c
  1280  0026AC                     	endif
  1281  0026AC                     	if	0	;There are less than 3 active tblptr bytes
  1282  0026AC                     	endif
  1283  0026AC  0009               	tblrd		*+
  1284  0026AE  CFF5 F040          	movff	tablat,_servo_duties+4
  1285  0026B2  000A               	tblrd		*-
  1286  0026B4  CFF5 F041          	movff	tablat,_servo_duties+5
  1287                           
  1288                           ;main.c: 1238: servo_duties[SERVO_ELEC] = ELEC_UP;
  1289  0026B8  0E1A               	movlw	low _ELEC_UP
  1290  0026BA  6EF6               	movwf	tblptrl,c
  1291  0026BC                     	if	1	;There is more than 1 active tblptr byte
  1292  0026BC  0E10               	movlw	high _ELEC_UP
  1293  0026BE  6EF7               	movwf	tblptrh,c
  1294  0026C0                     	endif
  1295  0026C0                     	if	0	;There are less than 3 active tblptr bytes
  1296  0026C0                     	endif
  1297  0026C0  0009               	tblrd		*+
  1298  0026C2  CFF5 F042          	movff	tablat,_servo_duties+6
  1299  0026C6  000A               	tblrd		*-
  1300  0026C8  CFF5 F043          	movff	tablat,_servo_duties+7
  1301                           
  1302                           ;main.c: 1239: servo_duties[SERVO_RAMP] = RAMP_DEAD;
  1303  0026CC  0E36               	movlw	low _RAMP_DEAD
  1304  0026CE  6EF6               	movwf	tblptrl,c
  1305  0026D0                     	if	1	;There is more than 1 active tblptr byte
  1306  0026D0  0E10               	movlw	high _RAMP_DEAD
  1307  0026D2  6EF7               	movwf	tblptrh,c
  1308  0026D4                     	endif
  1309  0026D4                     	if	0	;There are less than 3 active tblptr bytes
  1310  0026D4                     	endif
  1311  0026D4  0009               	tblrd		*+
  1312  0026D6  CFF5 F044          	movff	tablat,_servo_duties+8
  1313  0026DA  000A               	tblrd		*-
  1314  0026DC  CFF5 F045          	movff	tablat,_servo_duties+9
  1315                           
  1316                           ;main.c: 1240: operation_time = 0;
  1317  0026E0  0E00               	movlw	0
  1318  0026E2  0100               	movlb	0	; () banked
  1319  0026E4  6FB6               	movwf	(_operation_time+1)& (0+255),b
  1320  0026E6  0E00               	movlw	0
  1321  0026E8  6FB5               	movwf	_operation_time& (0+255),b
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;main.c: 1242: timer_counter = 0;
  1325  0026EA  0E00               	movlw	0
  1326  0026EC  6E5D               	movwf	_timer_counter+1,c
  1327  0026EE  0E00               	movlw	0
  1328  0026F0  6E5C               	movwf	_timer_counter,c
  1329                           
  1330                           ; BSR set to: 0
  1331                           ;main.c: 1244: }
  1332                           ;main.c: 1245: break;
  1333  0026F2  0012               	return	
  1334  0026F4                     l4247:
  1335                           
  1336                           ;main.c: 1248: state = RESET;
  1337  0026F4  0E00               	movlw	0
  1338  0026F6  6E55               	movwf	_state+1,c
  1339  0026F8  0E00               	movlw	0
  1340  0026FA  6E54               	movwf	_state,c
  1341                           
  1342                           ;main.c: 1249: sensor_state = RESET_SENSOR;
  1343  0026FC  0E00               	movlw	0
  1344  0026FE  6E53               	movwf	_sensor_state+1,c
  1345  002700  0E00               	movlw	0
  1346  002702  6E52               	movwf	_sensor_state,c
  1347                           
  1348                           ;main.c: 1254: servo_duties[SERVO_9V] = RESET_POS_9V;
  1349  002704  0E3A               	movlw	low _RESET_POS_9V
  1350  002706  6EF6               	movwf	tblptrl,c
  1351  002708                     	if	1	;There is more than 1 active tblptr byte
  1352  002708  0E10               	movlw	high _RESET_POS_9V
  1353  00270A  6EF7               	movwf	tblptrh,c
  1354  00270C                     	endif
  1355  00270C                     	if	0	;There are less than 3 active tblptr bytes
  1356  00270C                     	endif
  1357  00270C  0009               	tblrd		*+
  1358  00270E  CFF5 F03C          	movff	tablat,_servo_duties
  1359  002712  000A               	tblrd		*-
  1360  002714  CFF5 F03D          	movff	tablat,_servo_duties+1
  1361                           
  1362                           ;main.c: 1255: servo_duties[SERVO_C] = RESET_POS_C;
  1363  002718  0E3E               	movlw	low _RESET_POS_C
  1364  00271A  6EF6               	movwf	tblptrl,c
  1365  00271C                     	if	1	;There is more than 1 active tblptr byte
  1366  00271C  0E10               	movlw	high _RESET_POS_C
  1367  00271E  6EF7               	movwf	tblptrh,c
  1368  002720                     	endif
  1369  002720                     	if	0	;There are less than 3 active tblptr bytes
  1370  002720                     	endif
  1371  002720  0009               	tblrd		*+
  1372  002722  CFF5 F03E          	movff	tablat,_servo_duties+2
  1373  002726  000A               	tblrd		*-
  1374  002728  CFF5 F03F          	movff	tablat,_servo_duties+3
  1375                           
  1376                           ;main.c: 1256: servo_duties[SERVO_AA] = RESET_POS_AA;
  1377  00272C  0E3C               	movlw	low _RESET_POS_AA
  1378  00272E  6EF6               	movwf	tblptrl,c
  1379  002730                     	if	1	;There is more than 1 active tblptr byte
  1380  002730  0E10               	movlw	high _RESET_POS_AA
  1381  002732  6EF7               	movwf	tblptrh,c
  1382  002734                     	endif
  1383  002734                     	if	0	;There are less than 3 active tblptr bytes
  1384  002734                     	endif
  1385  002734  0009               	tblrd		*+
  1386  002736  CFF5 F040          	movff	tablat,_servo_duties+4
  1387  00273A  000A               	tblrd		*-
  1388  00273C  CFF5 F041          	movff	tablat,_servo_duties+5
  1389                           
  1390                           ;main.c: 1257: servo_duties[SERVO_ELEC] = ELEC_UP;
  1391  002740  0E1A               	movlw	low _ELEC_UP
  1392  002742  6EF6               	movwf	tblptrl,c
  1393  002744                     	if	1	;There is more than 1 active tblptr byte
  1394  002744  0E10               	movlw	high _ELEC_UP
  1395  002746  6EF7               	movwf	tblptrh,c
  1396  002748                     	endif
  1397  002748                     	if	0	;There are less than 3 active tblptr bytes
  1398  002748                     	endif
  1399  002748  0009               	tblrd		*+
  1400  00274A  CFF5 F042          	movff	tablat,_servo_duties+6
  1401  00274E  000A               	tblrd		*-
  1402  002750  CFF5 F043          	movff	tablat,_servo_duties+7
  1403                           
  1404                           ;main.c: 1258: servo_duties[SERVO_RAMP] = RAMP_DEAD;
  1405  002754  0E36               	movlw	low _RAMP_DEAD
  1406  002756  6EF6               	movwf	tblptrl,c
  1407  002758                     	if	1	;There is more than 1 active tblptr byte
  1408  002758  0E10               	movlw	high _RAMP_DEAD
  1409  00275A  6EF7               	movwf	tblptrh,c
  1410  00275C                     	endif
  1411  00275C                     	if	0	;There are less than 3 active tblptr bytes
  1412  00275C                     	endif
  1413  00275C  0009               	tblrd		*+
  1414  00275E  CFF5 F044          	movff	tablat,_servo_duties+8
  1415  002762  000A               	tblrd		*-
  1416  002764  CFF5 F045          	movff	tablat,_servo_duties+9
  1417                           
  1418                           ;main.c: 1260: count9V = 0;
  1419  002768  0E00               	movlw	0
  1420  00276A  0100               	movlb	0	; () banked
  1421  00276C  6FAE               	movwf	(_count9V+1)& (0+255),b
  1422  00276E  0E00               	movlw	0
  1423  002770  6FAD               	movwf	_count9V& (0+255),b
  1424                           
  1425                           ; BSR set to: 0
  1426                           ;main.c: 1261: countC = 0;
  1427  002772  0E00               	movlw	0
  1428  002774  0100               	movlb	0	; () banked
  1429  002776  6FB2               	movwf	(_countC+1)& (0+255),b
  1430  002778  0E00               	movlw	0
  1431  00277A  6FB1               	movwf	_countC& (0+255),b
  1432                           
  1433                           ; BSR set to: 0
  1434                           ;main.c: 1262: countAA = 0;
  1435  00277C  0E00               	movlw	0
  1436  00277E  0100               	movlb	0	; () banked
  1437  002780  6FB0               	movwf	(_countAA+1)& (0+255),b
  1438  002782  0E00               	movlw	0
  1439  002784  6FAF               	movwf	_countAA& (0+255),b
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;main.c: 1263: countDead = 0;
  1443  002786  0E00               	movlw	0
  1444  002788  0100               	movlb	0	; () banked
  1445  00278A  6FB4               	movwf	(_countDead+1)& (0+255),b
  1446  00278C  0E00               	movlw	0
  1447  00278E  6FB3               	movwf	_countDead& (0+255),b
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;main.c: 1264: sensor9V = 0;
  1451  002790  0E00               	movlw	0
  1452  002792  6E4B               	movwf	_sensor9V+1,c
  1453  002794  0E00               	movlw	0
  1454  002796  6E4A               	movwf	_sensor9V,c
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;main.c: 1265: sensorC = 0;
  1458  002798  0E00               	movlw	0
  1459  00279A  6E4F               	movwf	_sensorC+1,c
  1460  00279C  0E00               	movlw	0
  1461  00279E  6E4E               	movwf	_sensorC,c
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;main.c: 1266: sensorAA = 0;
  1465  0027A0  0E00               	movlw	0
  1466  0027A2  6E4D               	movwf	_sensorAA+1,c
  1467  0027A4  0E00               	movlw	0
  1468  0027A6  6E4C               	movwf	_sensorAA,c
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;main.c: 1267: volt9V = 0;
  1472  0027A8  0E00               	movlw	0
  1473  0027AA  6E63               	movwf	_volt9V+1,c
  1474  0027AC  0E00               	movlw	0
  1475  0027AE  6E62               	movwf	_volt9V,c
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;main.c: 1268: voltC = 0;
  1479  0027B0  0E00               	movlw	0
  1480  0027B2  6E67               	movwf	_voltC+1,c
  1481  0027B4  0E00               	movlw	0
  1482  0027B6  6E66               	movwf	_voltC,c
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;main.c: 1269: voltAA = 0;
  1486  0027B8  0E00               	movlw	0
  1487  0027BA  6E65               	movwf	_voltAA+1,c
  1488  0027BC  0E00               	movlw	0
  1489  0027BE  6E64               	movwf	_voltAA,c
  1490                           
  1491                           ; BSR set to: 0
  1492                           ;main.c: 1270: AC_wait = 0;
  1493  0027C0  0E00               	movlw	0
  1494  0027C2  6E47               	movwf	_AC_wait+1,c
  1495  0027C4  0E00               	movlw	0
  1496  0027C6  6E46               	movwf	_AC_wait,c
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;main.c: 1272: timer_counter = 0;
  1500  0027C8  0E00               	movlw	0
  1501  0027CA  6E5D               	movwf	_timer_counter+1,c
  1502  0027CC  0E00               	movlw	0
  1503  0027CE  6E5C               	movwf	_timer_counter,c
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;main.c: 1273: timer_counter2 = 0;
  1507  0027D0  0E00               	movlw	0
  1508  0027D2  6E5F               	movwf	_timer_counter2+1,c
  1509  0027D4  0E00               	movlw	0
  1510  0027D6  6E5E               	movwf	_timer_counter2,c
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;main.c: 1274: timer_counter3 = 0;
  1514  0027D8  0E00               	movlw	0
  1515  0027DA  6E61               	movwf	_timer_counter3+1,c
  1516  0027DC  0E00               	movlw	0
  1517  0027DE  6E60               	movwf	_timer_counter3,c
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;main.c: 1275: timer_counter4 = 0;
  1521  0027E0  0E00               	movlw	0
  1522  0027E2  0100               	movlb	0	; () banked
  1523  0027E4  6FBE               	movwf	(_timer_counter4+1)& (0+255),b
  1524  0027E6  0E00               	movlw	0
  1525  0027E8  6FBD               	movwf	_timer_counter4& (0+255),b
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;main.c: 1277: intro();
  1529  0027EA  ECFF  F017         	call	_intro	;wreg free
  1530                           
  1531                           ;main.c: 1280: break;
  1532  0027EE  0012               	return	
  1533  0027F0                     l4291:
  1534                           
  1535                           ;main.c: 1283: timer_on = 0;
  1536  0027F0  0E00               	movlw	0
  1537  0027F2  6E75               	movwf	_timer_on+1,c
  1538  0027F4  0E00               	movlw	0
  1539  0027F6  6E74               	movwf	_timer_on,c
  1540                           
  1541                           ;main.c: 1285: state = EMERGENCY;
  1542  0027F8  0E00               	movlw	0
  1543  0027FA  6E55               	movwf	_state+1,c
  1544  0027FC  0E64               	movlw	100
  1545  0027FE  6E54               	movwf	_state,c
  1546                           
  1547                           ;main.c: 1287: break;
  1548  002800  0012               	return	
  1549  002802                     l4293:
  1550                           
  1551                           ;main.c: 1290: if (state == TEST) {
  1552  002802  0E62               	movlw	98
  1553  002804  1854               	xorwf	_state,w,c
  1554  002806  1055               	iorwf	_state+1,w,c
  1555  002808  A4D8               	btfss	status,2,c
  1556  00280A  0012               	return	
  1557                           
  1558                           ;main.c: 1294: servo_duties[SERVO_ELEC] += 1;
  1559  00280C  4A42               	infsnz	_servo_duties+6,f,c
  1560  00280E  2A43               	incf	_servo_duties+7,f,c
  1561                           
  1562                           ;main.c: 1297: initLCD();
  1563  002810  EC23  F018         	call	_initLCD	;wreg free
  1564                           
  1565                           ;main.c: 1298: _delay((unsigned long)((10)*(32000000/4000.0)));
  1566  002814  0E68               	movlw	104
  1567  002816  0100               	movlb	0	; () banked
  1568  002818  6F88               	movwf	??_keypad& (0+255),b
  1569  00281A  0EE4               	movlw	228
  1570  00281C                     u3727:
  1571  00281C  2EE8               	decfsz	wreg,f,c
  1572  00281E  D7FE               	bra	u3727
  1573  002820  2F88               	decfsz	??_keypad& (0+255),f,b
  1574  002822  D7FC               	bra	u3727
  1575  002824  F000               	nop	
  1576                           
  1577                           ;main.c: 1299: tenDigit = servo_duties[SERVO_ELEC] / 10 + 48;
  1578  002826  C042  F080         	movff	_servo_duties+6,___awdiv@dividend
  1579  00282A  C043  F081         	movff	_servo_duties+7,___awdiv@dividend+1
  1580  00282E  0E00               	movlw	0
  1581  002830  0100               	movlb	0	; () banked
  1582  002832  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1583  002834  0E0A               	movlw	10
  1584  002836  6F82               	movwf	___awdiv@divisor& (0+255),b
  1585  002838  EC7B  F016         	call	___awdiv	;wreg free
  1586  00283C  0E30               	movlw	48
  1587  00283E  0100               	movlb	0	; () banked
  1588  002840  2580               	addwf	?___awdiv& (0+255),w,b
  1589  002842  6E56               	movwf	_tenDigit,c
  1590  002844  0E00               	movlw	0
  1591  002846  0100               	movlb	0	; () banked
  1592  002848  2181               	addwfc	(?___awdiv+1)& (0+255),w,b
  1593  00284A  6E57               	movwf	_tenDigit+1,c
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;main.c: 1300: oneDigit = servo_duties[SERVO_ELEC] % 10 + 48;
  1597  00284C  C042  F080         	movff	_servo_duties+6,___awmod@dividend
  1598  002850  C043  F081         	movff	_servo_duties+7,___awmod@dividend+1
  1599  002854  0E00               	movlw	0
  1600  002856  0100               	movlb	0	; () banked
  1601  002858  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  1602  00285A  0E0A               	movlw	10
  1603  00285C  6F82               	movwf	___awmod@divisor& (0+255),b
  1604  00285E  ECDA  F016         	call	___awmod	;wreg free
  1605  002862  0E30               	movlw	48
  1606  002864  0100               	movlb	0	; () banked
  1607  002866  2580               	addwf	?___awmod& (0+255),w,b
  1608  002868  6E48               	movwf	_oneDigit,c
  1609  00286A  0E00               	movlw	0
  1610  00286C  0100               	movlb	0	; () banked
  1611  00286E  2181               	addwfc	(?___awmod+1)& (0+255),w,b
  1612  002870  6E49               	movwf	_oneDigit+1,c
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;main.c: 1301: tenDigitChar = tenDigit;
  1616  002872  C056  F073         	movff	_tenDigit,_tenDigitChar
  1617                           
  1618                           ; BSR set to: 0
  1619                           ;main.c: 1302: oneDigitChar = oneDigit;
  1620  002876  C048  F071         	movff	_oneDigit,_oneDigitChar
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;main.c: 1303: putch(tenDigitChar); putch(oneDigitChar);
  1624  00287A  5073               	movf	_tenDigitChar,w,c
  1625  00287C  EC61  F018         	call	_putch
  1626  002880  5071               	movf	_oneDigitChar,w,c
  1627  002882  EC61  F018         	call	_putch
  1628                           
  1629                           ;main.c: 1304: }
  1630                           ;main.c: 1305: break;
  1631  002886  0012               	return	
  1632  002888                     l4313:
  1633                           
  1634                           ;main.c: 1307: if (state == TEST) {
  1635  002888  0E62               	movlw	98
  1636  00288A  1854               	xorwf	_state,w,c
  1637  00288C  1055               	iorwf	_state+1,w,c
  1638  00288E  A4D8               	btfss	status,2,c
  1639  002890  0012               	return	
  1640                           
  1641                           ;main.c: 1311: servo_duties[SERVO_ELEC] -= 1;
  1642  002892  0642               	decf	_servo_duties+6,f,c
  1643  002894  A0D8               	btfss	status,0,c
  1644  002896  0643               	decf	_servo_duties+7,f,c
  1645                           
  1646                           ;main.c: 1314: initLCD();
  1647  002898  EC23  F018         	call	_initLCD	;wreg free
  1648                           
  1649                           ;main.c: 1315: _delay((unsigned long)((10)*(32000000/4000.0)));
  1650  00289C  0E68               	movlw	104
  1651  00289E  0100               	movlb	0	; () banked
  1652  0028A0  6F88               	movwf	??_keypad& (0+255),b
  1653  0028A2  0EE4               	movlw	228
  1654  0028A4                     u3737:
  1655  0028A4  2EE8               	decfsz	wreg,f,c
  1656  0028A6  D7FE               	bra	u3737
  1657  0028A8  2F88               	decfsz	??_keypad& (0+255),f,b
  1658  0028AA  D7FC               	bra	u3737
  1659  0028AC  F000               	nop	
  1660                           
  1661                           ;main.c: 1316: tenDigit = servo_duties[SERVO_ELEC] / 10 + 48;
  1662  0028AE  C042  F080         	movff	_servo_duties+6,___awdiv@dividend
  1663  0028B2  C043  F081         	movff	_servo_duties+7,___awdiv@dividend+1
  1664  0028B6  0E00               	movlw	0
  1665  0028B8  0100               	movlb	0	; () banked
  1666  0028BA  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1667  0028BC  0E0A               	movlw	10
  1668  0028BE  6F82               	movwf	___awdiv@divisor& (0+255),b
  1669  0028C0  EC7B  F016         	call	___awdiv	;wreg free
  1670  0028C4  0E30               	movlw	48
  1671  0028C6  0100               	movlb	0	; () banked
  1672  0028C8  2580               	addwf	?___awdiv& (0+255),w,b
  1673  0028CA  6E56               	movwf	_tenDigit,c
  1674  0028CC  0E00               	movlw	0
  1675  0028CE  0100               	movlb	0	; () banked
  1676  0028D0  2181               	addwfc	(?___awdiv+1)& (0+255),w,b
  1677  0028D2  6E57               	movwf	_tenDigit+1,c
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;main.c: 1317: oneDigit = servo_duties[SERVO_ELEC] % 10 + 48;
  1681  0028D4  C042  F080         	movff	_servo_duties+6,___awmod@dividend
  1682  0028D8  C043  F081         	movff	_servo_duties+7,___awmod@dividend+1
  1683  0028DC  0E00               	movlw	0
  1684  0028DE  0100               	movlb	0	; () banked
  1685  0028E0  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  1686  0028E2  0E0A               	movlw	10
  1687  0028E4  6F82               	movwf	___awmod@divisor& (0+255),b
  1688  0028E6  ECDA  F016         	call	___awmod	;wreg free
  1689  0028EA  0E30               	movlw	48
  1690  0028EC  0100               	movlb	0	; () banked
  1691  0028EE  2580               	addwf	?___awmod& (0+255),w,b
  1692  0028F0  6E48               	movwf	_oneDigit,c
  1693  0028F2  0E00               	movlw	0
  1694  0028F4  0100               	movlb	0	; () banked
  1695  0028F6  2181               	addwfc	(?___awmod+1)& (0+255),w,b
  1696  0028F8  6E49               	movwf	_oneDigit+1,c
  1697                           
  1698                           ; BSR set to: 0
  1699                           ;main.c: 1318: tenDigitChar = tenDigit;
  1700  0028FA  C056  F073         	movff	_tenDigit,_tenDigitChar
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;main.c: 1319: oneDigitChar = oneDigit;
  1704  0028FE  C048  F071         	movff	_oneDigit,_oneDigitChar
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;main.c: 1320: putch(tenDigitChar); putch(oneDigitChar);
  1708  002902  5073               	movf	_tenDigitChar,w,c
  1709  002904  EC61  F018         	call	_putch
  1710  002908  5071               	movf	_oneDigitChar,w,c
  1711  00290A  EC61  F018         	call	_putch
  1712                           
  1713                           ;main.c: 1325: }
  1714                           
  1715                           ;main.c: 1324: break;
  1716                           
  1717                           ;main.c: 1323: default:
  1718                           
  1719                           ;main.c: 1321: }
  1720                           ;main.c: 1322: break;
  1721  00290E  0012               	return	
  1722  002910                     l4335:
  1723  002910  5072               	movf	_temp,w,c
  1724                           
  1725                           ; Switch size 1, requested type "space"
  1726                           ; Number of cases is 5, Range of values is 49 to 65
  1727                           ; switch strategies available:
  1728                           ; Name         Instructions Cycles
  1729                           ; simple_byte           16     9 (average)
  1730                           ;	Chosen strategy is simple_byte
  1731  002912  0A31               	xorlw	49	; case 49
  1732  002914  B4D8               	btfsc	status,2,c
  1733  002916  D697               	goto	l4219
  1734  002918  0A03               	xorlw	3	; case 50
  1735  00291A  B4D8               	btfsc	status,2,c
  1736  00291C  D6EB               	goto	l4247
  1737  00291E  0A01               	xorlw	1	; case 51
  1738  002920  B4D8               	btfsc	status,2,c
  1739  002922  D766               	goto	l4291
  1740  002924  0A07               	xorlw	7	; case 52
  1741  002926  B4D8               	btfsc	status,2,c
  1742  002928  D7AF               	goto	l4313
  1743  00292A  0A75               	xorlw	117	; case 65
  1744  00292C  A4D8               	btfss	status,2,c
  1745  00292E  0012               	return	
  1746  002930  D768               	goto	l4293
  1747  002932                     __end_of_keypad:
  1748                           	opt stack 0
  1749                           tblptru	equ	0xFF8
  1750                           tblptrh	equ	0xFF7
  1751                           tblptrl	equ	0xFF6
  1752                           tablat	equ	0xFF5
  1753                           prodh	equ	0xFF4
  1754                           prodl	equ	0xFF3
  1755                           intcon	equ	0xFF2
  1756                           postinc0	equ	0xFEE
  1757                           wreg	equ	0xFE8
  1758                           postdec1	equ	0xFE5
  1759                           fsr1l	equ	0xFE1
  1760                           status	equ	0xFD8
  1761                           
  1762 ;; *************** function _intro *****************
  1763 ;; Defined at:
  1764 ;;		line 59 in file "lcd.c"
  1765 ;; Parameters:    Size  Location     Type
  1766 ;;		None
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;		None
  1769 ;; Return value:  Size  Location     Type
  1770 ;;                  1    wreg      void 
  1771 ;; Registers used:
  1772 ;;		wreg, status,2, status,0, cstack
  1773 ;; Tracked objects:
  1774 ;;		On entry : 0/0
  1775 ;;		On exit  : 0/0
  1776 ;;		Unchanged: 0/0
  1777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1780 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1781 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1782 ;;Total ram usage:        1 bytes
  1783 ;; Hardware stack levels used:    1
  1784 ;; Hardware stack levels required when called:    4
  1785 ;; This function calls:
  1786 ;;		_initLCD
  1787 ;;		_putch
  1788 ;; This function is called by:
  1789 ;;		_keypad
  1790 ;;		_main
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794                           	psect	text2
  1795  002FFE                     __ptext2:
  1796                           	opt stack 0
  1797  002FFE                     _intro:
  1798                           	opt stack 25
  1799                           
  1800                           ;lcd.c: 60: initLCD();
  1801                           
  1802                           ;incstack = 0
  1803  002FFE  EC23  F018         	call	_initLCD	;wreg free
  1804                           
  1805                           ;lcd.c: 61: putch('1');
  1806  003002  0E31               	movlw	49
  1807  003004  EC61  F018         	call	_putch
  1808                           
  1809                           ;lcd.c: 62: putch(':');
  1810  003008  0E3A               	movlw	58
  1811  00300A  EC61  F018         	call	_putch
  1812                           
  1813                           ;lcd.c: 63: putch(' ');
  1814  00300E  0E20               	movlw	32
  1815  003010  EC61  F018         	call	_putch
  1816                           
  1817                           ;lcd.c: 64: putch('S');
  1818  003014  0E53               	movlw	83
  1819  003016  EC61  F018         	call	_putch
  1820                           
  1821                           ;lcd.c: 65: putch('T');
  1822  00301A  0E54               	movlw	84
  1823  00301C  EC61  F018         	call	_putch
  1824                           
  1825                           ;lcd.c: 66: putch('A');
  1826  003020  0E41               	movlw	65
  1827  003022  EC61  F018         	call	_putch
  1828                           
  1829                           ;lcd.c: 67: putch('R');
  1830  003026  0E52               	movlw	82
  1831  003028  EC61  F018         	call	_putch
  1832                           
  1833                           ;lcd.c: 68: putch('T');
  1834  00302C  0E54               	movlw	84
  1835  00302E  EC61  F018         	call	_putch
  1836                           
  1837                           ;lcd.c: 69: _delay((unsigned long)((10)*(32000000/4000.0)));
  1838  003032  0E68               	movlw	104
  1839  003034  0100               	movlb	0	; () banked
  1840  003036  6F84               	movwf	??_intro& (0+255),b
  1841  003038  0EE4               	movlw	228
  1842  00303A                     u3747:
  1843  00303A  2EE8               	decfsz	wreg,f,c
  1844  00303C  D7FE               	bra	u3747
  1845  00303E  2F84               	decfsz	??_intro& (0+255),f,b
  1846  003040  D7FC               	bra	u3747
  1847  003042  F000               	nop	
  1848  003044  0012               	return		;funcret
  1849  003046                     __end_of_intro:
  1850                           	opt stack 0
  1851                           tblptru	equ	0xFF8
  1852                           tblptrh	equ	0xFF7
  1853                           tblptrl	equ	0xFF6
  1854                           tablat	equ	0xFF5
  1855                           prodh	equ	0xFF4
  1856                           prodl	equ	0xFF3
  1857                           intcon	equ	0xFF2
  1858                           postinc0	equ	0xFEE
  1859                           wreg	equ	0xFE8
  1860                           postdec1	equ	0xFE5
  1861                           fsr1l	equ	0xFE1
  1862                           status	equ	0xFD8
  1863                           
  1864 ;; *************** function _FSM *****************
  1865 ;; Defined at:
  1866 ;;		line 559 in file "main.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;		None
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;		None
  1871 ;; Return value:  Size  Location     Type
  1872 ;;                  1    wreg      void 
  1873 ;; Registers used:
  1874 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1875 ;; Tracked objects:
  1876 ;;		On entry : 0/0
  1877 ;;		On exit  : 0/0
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1882 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1883 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1884 ;;Total ram usage:        3 bytes
  1885 ;; Hardware stack levels used:    1
  1886 ;; Hardware stack levels required when called:    5
  1887 ;; This function calls:
  1888 ;;		___awdiv
  1889 ;;		_print_batteries
  1890 ;;		_print_simu
  1891 ;; This function is called by:
  1892 ;;		_main
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           	psect	text3
  1897  00104A                     __ptext3:
  1898                           	opt stack 0
  1899  00104A                     _FSM:
  1900                           	opt stack 25
  1901                           
  1902                           ;main.c: 566: switch(state) {
  1903                           
  1904                           ;incstack = 0
  1905  00104A  EF5D  F00E         	goto	l4195
  1906  00104E                     l3849:
  1907                           
  1908                           ;main.c: 575: timer_counter2 = 0;
  1909  00104E  0E00               	movlw	0
  1910  001050  6E5F               	movwf	_timer_counter2+1,c
  1911  001052  0E00               	movlw	0
  1912  001054  6E5E               	movwf	_timer_counter2,c
  1913                           
  1914                           ;main.c: 576: break;
  1915  001056  0012               	return	
  1916  001058                     l3851:
  1917                           
  1918                           ;main.c: 586: if (timer_counter4 >= AGITATE_WAIT_1) {
  1919  001058  0E14               	movlw	low _AGITATE_WAIT_1
  1920  00105A  6EF6               	movwf	tblptrl,c
  1921  00105C                     	if	1	;There is more than 1 active tblptr byte
  1922  00105C  0E10               	movlw	high _AGITATE_WAIT_1
  1923  00105E  6EF7               	movwf	tblptrh,c
  1924  001060                     	endif
  1925  001060                     	if	0	;There are less than 3 active tblptr bytes
  1926  001060                     	endif
  1927  001060  0009               	tblrd		*+
  1928  001062  50F5               	movf	tablat,w,c
  1929  001064  0100               	movlb	0	; () banked
  1930  001066  5DBD               	subwf	_timer_counter4& (0+255),w,b
  1931  001068  0100               	movlb	0	; () banked
  1932  00106A  51BE               	movf	(_timer_counter4+1)& (0+255),w,b
  1933  00106C  0A80               	xorlw	128
  1934  00106E  0100               	movlb	0	; () banked
  1935  001070  6FAA               	movwf	??_FSM& (0+255),b
  1936  001072  0009               	tblrd		*+
  1937  001074  50F5               	movf	tablat,w,c
  1938  001076  0A80               	xorlw	128
  1939  001078  0100               	movlb	0	; () banked
  1940  00107A  59AA               	subwfb	??_FSM& (0+255),w,b
  1941  00107C  A0D8               	btfss	status,0,c
  1942  00107E  D166               	goto	l3943
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;main.c: 587: if (servo_duties[SERVO_AA] == RESET_POS_AA) {
  1946  001080  0E3C               	movlw	low _RESET_POS_AA
  1947  001082  6EF6               	movwf	tblptrl,c
  1948  001084                     	if	1	;There is more than 1 active tblptr byte
  1949  001084  0E10               	movlw	high _RESET_POS_AA
  1950  001086  6EF7               	movwf	tblptrh,c
  1951  001088                     	endif
  1952  001088                     	if	0	;There are less than 3 active tblptr bytes
  1953  001088                     	endif
  1954  001088  0009               	tblrd		*+
  1955  00108A  50F5               	movf	tablat,w,c
  1956  00108C  1840               	xorwf	_servo_duties+4,w,c
  1957  00108E  E146               	bnz	l3863
  1958  001090  0009               	tblrd		*+
  1959  001092  50F5               	movf	tablat,w,c
  1960  001094  1841               	xorwf	_servo_duties+5,w,c
  1961  001096  A4D8               	btfss	status,2,c
  1962  001098  D041               	goto	l3863
  1963                           
  1964                           ; BSR set to: 0
  1965                           ;main.c: 588: servo_duties[SERVO_9V] = RESET_POS_9V - 3;
  1966  00109A  0E3A               	movlw	low _RESET_POS_9V
  1967  00109C  6EF6               	movwf	tblptrl,c
  1968  00109E                     	if	1	;There is more than 1 active tblptr byte
  1969  00109E  0E10               	movlw	high _RESET_POS_9V
  1970  0010A0  6EF7               	movwf	tblptrh,c
  1971  0010A2                     	endif
  1972  0010A2                     	if	0	;There are less than 3 active tblptr bytes
  1973  0010A2                     	endif
  1974  0010A2  0009               	tblrd		*+
  1975  0010A4  CFF5 F0AA          	movff	tablat,??_FSM
  1976  0010A8  0009               	tblrd		*+
  1977  0010AA  CFF5 F0AB          	movff	tablat,??_FSM+1
  1978  0010AE  0EFD               	movlw	253
  1979  0010B0  0100               	movlb	0	; () banked
  1980  0010B2  25AA               	addwf	??_FSM& (0+255),w,b
  1981  0010B4  6E3C               	movwf	_servo_duties,c
  1982  0010B6  0EFF               	movlw	255
  1983  0010B8  0100               	movlb	0	; () banked
  1984  0010BA  21AB               	addwfc	(??_FSM+1)& (0+255),w,b
  1985  0010BC  6E3D               	movwf	_servo_duties+1,c
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;main.c: 589: if (sensor_state == WAIT_SENSOR_C)
  1989  0010BE  0E02               	movlw	2
  1990  0010C0  1852               	xorwf	_sensor_state,w,c
  1991  0010C2  1053               	iorwf	_sensor_state+1,w,c
  1992  0010C4  A4D8               	btfss	status,2,c
  1993  0010C6  D005               	goto	l3861
  1994                           
  1995                           ; BSR set to: 0
  1996                           ;main.c: 590: servo_duties[SERVO_C] = FORWARD_POS_0_C - 3;
  1997  0010C8  0E1C               	movlw	low _FORWARD_POS_0_C
  1998  0010CA  6EF6               	movwf	tblptrl,c
  1999  0010CC                     	if	1	;There is more than 1 active tblptr byte
  2000  0010CC  0E10               	movlw	high _FORWARD_POS_0_C
  2001  0010CE  6EF7               	movwf	tblptrh,c
  2002  0010D0                     	endif
  2003  0010D0                     	if	0	;There are less than 3 active tblptr bytes
  2004  0010D0  D004               	goto	L2
  2005  0010D2                     l3861:
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;main.c: 591: else
  2009                           ;main.c: 592: servo_duties[SERVO_C] = RESET_POS_C - 3;
  2010  0010D2  0E3E               	movlw	low _RESET_POS_C
  2011  0010D4  6EF6               	movwf	tblptrl,c
  2012  0010D6                     	if	1	;There is more than 1 active tblptr byte
  2013  0010D6  0E10               	movlw	high _RESET_POS_C
  2014  0010D8  6EF7               	movwf	tblptrh,c
  2015  0010DA                     	endif
  2016  0010DA                     	if	0	;There are less than 3 active tblptr bytes
  2017  0010DA                     L2:
  2018  0010DA                     	endif
  2019  0010DA  0009               	tblrd		*+
  2020  0010DC  CFF5 F0AA          	movff	tablat,??_FSM
  2021  0010E0  0009               	tblrd		*+
  2022  0010E2  CFF5 F0AB          	movff	tablat,??_FSM+1
  2023  0010E6  0EFD               	movlw	253
  2024  0010E8  0100               	movlb	0	; () banked
  2025  0010EA  25AA               	addwf	??_FSM& (0+255),w,b
  2026  0010EC  6E3E               	movwf	_servo_duties+2,c
  2027  0010EE  0EFF               	movlw	255
  2028  0010F0  0100               	movlb	0	; () banked
  2029  0010F2  21AB               	addwfc	(??_FSM+1)& (0+255),w,b
  2030  0010F4  6E3F               	movwf	_servo_duties+3,c
  2031                           
  2032                           ; BSR set to: 0
  2033                           ;main.c: 593: servo_duties[SERVO_AA] = RESET_POS_AA - 3;
  2034  0010F6  0E3C               	movlw	low _RESET_POS_AA
  2035  0010F8  6EF6               	movwf	tblptrl,c
  2036  0010FA                     	if	1	;There is more than 1 active tblptr byte
  2037  0010FA  0E10               	movlw	high _RESET_POS_AA
  2038  0010FC  6EF7               	movwf	tblptrh,c
  2039  0010FE                     	endif
  2040  0010FE                     	if	0	;There are less than 3 active tblptr bytes
  2041  0010FE                     	endif
  2042  0010FE  0009               	tblrd		*+
  2043  001100  CFF5 F0AA          	movff	tablat,??_FSM
  2044  001104  0009               	tblrd		*+
  2045  001106  CFF5 F0AB          	movff	tablat,??_FSM+1
  2046  00110A  0EFD               	movlw	253
  2047  00110C  0100               	movlb	0	; () banked
  2048  00110E  25AA               	addwf	??_FSM& (0+255),w,b
  2049  001110  6E40               	movwf	_servo_duties+4,c
  2050  001112  0EFF               	movlw	255
  2051  001114  0100               	movlb	0	; () banked
  2052  001116  21AB               	addwfc	(??_FSM+1)& (0+255),w,b
  2053  001118  6E41               	movwf	_servo_duties+5,c
  2054                           
  2055                           ;main.c: 594: } else {
  2056  00111A  D028               	goto	l3871
  2057  00111C                     l3863:
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;main.c: 595: servo_duties[SERVO_9V] = RESET_POS_9V;
  2061  00111C  0E3A               	movlw	low _RESET_POS_9V
  2062  00111E  6EF6               	movwf	tblptrl,c
  2063  001120                     	if	1	;There is more than 1 active tblptr byte
  2064  001120  0E10               	movlw	high _RESET_POS_9V
  2065  001122  6EF7               	movwf	tblptrh,c
  2066  001124                     	endif
  2067  001124                     	if	0	;There are less than 3 active tblptr bytes
  2068  001124                     	endif
  2069  001124  0009               	tblrd		*+
  2070  001126  CFF5 F03C          	movff	tablat,_servo_duties
  2071  00112A  000A               	tblrd		*-
  2072  00112C  CFF5 F03D          	movff	tablat,_servo_duties+1
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;main.c: 596: if (sensor_state == WAIT_SENSOR_C)
  2076  001130  0E02               	movlw	2
  2077  001132  1852               	xorwf	_sensor_state,w,c
  2078  001134  1053               	iorwf	_sensor_state+1,w,c
  2079  001136  A4D8               	btfss	status,2,c
  2080  001138  D005               	goto	l3869
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;main.c: 597: servo_duties[SERVO_C] = FORWARD_POS_0_C;
  2084  00113A  0E1C               	movlw	low _FORWARD_POS_0_C
  2085  00113C  6EF6               	movwf	tblptrl,c
  2086  00113E                     	if	1	;There is more than 1 active tblptr byte
  2087  00113E  0E10               	movlw	high _FORWARD_POS_0_C
  2088  001140  6EF7               	movwf	tblptrh,c
  2089  001142                     	endif
  2090  001142                     	if	0	;There are less than 3 active tblptr bytes
  2091  001142  D004               	goto	L3
  2092  001144                     l3869:
  2093                           
  2094                           ; BSR set to: 0
  2095                           ;main.c: 598: else
  2096                           ;main.c: 599: servo_duties[SERVO_C] = RESET_POS_C;
  2097  001144  0E3E               	movlw	low _RESET_POS_C
  2098  001146  6EF6               	movwf	tblptrl,c
  2099  001148                     	if	1	;There is more than 1 active tblptr byte
  2100  001148  0E10               	movlw	high _RESET_POS_C
  2101  00114A  6EF7               	movwf	tblptrh,c
  2102  00114C                     	endif
  2103  00114C                     	if	0	;There are less than 3 active tblptr bytes
  2104  00114C                     L3:
  2105  00114C                     	endif
  2106  00114C  0009               	tblrd		*+
  2107  00114E  CFF5 F03E          	movff	tablat,_servo_duties+2
  2108  001152  000A               	tblrd		*-
  2109  001154  CFF5 F03F          	movff	tablat,_servo_duties+3
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;main.c: 600: servo_duties[SERVO_AA] = RESET_POS_AA;
  2113  001158  0E3C               	movlw	low _RESET_POS_AA
  2114  00115A  6EF6               	movwf	tblptrl,c
  2115  00115C                     	if	1	;There is more than 1 active tblptr byte
  2116  00115C  0E10               	movlw	high _RESET_POS_AA
  2117  00115E  6EF7               	movwf	tblptrh,c
  2118  001160                     	endif
  2119  001160                     	if	0	;There are less than 3 active tblptr bytes
  2120  001160                     	endif
  2121  001160  0009               	tblrd		*+
  2122  001162  CFF5 F040          	movff	tablat,_servo_duties+4
  2123  001166  000A               	tblrd		*-
  2124  001168  CFF5 F041          	movff	tablat,_servo_duties+5
  2125  00116C                     l3871:
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;main.c: 601: }
  2129                           ;main.c: 603: timer_counter4 = 0;
  2130  00116C  0E00               	movlw	0
  2131  00116E  0100               	movlb	0	; () banked
  2132  001170  6FBE               	movwf	(_timer_counter4+1)& (0+255),b
  2133  001172  0E00               	movlw	0
  2134  001174  6FBD               	movwf	_timer_counter4& (0+255),b
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;main.c: 604: }
  2138                           ;main.c: 606: switch(sensor_state) {
  2139  001176  D0EA               	goto	l3943
  2140  001178                     l3873:
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;main.c: 608: sensor_state = WAIT_SENSOR;
  2144  001178  0E00               	movlw	0
  2145  00117A  6E53               	movwf	_sensor_state+1,c
  2146  00117C  0E01               	movlw	1
  2147  00117E  6E52               	movwf	_sensor_state,c
  2148                           
  2149                           ;main.c: 609: sensor9V = 0;
  2150  001180  0E00               	movlw	0
  2151  001182  6E4B               	movwf	_sensor9V+1,c
  2152  001184  0E00               	movlw	0
  2153  001186  6E4A               	movwf	_sensor9V,c
  2154                           
  2155                           ;main.c: 610: sensorC = 0;
  2156  001188  0E00               	movlw	0
  2157  00118A  6E4F               	movwf	_sensorC+1,c
  2158  00118C  0E00               	movlw	0
  2159  00118E  6E4E               	movwf	_sensorC,c
  2160                           
  2161                           ;main.c: 611: sensorAA = 0;
  2162  001190  0E00               	movlw	0
  2163  001192  6E4D               	movwf	_sensorAA+1,c
  2164  001194  0E00               	movlw	0
  2165  001196  6E4C               	movwf	_sensorAA,c
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;main.c: 612: if (lcd_mode == 1)
  2169  001198  0100               	movlb	0	; () banked
  2170  00119A  05BB               	decf	_lcd_mode& (0+255),w,b
  2171  00119C  0100               	movlb	0	; () banked
  2172  00119E  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  2173  0011A0  A4D8               	btfss	status,2,c
  2174  0011A2  0012               	return	
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;main.c: 613: print_simu();
  2178  0011A4  EC99  F014         	call	_print_simu	;wreg free
  2179                           
  2180                           ;main.c: 614: break;
  2181  0011A8  0012               	return	
  2182  0011AA                     l3879:
  2183                           
  2184                           ;main.c: 619: if (sensor9V >= SENSOR_WAIT) {
  2185  0011AA  0E40               	movlw	low _SENSOR_WAIT
  2186  0011AC  6EF6               	movwf	tblptrl,c
  2187  0011AE                     	if	1	;There is more than 1 active tblptr byte
  2188  0011AE  0E10               	movlw	high _SENSOR_WAIT
  2189  0011B0  6EF7               	movwf	tblptrh,c
  2190  0011B2                     	endif
  2191  0011B2                     	if	0	;There are less than 3 active tblptr bytes
  2192  0011B2                     	endif
  2193  0011B2  0009               	tblrd		*+
  2194  0011B4  50F5               	movf	tablat,w,c
  2195  0011B6  5C4A               	subwf	_sensor9V,w,c
  2196  0011B8  504B               	movf	_sensor9V+1,w,c
  2197  0011BA  0A80               	xorlw	128
  2198  0011BC  0100               	movlb	0	; () banked
  2199  0011BE  6FAA               	movwf	??_FSM& (0+255),b
  2200  0011C0  0009               	tblrd		*+
  2201  0011C2  50F5               	movf	tablat,w,c
  2202  0011C4  0A80               	xorlw	128
  2203  0011C6  0100               	movlb	0	; () banked
  2204  0011C8  59AA               	subwfb	??_FSM& (0+255),w,b
  2205  0011CA  A0D8               	btfss	status,0,c
  2206  0011CC  D015               	goto	l3891
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;main.c: 620: state = F_9V;
  2210  0011CE  0E00               	movlw	0
  2211  0011D0  6E55               	movwf	_state+1,c
  2212  0011D2  0E14               	movlw	20
  2213  0011D4  6E54               	movwf	_state,c
  2214                           
  2215                           ;main.c: 624: sensor_state = RESET_SENSOR;
  2216  0011D6  0E00               	movlw	0
  2217  0011D8  6E53               	movwf	_sensor_state+1,c
  2218  0011DA  0E00               	movlw	0
  2219  0011DC  6E52               	movwf	_sensor_state,c
  2220                           
  2221                           ;main.c: 627: timer_counter2 = 0;
  2222  0011DE  0E00               	movlw	0
  2223  0011E0  6E5F               	movwf	_timer_counter2+1,c
  2224  0011E2  0E00               	movlw	0
  2225  0011E4  6E5E               	movwf	_timer_counter2,c
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;main.c: 630: LATCbits.LATC5 = 0;
  2229  0011E6  9A8B               	bcf	3979,5,c	;volatile
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;main.c: 631: LATCbits.LATC6 = 0;
  2233  0011E8  9C8B               	bcf	3979,6,c	;volatile
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;main.c: 634: if (lcd_mode == 1) {
  2237  0011EA  0100               	movlb	0	; () banked
  2238  0011EC  05BB               	decf	_lcd_mode& (0+255),w,b
  2239  0011EE  0100               	movlb	0	; () banked
  2240  0011F0  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  2241  0011F2  B4D8               	btfsc	status,2,c
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;main.c: 636: print_simu();
  2245  0011F4  EC99  F014         	call	_print_simu	;wreg free
  2246  0011F8                     l3891:
  2247                           
  2248                           ;main.c: 637: }
  2249                           ;main.c: 639: }
  2250                           ;main.c: 640: if (sensorC >= SENSOR_WAIT) {
  2251  0011F8  0E40               	movlw	low _SENSOR_WAIT
  2252  0011FA  6EF6               	movwf	tblptrl,c
  2253  0011FC                     	if	1	;There is more than 1 active tblptr byte
  2254  0011FC  0E10               	movlw	high _SENSOR_WAIT
  2255  0011FE  6EF7               	movwf	tblptrh,c
  2256  001200                     	endif
  2257  001200                     	if	0	;There are less than 3 active tblptr bytes
  2258  001200                     	endif
  2259  001200  0009               	tblrd		*+
  2260  001202  50F5               	movf	tablat,w,c
  2261  001204  5C4E               	subwf	_sensorC,w,c
  2262  001206  504F               	movf	_sensorC+1,w,c
  2263  001208  0A80               	xorlw	128
  2264  00120A  0100               	movlb	0	; () banked
  2265  00120C  6FAA               	movwf	??_FSM& (0+255),b
  2266  00120E  0009               	tblrd		*+
  2267  001210  50F5               	movf	tablat,w,c
  2268  001212  0A80               	xorlw	128
  2269  001214  0100               	movlb	0	; () banked
  2270  001216  59AA               	subwfb	??_FSM& (0+255),w,b
  2271  001218  A0D8               	btfss	status,0,c
  2272  00121A  D015               	goto	l3903
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;main.c: 643: sensor_state = WAIT_SENSOR_C;
  2276  00121C  0E00               	movlw	0
  2277  00121E  6E53               	movwf	_sensor_state+1,c
  2278  001220  0E02               	movlw	2
  2279  001222  6E52               	movwf	_sensor_state,c
  2280                           
  2281                           ;main.c: 644: sensorC = 0;
  2282  001224  0E00               	movlw	0
  2283  001226  6E4F               	movwf	_sensorC+1,c
  2284  001228  0E00               	movlw	0
  2285  00122A  6E4E               	movwf	_sensorC,c
  2286                           
  2287                           ;main.c: 646: timer_counter2 = 0;
  2288  00122C  0E00               	movlw	0
  2289  00122E  6E5F               	movwf	_timer_counter2+1,c
  2290  001230  0E00               	movlw	0
  2291  001232  6E5E               	movwf	_timer_counter2,c
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;main.c: 649: LATCbits.LATC5 = 0;
  2295  001234  9A8B               	bcf	3979,5,c	;volatile
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;main.c: 650: LATCbits.LATC6 = 0;
  2299  001236  9C8B               	bcf	3979,6,c	;volatile
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;main.c: 653: if (lcd_mode == 1) {
  2303  001238  0100               	movlb	0	; () banked
  2304  00123A  05BB               	decf	_lcd_mode& (0+255),w,b
  2305  00123C  0100               	movlb	0	; () banked
  2306  00123E  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  2307  001240  B4D8               	btfsc	status,2,c
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;main.c: 655: print_simu();
  2311  001242  EC99  F014         	call	_print_simu	;wreg free
  2312  001246                     l3903:
  2313                           
  2314                           ;main.c: 656: }
  2315                           ;main.c: 659: }
  2316                           ;main.c: 660: if (sensorAA >= SENSOR_WAIT) {
  2317  001246  0E40               	movlw	low _SENSOR_WAIT
  2318  001248  6EF6               	movwf	tblptrl,c
  2319  00124A                     	if	1	;There is more than 1 active tblptr byte
  2320  00124A  0E10               	movlw	high _SENSOR_WAIT
  2321  00124C  6EF7               	movwf	tblptrh,c
  2322  00124E                     	endif
  2323  00124E                     	if	0	;There are less than 3 active tblptr bytes
  2324  00124E                     	endif
  2325  00124E  0009               	tblrd		*+
  2326  001250  50F5               	movf	tablat,w,c
  2327  001252  5C4C               	subwf	_sensorAA,w,c
  2328  001254  504D               	movf	_sensorAA+1,w,c
  2329  001256  0A80               	xorlw	128
  2330  001258  0100               	movlb	0	; () banked
  2331  00125A  6FAA               	movwf	??_FSM& (0+255),b
  2332  00125C  0009               	tblrd		*+
  2333  00125E  50F5               	movf	tablat,w,c
  2334  001260  0A80               	xorlw	128
  2335  001262  0100               	movlb	0	; () banked
  2336  001264  59AA               	subwfb	??_FSM& (0+255),w,b
  2337  001266  A0D8               	btfss	status,0,c
  2338  001268  0012               	return	
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;main.c: 661: state = F_AA;
  2342  00126A  0E00               	movlw	0
  2343  00126C  6E55               	movwf	_state+1,c
  2344  00126E  0E28               	movlw	40
  2345  001270  6E54               	movwf	_state,c
  2346                           
  2347                           ;main.c: 664: sensor_state = RESET_SENSOR;
  2348  001272  0E00               	movlw	0
  2349  001274  6E53               	movwf	_sensor_state+1,c
  2350  001276  0E00               	movlw	0
  2351  001278  6E52               	movwf	_sensor_state,c
  2352                           
  2353                           ;main.c: 667: timer_counter2 = 0;
  2354  00127A  0E00               	movlw	0
  2355  00127C  6E5F               	movwf	_timer_counter2+1,c
  2356  00127E  0E00               	movlw	0
  2357  001280  6E5E               	movwf	_timer_counter2,c
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;main.c: 670: LATCbits.LATC5 = 0;
  2361  001282  9A8B               	bcf	3979,5,c	;volatile
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;main.c: 671: LATCbits.LATC6 = 0;
  2365  001284  9C8B               	bcf	3979,6,c	;volatile
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;main.c: 674: if (lcd_mode == 1) {
  2369  001286  0100               	movlb	0	; () banked
  2370  001288  05BB               	decf	_lcd_mode& (0+255),w,b
  2371  00128A  0100               	movlb	0	; () banked
  2372  00128C  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  2373  00128E  A4D8               	btfss	status,2,c
  2374  001290  0012               	return	
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;main.c: 676: print_simu();
  2378  001292  EC99  F014         	call	_print_simu	;wreg free
  2379                           
  2380                           ;main.c: 677: }
  2381                           ;main.c: 679: }
  2382                           ;main.c: 681: break;
  2383  001296  0012               	return	
  2384  001298                     l3915:
  2385                           
  2386                           ;main.c: 686: servo_duties[SERVO_C] = FORWARD_POS_0_C;
  2387  001298  0E1C               	movlw	low _FORWARD_POS_0_C
  2388  00129A  6EF6               	movwf	tblptrl,c
  2389  00129C                     	if	1	;There is more than 1 active tblptr byte
  2390  00129C  0E10               	movlw	high _FORWARD_POS_0_C
  2391  00129E  6EF7               	movwf	tblptrh,c
  2392  0012A0                     	endif
  2393  0012A0                     	if	0	;There are less than 3 active tblptr bytes
  2394  0012A0                     	endif
  2395  0012A0  0009               	tblrd		*+
  2396  0012A2  CFF5 F03E          	movff	tablat,_servo_duties+2
  2397  0012A6  000A               	tblrd		*-
  2398  0012A8  CFF5 F03F          	movff	tablat,_servo_duties+3
  2399                           
  2400                           ;main.c: 688: if (sensorC >= SENSOR_WAIT) {
  2401  0012AC  0E40               	movlw	low _SENSOR_WAIT
  2402  0012AE  6EF6               	movwf	tblptrl,c
  2403  0012B0                     	if	1	;There is more than 1 active tblptr byte
  2404  0012B0  0E10               	movlw	high _SENSOR_WAIT
  2405  0012B2  6EF7               	movwf	tblptrh,c
  2406  0012B4                     	endif
  2407  0012B4                     	if	0	;There are less than 3 active tblptr bytes
  2408  0012B4                     	endif
  2409  0012B4  0009               	tblrd		*+
  2410  0012B6  50F5               	movf	tablat,w,c
  2411  0012B8  5C4E               	subwf	_sensorC,w,c
  2412  0012BA  504F               	movf	_sensorC+1,w,c
  2413  0012BC  0A80               	xorlw	128
  2414  0012BE  0100               	movlb	0	; () banked
  2415  0012C0  6FAA               	movwf	??_FSM& (0+255),b
  2416  0012C2  0009               	tblrd		*+
  2417  0012C4  50F5               	movf	tablat,w,c
  2418  0012C6  0A80               	xorlw	128
  2419  0012C8  0100               	movlb	0	; () banked
  2420  0012CA  59AA               	subwfb	??_FSM& (0+255),w,b
  2421  0012CC  A0D8               	btfss	status,0,c
  2422  0012CE  D015               	goto	l3929
  2423                           
  2424                           ; BSR set to: 0
  2425                           ;main.c: 689: state = F_C;
  2426  0012D0  0E00               	movlw	0
  2427  0012D2  6E55               	movwf	_state+1,c
  2428  0012D4  0E1E               	movlw	30
  2429  0012D6  6E54               	movwf	_state,c
  2430                           
  2431                           ;main.c: 692: sensor_state = RESET_SENSOR;
  2432  0012D8  0E00               	movlw	0
  2433  0012DA  6E53               	movwf	_sensor_state+1,c
  2434  0012DC  0E00               	movlw	0
  2435  0012DE  6E52               	movwf	_sensor_state,c
  2436                           
  2437                           ;main.c: 695: timer_counter2 = 0;
  2438  0012E0  0E00               	movlw	0
  2439  0012E2  6E5F               	movwf	_timer_counter2+1,c
  2440  0012E4  0E00               	movlw	0
  2441  0012E6  6E5E               	movwf	_timer_counter2,c
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;main.c: 698: LATCbits.LATC5 = 0;
  2445  0012E8  9A8B               	bcf	3979,5,c	;volatile
  2446                           
  2447                           ; BSR set to: 0
  2448                           ;main.c: 699: LATCbits.LATC6 = 0;
  2449  0012EA  9C8B               	bcf	3979,6,c	;volatile
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;main.c: 702: if (lcd_mode == 1) {
  2453  0012EC  0100               	movlb	0	; () banked
  2454  0012EE  05BB               	decf	_lcd_mode& (0+255),w,b
  2455  0012F0  0100               	movlb	0	; () banked
  2456  0012F2  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  2457  0012F4  B4D8               	btfsc	status,2,c
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;main.c: 704: print_simu();
  2461  0012F6  EC99  F014         	call	_print_simu	;wreg free
  2462  0012FA                     l3929:
  2463                           
  2464                           ;main.c: 705: }
  2465                           ;main.c: 708: }
  2466                           ;main.c: 709: if (sensorAA >= SENSOR_WAIT) {
  2467  0012FA  0E40               	movlw	low _SENSOR_WAIT
  2468  0012FC  6EF6               	movwf	tblptrl,c
  2469  0012FE                     	if	1	;There is more than 1 active tblptr byte
  2470  0012FE  0E10               	movlw	high _SENSOR_WAIT
  2471  001300  6EF7               	movwf	tblptrh,c
  2472  001302                     	endif
  2473  001302                     	if	0	;There are less than 3 active tblptr bytes
  2474  001302                     	endif
  2475  001302  0009               	tblrd		*+
  2476  001304  50F5               	movf	tablat,w,c
  2477  001306  5C4C               	subwf	_sensorAA,w,c
  2478  001308  504D               	movf	_sensorAA+1,w,c
  2479  00130A  0A80               	xorlw	128
  2480  00130C  0100               	movlb	0	; () banked
  2481  00130E  6FAA               	movwf	??_FSM& (0+255),b
  2482  001310  0009               	tblrd		*+
  2483  001312  50F5               	movf	tablat,w,c
  2484  001314  0A80               	xorlw	128
  2485  001316  0100               	movlb	0	; () banked
  2486  001318  59AA               	subwfb	??_FSM& (0+255),w,b
  2487  00131A  A0D8               	btfss	status,0,c
  2488  00131C  0012               	return	
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;main.c: 710: state = F_AA;
  2492  00131E  0E00               	movlw	0
  2493  001320  6E55               	movwf	_state+1,c
  2494  001322  0E28               	movlw	40
  2495  001324  6E54               	movwf	_state,c
  2496                           
  2497                           ;main.c: 713: sensor_state = RESET_SENSOR;
  2498  001326  0E00               	movlw	0
  2499  001328  6E53               	movwf	_sensor_state+1,c
  2500  00132A  0E00               	movlw	0
  2501  00132C  6E52               	movwf	_sensor_state,c
  2502                           
  2503                           ;main.c: 716: timer_counter2 = 0;
  2504  00132E  0E00               	movlw	0
  2505  001330  6E5F               	movwf	_timer_counter2+1,c
  2506  001332  0E00               	movlw	0
  2507  001334  6E5E               	movwf	_timer_counter2,c
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;main.c: 719: LATCbits.LATC5 = 0;
  2511  001336  9A8B               	bcf	3979,5,c	;volatile
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;main.c: 720: LATCbits.LATC6 = 0;
  2515  001338  9C8B               	bcf	3979,6,c	;volatile
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;main.c: 723: if (lcd_mode == 1) {
  2519  00133A  0100               	movlb	0	; () banked
  2520  00133C  05BB               	decf	_lcd_mode& (0+255),w,b
  2521  00133E  0100               	movlb	0	; () banked
  2522  001340  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  2523  001342  A4D8               	btfss	status,2,c
  2524  001344  0012               	return	
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;main.c: 725: print_simu();
  2528  001346  EC99  F014         	call	_print_simu	;wreg free
  2529                           
  2530                           ;main.c: 732: }
  2531                           
  2532                           ;main.c: 731: break;
  2533                           
  2534                           ;main.c: 730: default:
  2535                           
  2536                           ;main.c: 726: }
  2537                           ;main.c: 728: }
  2538                           ;main.c: 729: break;
  2539  00134A  0012               	return	
  2540  00134C                     l3943:
  2541  00134C  C052  F0AA         	movff	_sensor_state,??_FSM
  2542  001350  C053  F0AB         	movff	_sensor_state+1,??_FSM+1
  2543                           
  2544                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2545                           ; Switch size 1, requested type "space"
  2546                           ; Number of cases is 1, Range of values is 0 to 0
  2547                           ; switch strategies available:
  2548                           ; Name         Instructions Cycles
  2549                           ; simple_byte            4     3 (average)
  2550                           ;	Chosen strategy is simple_byte
  2551  001354  0100               	movlb	0	; () banked
  2552  001356  51AB               	movf	(??_FSM+1)& (0+255),w,b
  2553  001358  0A00               	xorlw	0	; case 0
  2554  00135A  A4D8               	btfss	status,2,c
  2555  00135C  0012               	return	
  2556                           
  2557                           ; BSR set to: 0
  2558                           ; Switch size 1, requested type "space"
  2559                           ; Number of cases is 3, Range of values is 0 to 2
  2560                           ; switch strategies available:
  2561                           ; Name         Instructions Cycles
  2562                           ; simple_byte           10     6 (average)
  2563                           ;	Chosen strategy is simple_byte
  2564  00135E  0100               	movlb	0	; () banked
  2565  001360  51AA               	movf	??_FSM& (0+255),w,b
  2566  001362  0A00               	xorlw	0	; case 0
  2567  001364  B4D8               	btfsc	status,2,c
  2568  001366  D708               	goto	l3873
  2569  001368  0A01               	xorlw	1	; case 1
  2570  00136A  B4D8               	btfsc	status,2,c
  2571  00136C  D71E               	goto	l3879
  2572  00136E  0A03               	xorlw	3	; case 2
  2573  001370  A4D8               	btfss	status,2,c
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;main.c: 734: break;
  2577  001372  0012               	return	
  2578  001374  D791               	goto	l3915
  2579  001376                     l3945:
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;main.c: 745: servo_duties[SERVO_9V] = FORWARD_POS_1_9V;
  2583  001376  0E20               	movlw	low _FORWARD_POS_1_9V
  2584  001378  6EF6               	movwf	tblptrl,c
  2585  00137A                     	if	1	;There is more than 1 active tblptr byte
  2586  00137A  0E10               	movlw	high _FORWARD_POS_1_9V
  2587  00137C  6EF7               	movwf	tblptrh,c
  2588  00137E                     	endif
  2589  00137E                     	if	0	;There are less than 3 active tblptr bytes
  2590  00137E                     	endif
  2591  00137E  0009               	tblrd		*+
  2592  001380  CFF5 F03C          	movff	tablat,_servo_duties
  2593  001384  000A               	tblrd		*-
  2594  001386  CFF5 F03D          	movff	tablat,_servo_duties+1
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;main.c: 748: if (timer_counter2 >= SERVO_WAIT) {
  2598  00138A  0E44               	movlw	low _SERVO_WAIT
  2599  00138C  6EF6               	movwf	tblptrl,c
  2600  00138E                     	if	1	;There is more than 1 active tblptr byte
  2601  00138E  0E10               	movlw	high _SERVO_WAIT
  2602  001390  6EF7               	movwf	tblptrh,c
  2603  001392                     	endif
  2604  001392                     	if	0	;There are less than 3 active tblptr bytes
  2605  001392                     	endif
  2606  001392  0009               	tblrd		*+
  2607  001394  50F5               	movf	tablat,w,c
  2608  001396  5C5E               	subwf	_timer_counter2,w,c
  2609  001398  0009               	tblrd		*+
  2610  00139A  50F5               	movf	tablat,w,c
  2611  00139C  585F               	subwfb	_timer_counter2+1,w,c
  2612  00139E  A0D8               	btfss	status,0,c
  2613  0013A0  0012               	return	
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;main.c: 751: state = V_9V;
  2617  0013A2  0E00               	movlw	0
  2618  0013A4  6E55               	movwf	_state+1,c
  2619  0013A6  0E15               	movlw	21
  2620  0013A8  6E54               	movwf	_state,c
  2621                           
  2622                           ;main.c: 752: volt9V = 0;
  2623  0013AA  0E00               	movlw	0
  2624  0013AC  6E63               	movwf	_volt9V+1,c
  2625  0013AE  0E00               	movlw	0
  2626  0013B0  6E62               	movwf	_volt9V,c
  2627                           
  2628                           ;main.c: 753: timer_counter2 = 0;
  2629  0013B2  0E00               	movlw	0
  2630  0013B4  6E5F               	movwf	_timer_counter2+1,c
  2631  0013B6  0E00               	movlw	0
  2632  0013B8  6E5E               	movwf	_timer_counter2,c
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;main.c: 756: if (lcd_mode == 1)
  2636  0013BA  0100               	movlb	0	; () banked
  2637  0013BC  05BB               	decf	_lcd_mode& (0+255),w,b
  2638  0013BE  0100               	movlb	0	; () banked
  2639  0013C0  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  2640  0013C2  B4D8               	btfsc	status,2,c
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;main.c: 757: print_simu();
  2644  0013C4  EC99  F014         	call	_print_simu	;wreg free
  2645                           
  2646                           ;main.c: 759: servo_duties[SERVO_ELEC] = ELEC_DOWN;
  2647  0013C8  0E18               	movlw	low _ELEC_DOWN
  2648  0013CA  6EF6               	movwf	tblptrl,c
  2649  0013CC                     	if	1	;There is more than 1 active tblptr byte
  2650  0013CC  0E10               	movlw	high _ELEC_DOWN
  2651  0013CE  6EF7               	movwf	tblptrh,c
  2652  0013D0                     	endif
  2653  0013D0                     	if	0	;There are less than 3 active tblptr bytes
  2654  0013D0                     	endif
  2655  0013D0  0009               	tblrd		*+
  2656  0013D2  CFF5 F042          	movff	tablat,_servo_duties+6
  2657  0013D6  000A               	tblrd		*-
  2658  0013D8  CFF5 F043          	movff	tablat,_servo_duties+7
  2659                           
  2660                           ;main.c: 760: }
  2661                           ;main.c: 761: break;
  2662  0013DC  0012               	return	
  2663  0013DE                     l3957:
  2664                           
  2665                           ;main.c: 768: servo_duties[SERVO_ELEC] = ELEC_DOWN;
  2666  0013DE  0E18               	movlw	low _ELEC_DOWN
  2667  0013E0  6EF6               	movwf	tblptrl,c
  2668  0013E2                     	if	1	;There is more than 1 active tblptr byte
  2669  0013E2  0E10               	movlw	high _ELEC_DOWN
  2670  0013E4  6EF7               	movwf	tblptrh,c
  2671  0013E6                     	endif
  2672  0013E6                     	if	0	;There are less than 3 active tblptr bytes
  2673  0013E6                     	endif
  2674  0013E6  0009               	tblrd		*+
  2675  0013E8  CFF5 F042          	movff	tablat,_servo_duties+6
  2676  0013EC  000A               	tblrd		*-
  2677  0013EE  CFF5 F043          	movff	tablat,_servo_duties+7
  2678                           
  2679                           ;main.c: 770: if (timer_counter2 >= SERVO_WAIT) {
  2680  0013F2  0E44               	movlw	low _SERVO_WAIT
  2681  0013F4  6EF6               	movwf	tblptrl,c
  2682  0013F6                     	if	1	;There is more than 1 active tblptr byte
  2683  0013F6  0E10               	movlw	high _SERVO_WAIT
  2684  0013F8  6EF7               	movwf	tblptrh,c
  2685  0013FA                     	endif
  2686  0013FA                     	if	0	;There are less than 3 active tblptr bytes
  2687  0013FA                     	endif
  2688  0013FA  0009               	tblrd		*+
  2689  0013FC  50F5               	movf	tablat,w,c
  2690  0013FE  5C5E               	subwf	_timer_counter2,w,c
  2691  001400  0009               	tblrd		*+
  2692  001402  50F5               	movf	tablat,w,c
  2693  001404  585F               	subwfb	_timer_counter2+1,w,c
  2694  001406  A0D8               	btfss	status,0,c
  2695  001408  0012               	return	
  2696                           
  2697                           ;main.c: 776: if (volt9V >= VOLT_WAIT) {
  2698  00140A  0E46               	movlw	low _VOLT_WAIT
  2699  00140C  6EF6               	movwf	tblptrl,c
  2700  00140E                     	if	1	;There is more than 1 active tblptr byte
  2701  00140E  0E10               	movlw	high _VOLT_WAIT
  2702  001410  6EF7               	movwf	tblptrh,c
  2703  001412                     	endif
  2704  001412                     	if	0	;There are less than 3 active tblptr bytes
  2705  001412                     	endif
  2706  001412  0009               	tblrd		*+
  2707  001414  50F5               	movf	tablat,w,c
  2708  001416  5C62               	subwf	_volt9V,w,c
  2709  001418  5063               	movf	_volt9V+1,w,c
  2710  00141A  0A80               	xorlw	128
  2711  00141C  0100               	movlb	0	; () banked
  2712  00141E  6FAA               	movwf	??_FSM& (0+255),b
  2713  001420  0009               	tblrd		*+
  2714  001422  50F5               	movf	tablat,w,c
  2715  001424  0A80               	xorlw	128
  2716  001426  0100               	movlb	0	; () banked
  2717  001428  59AA               	subwfb	??_FSM& (0+255),w,b
  2718  00142A  A0D8               	btfss	status,0,c
  2719  00142C  D00E               	goto	l3967
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;main.c: 777: servo_duties[SERVO_RAMP] = RAMP_9V;
  2723  00142E  0E30               	movlw	low _RAMP_9V
  2724  001430  6EF6               	movwf	tblptrl,c
  2725  001432                     	if	1	;There is more than 1 active tblptr byte
  2726  001432  0E10               	movlw	high _RAMP_9V
  2727  001434  6EF7               	movwf	tblptrh,c
  2728  001436                     	endif
  2729  001436                     	if	0	;There are less than 3 active tblptr bytes
  2730  001436                     	endif
  2731  001436  0009               	tblrd		*+
  2732  001438  CFF5 F044          	movff	tablat,_servo_duties+8
  2733  00143C  000A               	tblrd		*-
  2734  00143E  CFF5 F045          	movff	tablat,_servo_duties+9
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;main.c: 778: count9V += 1;
  2738  001442  0100               	movlb	0	; () banked
  2739  001444  4BAD               	infsnz	_count9V& (0+255),f,b
  2740  001446  2BAE               	incf	(_count9V+1)& (0+255),f,b
  2741                           
  2742                           ;main.c: 779: } else {
  2743  001448  D00D               	goto	l3971
  2744  00144A                     l3967:
  2745                           
  2746                           ; BSR set to: 0
  2747                           ;main.c: 782: servo_duties[SERVO_RAMP] = RAMP_DEAD;
  2748  00144A  0E36               	movlw	low _RAMP_DEAD
  2749  00144C  6EF6               	movwf	tblptrl,c
  2750  00144E                     	if	1	;There is more than 1 active tblptr byte
  2751  00144E  0E10               	movlw	high _RAMP_DEAD
  2752  001450  6EF7               	movwf	tblptrh,c
  2753  001452                     	endif
  2754  001452                     	if	0	;There are less than 3 active tblptr bytes
  2755  001452                     	endif
  2756  001452  0009               	tblrd		*+
  2757  001454  CFF5 F044          	movff	tablat,_servo_duties+8
  2758  001458  000A               	tblrd		*-
  2759  00145A  CFF5 F045          	movff	tablat,_servo_duties+9
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;main.c: 783: countDead += 1;
  2763  00145E  0100               	movlb	0	; () banked
  2764  001460  4BB3               	infsnz	_countDead& (0+255),f,b
  2765  001462  2BB4               	incf	(_countDead+1)& (0+255),f,b
  2766  001464                     l3971:
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;main.c: 784: }
  2770                           ;main.c: 791: servo_duties[SERVO_ELEC] = ELEC_UP;
  2771  001464  0E1A               	movlw	low _ELEC_UP
  2772  001466  6EF6               	movwf	tblptrl,c
  2773  001468                     	if	1	;There is more than 1 active tblptr byte
  2774  001468  0E10               	movlw	high _ELEC_UP
  2775  00146A  6EF7               	movwf	tblptrh,c
  2776  00146C                     	endif
  2777  00146C                     	if	0	;There are less than 3 active tblptr bytes
  2778  00146C                     	endif
  2779  00146C  0009               	tblrd		*+
  2780  00146E  CFF5 F042          	movff	tablat,_servo_duties+6
  2781  001472  000A               	tblrd		*-
  2782  001474  CFF5 F043          	movff	tablat,_servo_duties+7
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;main.c: 792: state = VU_9V;
  2786  001478  0E00               	movlw	0
  2787  00147A  6E55               	movwf	_state+1,c
  2788  00147C  0E19               	movlw	25
  2789  00147E  6E54               	movwf	_state,c
  2790                           
  2791                           ; BSR set to: 0
  2792                           ;main.c: 793: timer_counter2 = 0;
  2793  001480  0E00               	movlw	0
  2794  001482  6E5F               	movwf	_timer_counter2+1,c
  2795  001484  0E00               	movlw	0
  2796  001486  6E5E               	movwf	_timer_counter2,c
  2797                           
  2798                           ; BSR set to: 0
  2799                           ;main.c: 796: if (lcd_mode == 1)
  2800  001488  0100               	movlb	0	; () banked
  2801  00148A  05BB               	decf	_lcd_mode& (0+255),w,b
  2802  00148C  0100               	movlb	0	; () banked
  2803  00148E  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  2804  001490  A4D8               	btfss	status,2,c
  2805  001492  0012               	return	
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;main.c: 797: print_simu();
  2809  001494  EC99  F014         	call	_print_simu	;wreg free
  2810                           
  2811                           ;main.c: 798: }
  2812                           ;main.c: 799: break;
  2813  001498  0012               	return	
  2814  00149A                     l3981:
  2815                           
  2816                           ;main.c: 802: servo_duties[SERVO_ELEC] = ELEC_UP;
  2817  00149A  0E1A               	movlw	low _ELEC_UP
  2818  00149C  6EF6               	movwf	tblptrl,c
  2819  00149E                     	if	1	;There is more than 1 active tblptr byte
  2820  00149E  0E10               	movlw	high _ELEC_UP
  2821  0014A0  6EF7               	movwf	tblptrh,c
  2822  0014A2                     	endif
  2823  0014A2                     	if	0	;There are less than 3 active tblptr bytes
  2824  0014A2                     	endif
  2825  0014A2  0009               	tblrd		*+
  2826  0014A4  CFF5 F042          	movff	tablat,_servo_duties+6
  2827  0014A8  000A               	tblrd		*-
  2828  0014AA  CFF5 F043          	movff	tablat,_servo_duties+7
  2829                           
  2830                           ;main.c: 803: if (timer_counter2 >= SERVO_WAIT) {
  2831  0014AE  0E44               	movlw	low _SERVO_WAIT
  2832  0014B0  6EF6               	movwf	tblptrl,c
  2833  0014B2                     	if	1	;There is more than 1 active tblptr byte
  2834  0014B2  0E10               	movlw	high _SERVO_WAIT
  2835  0014B4  6EF7               	movwf	tblptrh,c
  2836  0014B6                     	endif
  2837  0014B6                     	if	0	;There are less than 3 active tblptr bytes
  2838  0014B6                     	endif
  2839  0014B6  0009               	tblrd		*+
  2840  0014B8  50F5               	movf	tablat,w,c
  2841  0014BA  5C5E               	subwf	_timer_counter2,w,c
  2842  0014BC  0009               	tblrd		*+
  2843  0014BE  50F5               	movf	tablat,w,c
  2844  0014C0  585F               	subwfb	_timer_counter2+1,w,c
  2845  0014C2  A0D8               	btfss	status,0,c
  2846  0014C4  0012               	return	
  2847                           
  2848                           ;main.c: 804: timer_counter2 = 0;
  2849  0014C6  0E00               	movlw	0
  2850  0014C8  6E5F               	movwf	_timer_counter2+1,c
  2851  0014CA  0E00               	movlw	0
  2852  0014CC  6E5E               	movwf	_timer_counter2,c
  2853                           
  2854                           ;main.c: 805: state = FA_9V;
  2855  0014CE  0E00               	movlw	0
  2856  0014D0  6E55               	movwf	_state+1,c
  2857  0014D2  0E16               	movlw	22
  2858  0014D4  6E54               	movwf	_state,c
  2859                           
  2860                           ;main.c: 806: }
  2861                           ;main.c: 807: break;
  2862  0014D6  0012               	return	
  2863  0014D8                     l3987:
  2864                           
  2865                           ;main.c: 814: servo_duties[SERVO_9V] = FORWARD_POS_2_9V;
  2866  0014D8  0E28               	movlw	low _FORWARD_POS_2_9V
  2867  0014DA  6EF6               	movwf	tblptrl,c
  2868  0014DC                     	if	1	;There is more than 1 active tblptr byte
  2869  0014DC  0E10               	movlw	high _FORWARD_POS_2_9V
  2870  0014DE  6EF7               	movwf	tblptrh,c
  2871  0014E0                     	endif
  2872  0014E0                     	if	0	;There are less than 3 active tblptr bytes
  2873  0014E0                     	endif
  2874  0014E0  0009               	tblrd		*+
  2875  0014E2  CFF5 F03C          	movff	tablat,_servo_duties
  2876  0014E6  000A               	tblrd		*-
  2877  0014E8  CFF5 F03D          	movff	tablat,_servo_duties+1
  2878                           
  2879                           ;main.c: 817: if (timer_counter2 >= SERVO_WAIT) {
  2880  0014EC  0E44               	movlw	low _SERVO_WAIT
  2881  0014EE  6EF6               	movwf	tblptrl,c
  2882  0014F0                     	if	1	;There is more than 1 active tblptr byte
  2883  0014F0  0E10               	movlw	high _SERVO_WAIT
  2884  0014F2  6EF7               	movwf	tblptrh,c
  2885  0014F4                     	endif
  2886  0014F4                     	if	0	;There are less than 3 active tblptr bytes
  2887  0014F4                     	endif
  2888  0014F4  0009               	tblrd		*+
  2889  0014F6  50F5               	movf	tablat,w,c
  2890  0014F8  5C5E               	subwf	_timer_counter2,w,c
  2891  0014FA  0009               	tblrd		*+
  2892  0014FC  50F5               	movf	tablat,w,c
  2893  0014FE  585F               	subwfb	_timer_counter2+1,w,c
  2894  001500  A0D8               	btfss	status,0,c
  2895  001502  0012               	return	
  2896                           
  2897                           ;main.c: 818: state = A_9V;
  2898  001504  0E00               	movlw	0
  2899  001506  6E55               	movwf	_state+1,c
  2900  001508  0E17               	movlw	23
  2901  00150A  6E54               	movwf	_state,c
  2902                           
  2903                           ;main.c: 820: timer_counter2 = 0;
  2904  00150C  0E00               	movlw	0
  2905  00150E  6E5F               	movwf	_timer_counter2+1,c
  2906  001510  0E00               	movlw	0
  2907  001512  6E5E               	movwf	_timer_counter2,c
  2908                           
  2909                           ;main.c: 823: if (lcd_mode == 1)
  2910  001514  0100               	movlb	0	; () banked
  2911  001516  05BB               	decf	_lcd_mode& (0+255),w,b
  2912  001518  0100               	movlb	0	; () banked
  2913  00151A  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  2914  00151C  A4D8               	btfss	status,2,c
  2915  00151E  0012               	return	
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;main.c: 824: print_simu();
  2919  001520  EC99  F014         	call	_print_simu	;wreg free
  2920                           
  2921                           ;main.c: 826: }
  2922                           ;main.c: 829: break;
  2923  001524  0012               	return	
  2924  001526                     l3997:
  2925                           
  2926                           ;main.c: 835: if (timer_counter2 >= SERVO_WAIT/2) {
  2927  001526  0E44               	movlw	low _SERVO_WAIT
  2928  001528  6EF6               	movwf	tblptrl,c
  2929  00152A                     	if	1	;There is more than 1 active tblptr byte
  2930  00152A  0E10               	movlw	high _SERVO_WAIT
  2931  00152C  6EF7               	movwf	tblptrh,c
  2932  00152E                     	endif
  2933  00152E                     	if	0	;There are less than 3 active tblptr bytes
  2934  00152E                     	endif
  2935  00152E  0009               	tblrd		*+
  2936  001530  CFF5 F080          	movff	tablat,___awdiv@dividend
  2937  001534  000A               	tblrd		*-
  2938  001536  CFF5 F081          	movff	tablat,___awdiv@dividend+1
  2939  00153A  0E00               	movlw	0
  2940  00153C  0100               	movlb	0	; () banked
  2941  00153E  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  2942  001540  0E02               	movlw	2
  2943  001542  6F82               	movwf	___awdiv@divisor& (0+255),b
  2944  001544  EC7B  F016         	call	___awdiv	;wreg free
  2945  001548  0100               	movlb	0	; () banked
  2946  00154A  5180               	movf	?___awdiv& (0+255),w,b
  2947  00154C  5C5E               	subwf	_timer_counter2,w,c
  2948  00154E  0100               	movlb	0	; () banked
  2949  001550  5181               	movf	(?___awdiv+1)& (0+255),w,b
  2950  001552  585F               	subwfb	_timer_counter2+1,w,c
  2951  001554  A0D8               	btfss	status,0,c
  2952  001556  0012               	return	
  2953                           
  2954                           ; BSR set to: 0
  2955                           ;main.c: 836: state = R_9V;
  2956  001558  0E00               	movlw	0
  2957  00155A  6E55               	movwf	_state+1,c
  2958  00155C  0E18               	movlw	24
  2959  00155E  6E54               	movwf	_state,c
  2960                           
  2961                           ;main.c: 837: timer_counter2 = 0;
  2962  001560  0E00               	movlw	0
  2963  001562  6E5F               	movwf	_timer_counter2+1,c
  2964  001564  0E00               	movlw	0
  2965  001566  6E5E               	movwf	_timer_counter2,c
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;main.c: 840: if (lcd_mode == 1)
  2969  001568  0100               	movlb	0	; () banked
  2970  00156A  05BB               	decf	_lcd_mode& (0+255),w,b
  2971  00156C  0100               	movlb	0	; () banked
  2972  00156E  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  2973  001570  B4D8               	btfsc	status,2,c
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;main.c: 841: print_simu();
  2977  001572  EC99  F014         	call	_print_simu	;wreg free
  2978                           
  2979                           ;main.c: 844: servo_duties[SERVO_9V] = RESET_POS_9V;
  2980  001576  0E3A               	movlw	low _RESET_POS_9V
  2981  001578  6EF6               	movwf	tblptrl,c
  2982  00157A                     	if	1	;There is more than 1 active tblptr byte
  2983  00157A  0E10               	movlw	high _RESET_POS_9V
  2984  00157C  6EF7               	movwf	tblptrh,c
  2985  00157E                     	endif
  2986  00157E                     	if	0	;There are less than 3 active tblptr bytes
  2987  00157E                     	endif
  2988  00157E  0009               	tblrd		*+
  2989  001580  CFF5 F03C          	movff	tablat,_servo_duties
  2990  001584  000A               	tblrd		*-
  2991  001586  CFF5 F03D          	movff	tablat,_servo_duties+1
  2992                           
  2993                           ;main.c: 845: }
  2994                           ;main.c: 846: break;
  2995  00158A  0012               	return	
  2996  00158C                     l4007:
  2997                           
  2998                           ;main.c: 852: servo_duties[SERVO_9V] = RESET_POS_9V;
  2999  00158C  0E3A               	movlw	low _RESET_POS_9V
  3000  00158E  6EF6               	movwf	tblptrl,c
  3001  001590                     	if	1	;There is more than 1 active tblptr byte
  3002  001590  0E10               	movlw	high _RESET_POS_9V
  3003  001592  6EF7               	movwf	tblptrh,c
  3004  001594                     	endif
  3005  001594                     	if	0	;There are less than 3 active tblptr bytes
  3006  001594                     	endif
  3007  001594  0009               	tblrd		*+
  3008  001596  CFF5 F03C          	movff	tablat,_servo_duties
  3009  00159A  000A               	tblrd		*-
  3010  00159C  CFF5 F03D          	movff	tablat,_servo_duties+1
  3011                           
  3012                           ;main.c: 853: servo_duties[SERVO_C] = RESET_POS_C;
  3013  0015A0  0E3E               	movlw	low _RESET_POS_C
  3014  0015A2  6EF6               	movwf	tblptrl,c
  3015  0015A4                     	if	1	;There is more than 1 active tblptr byte
  3016  0015A4  0E10               	movlw	high _RESET_POS_C
  3017  0015A6  6EF7               	movwf	tblptrh,c
  3018  0015A8                     	endif
  3019  0015A8                     	if	0	;There are less than 3 active tblptr bytes
  3020  0015A8                     	endif
  3021  0015A8  0009               	tblrd		*+
  3022  0015AA  CFF5 F03E          	movff	tablat,_servo_duties+2
  3023  0015AE  000A               	tblrd		*-
  3024  0015B0  CFF5 F03F          	movff	tablat,_servo_duties+3
  3025                           
  3026                           ;main.c: 854: servo_duties[SERVO_AA] = RESET_POS_AA;
  3027  0015B4  0E3C               	movlw	low _RESET_POS_AA
  3028  0015B6  6EF6               	movwf	tblptrl,c
  3029  0015B8                     	if	1	;There is more than 1 active tblptr byte
  3030  0015B8  0E10               	movlw	high _RESET_POS_AA
  3031  0015BA  6EF7               	movwf	tblptrh,c
  3032  0015BC                     	endif
  3033  0015BC                     	if	0	;There are less than 3 active tblptr bytes
  3034  0015BC                     	endif
  3035  0015BC  0009               	tblrd		*+
  3036  0015BE  CFF5 F040          	movff	tablat,_servo_duties+4
  3037  0015C2  000A               	tblrd		*-
  3038  0015C4  CFF5 F041          	movff	tablat,_servo_duties+5
  3039                           
  3040                           ;main.c: 856: if (timer_counter2 >= SERVO_WAIT) {
  3041  0015C8  0E44               	movlw	low _SERVO_WAIT
  3042  0015CA  6EF6               	movwf	tblptrl,c
  3043  0015CC                     	if	1	;There is more than 1 active tblptr byte
  3044  0015CC  0E10               	movlw	high _SERVO_WAIT
  3045  0015CE  6EF7               	movwf	tblptrh,c
  3046  0015D0                     	endif
  3047  0015D0                     	if	0	;There are less than 3 active tblptr bytes
  3048  0015D0                     	endif
  3049  0015D0  0009               	tblrd		*+
  3050  0015D2  50F5               	movf	tablat,w,c
  3051  0015D4  5C5E               	subwf	_timer_counter2,w,c
  3052  0015D6  0009               	tblrd		*+
  3053  0015D8  50F5               	movf	tablat,w,c
  3054  0015DA  585F               	subwfb	_timer_counter2+1,w,c
  3055  0015DC  A0D8               	btfss	status,0,c
  3056  0015DE  0012               	return	
  3057                           
  3058                           ;main.c: 857: if (count9V + countC + countAA + countDead >= MAX_COUNT) {
  3059  0015E0  0E2E               	movlw	low _MAX_COUNT
  3060  0015E2  6EF6               	movwf	tblptrl,c
  3061  0015E4                     	if	1	;There is more than 1 active tblptr byte
  3062  0015E4  0E10               	movlw	high _MAX_COUNT
  3063  0015E6  6EF7               	movwf	tblptrh,c
  3064  0015E8                     	endif
  3065  0015E8                     	if	0	;There are less than 3 active tblptr bytes
  3066  0015E8                     	endif
  3067  0015E8  0100               	movlb	0	; () banked
  3068  0015EA  51B1               	movf	_countC& (0+255),w,b
  3069  0015EC  0100               	movlb	0	; () banked
  3070  0015EE  25AD               	addwf	_count9V& (0+255),w,b
  3071  0015F0  0100               	movlb	0	; () banked
  3072  0015F2  6FAA               	movwf	??_FSM& (0+255),b
  3073  0015F4  0100               	movlb	0	; () banked
  3074  0015F6  51B2               	movf	(_countC+1)& (0+255),w,b
  3075  0015F8  0100               	movlb	0	; () banked
  3076  0015FA  21AE               	addwfc	(_count9V+1)& (0+255),w,b
  3077  0015FC  0100               	movlb	0	; () banked
  3078  0015FE  6FAB               	movwf	(??_FSM+1)& (0+255),b
  3079  001600  0100               	movlb	0	; () banked
  3080  001602  51AF               	movf	_countAA& (0+255),w,b
  3081  001604  0100               	movlb	0	; () banked
  3082  001606  27AA               	addwf	??_FSM& (0+255),f,b
  3083  001608  0100               	movlb	0	; () banked
  3084  00160A  51B0               	movf	(_countAA+1)& (0+255),w,b
  3085  00160C  0100               	movlb	0	; () banked
  3086  00160E  23AB               	addwfc	(??_FSM+1)& (0+255),f,b
  3087  001610  0100               	movlb	0	; () banked
  3088  001612  51B3               	movf	_countDead& (0+255),w,b
  3089  001614  0100               	movlb	0	; () banked
  3090  001616  27AA               	addwf	??_FSM& (0+255),f,b
  3091  001618  0100               	movlb	0	; () banked
  3092  00161A  51B4               	movf	(_countDead+1)& (0+255),w,b
  3093  00161C  0100               	movlb	0	; () banked
  3094  00161E  23AB               	addwfc	(??_FSM+1)& (0+255),f,b
  3095  001620  0009               	tblrd		*+
  3096  001622  50F5               	movf	tablat,w,c
  3097  001624  0100               	movlb	0	; () banked
  3098  001626  5DAA               	subwf	??_FSM& (0+255),w,b
  3099  001628  0100               	movlb	0	; () banked
  3100  00162A  51AB               	movf	(??_FSM+1)& (0+255),w,b
  3101  00162C  0A80               	xorlw	128
  3102  00162E  0100               	movlb	0	; () banked
  3103  001630  6FAC               	movwf	(??_FSM+2)& (0+255),b
  3104  001632  0009               	tblrd		*+
  3105  001634  50F5               	movf	tablat,w,c
  3106  001636  0A80               	xorlw	128
  3107  001638  0100               	movlb	0	; () banked
  3108  00163A  59AC               	subwfb	(??_FSM+2)& (0+255),w,b
  3109  00163C  A0D8               	btfss	status,0,c
  3110  00163E  D007               	goto	l4017
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;main.c: 858: state = END;
  3114  001640  0E00               	movlw	0
  3115  001642  6E55               	movwf	_state+1,c
  3116  001644  0E63               	movlw	99
  3117  001646  6E54               	movwf	_state,c
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;main.c: 859: print_batteries();
  3121  001648  EC75  F011         	call	_print_batteries	;wreg free
  3122                           
  3123                           ;main.c: 860: } else {
  3124  00164C  D00B               	goto	l4023
  3125  00164E                     l4017:
  3126                           
  3127                           ;main.c: 861: state = WAIT;
  3128  00164E  0E00               	movlw	0
  3129  001650  6E55               	movwf	_state+1,c
  3130  001652  0E01               	movlw	1
  3131  001654  6E54               	movwf	_state,c
  3132                           
  3133                           ;main.c: 864: if (lcd_mode == 1) {
  3134  001656  0100               	movlb	0	; () banked
  3135  001658  05BB               	decf	_lcd_mode& (0+255),w,b
  3136  00165A  0100               	movlb	0	; () banked
  3137  00165C  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  3138  00165E  B4D8               	btfsc	status,2,c
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;main.c: 866: print_simu();
  3142  001660  EC99  F014         	call	_print_simu	;wreg free
  3143  001664                     l4023:
  3144                           
  3145                           ;main.c: 867: }
  3146                           ;main.c: 868: }
  3147                           ;main.c: 869: timer_counter2 = 0;
  3148  001664  0E00               	movlw	0
  3149  001666  6E5F               	movwf	_timer_counter2+1,c
  3150  001668  0E00               	movlw	0
  3151  00166A  6E5E               	movwf	_timer_counter2,c
  3152                           
  3153                           ;main.c: 872: }
  3154                           ;main.c: 873: break;
  3155  00166C  0012               	return	
  3156  00166E                     l4025:
  3157                           
  3158                           ;main.c: 894: servo_duties[SERVO_9V] = RESET_POS_9V;
  3159  00166E  0E3A               	movlw	low _RESET_POS_9V
  3160  001670  6EF6               	movwf	tblptrl,c
  3161  001672                     	if	1	;There is more than 1 active tblptr byte
  3162  001672  0E10               	movlw	high _RESET_POS_9V
  3163  001674  6EF7               	movwf	tblptrh,c
  3164  001676                     	endif
  3165  001676                     	if	0	;There are less than 3 active tblptr bytes
  3166  001676                     	endif
  3167  001676  0009               	tblrd		*+
  3168  001678  CFF5 F03C          	movff	tablat,_servo_duties
  3169  00167C  000A               	tblrd		*-
  3170  00167E  CFF5 F03D          	movff	tablat,_servo_duties+1
  3171                           
  3172                           ;main.c: 895: servo_duties[SERVO_C] = FORWARD_POS_1_C;
  3173  001682  0E24               	movlw	low _FORWARD_POS_1_C
  3174  001684  6EF6               	movwf	tblptrl,c
  3175  001686                     	if	1	;There is more than 1 active tblptr byte
  3176  001686  0E10               	movlw	high _FORWARD_POS_1_C
  3177  001688  6EF7               	movwf	tblptrh,c
  3178  00168A                     	endif
  3179  00168A                     	if	0	;There are less than 3 active tblptr bytes
  3180  00168A                     	endif
  3181  00168A  0009               	tblrd		*+
  3182  00168C  CFF5 F03E          	movff	tablat,_servo_duties+2
  3183  001690  000A               	tblrd		*-
  3184  001692  CFF5 F03F          	movff	tablat,_servo_duties+3
  3185                           
  3186                           ;main.c: 896: if (timer_counter2 >= SERVO_WAIT) {
  3187  001696  0E44               	movlw	low _SERVO_WAIT
  3188  001698  6EF6               	movwf	tblptrl,c
  3189  00169A                     	if	1	;There is more than 1 active tblptr byte
  3190  00169A  0E10               	movlw	high _SERVO_WAIT
  3191  00169C  6EF7               	movwf	tblptrh,c
  3192  00169E                     	endif
  3193  00169E                     	if	0	;There are less than 3 active tblptr bytes
  3194  00169E                     	endif
  3195  00169E  0009               	tblrd		*+
  3196  0016A0  50F5               	movf	tablat,w,c
  3197  0016A2  5C5E               	subwf	_timer_counter2,w,c
  3198  0016A4  0009               	tblrd		*+
  3199  0016A6  50F5               	movf	tablat,w,c
  3200  0016A8  585F               	subwfb	_timer_counter2+1,w,c
  3201  0016AA  A0D8               	btfss	status,0,c
  3202  0016AC  0012               	return	
  3203                           
  3204                           ;main.c: 898: state = V_C;
  3205  0016AE  0E00               	movlw	0
  3206  0016B0  6E55               	movwf	_state+1,c
  3207  0016B2  0E1F               	movlw	31
  3208  0016B4  6E54               	movwf	_state,c
  3209                           
  3210                           ;main.c: 899: timer_counter2 = 0;
  3211  0016B6  0E00               	movlw	0
  3212  0016B8  6E5F               	movwf	_timer_counter2+1,c
  3213  0016BA  0E00               	movlw	0
  3214  0016BC  6E5E               	movwf	_timer_counter2,c
  3215                           
  3216                           ;main.c: 902: if (lcd_mode == 1)
  3217  0016BE  0100               	movlb	0	; () banked
  3218  0016C0  05BB               	decf	_lcd_mode& (0+255),w,b
  3219  0016C2  0100               	movlb	0	; () banked
  3220  0016C4  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  3221  0016C6  B4D8               	btfsc	status,2,c
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;main.c: 903: print_simu();
  3225  0016C8  EC99  F014         	call	_print_simu	;wreg free
  3226                           
  3227                           ;main.c: 905: servo_duties[SERVO_ELEC] = ELEC_DOWN;
  3228  0016CC  0E18               	movlw	low _ELEC_DOWN
  3229  0016CE  6EF6               	movwf	tblptrl,c
  3230  0016D0                     	if	1	;There is more than 1 active tblptr byte
  3231  0016D0  0E10               	movlw	high _ELEC_DOWN
  3232  0016D2  6EF7               	movwf	tblptrh,c
  3233  0016D4                     	endif
  3234  0016D4                     	if	0	;There are less than 3 active tblptr bytes
  3235  0016D4                     	endif
  3236  0016D4  0009               	tblrd		*+
  3237  0016D6  CFF5 F042          	movff	tablat,_servo_duties+6
  3238  0016DA  000A               	tblrd		*-
  3239  0016DC  CFF5 F043          	movff	tablat,_servo_duties+7
  3240                           
  3241                           ;main.c: 906: }
  3242                           ;main.c: 907: break;
  3243  0016E0  0012               	return	
  3244  0016E2                     l4037:
  3245                           
  3246                           ;main.c: 914: servo_duties[SERVO_ELEC] = ELEC_DOWN;
  3247  0016E2  0E18               	movlw	low _ELEC_DOWN
  3248  0016E4  6EF6               	movwf	tblptrl,c
  3249  0016E6                     	if	1	;There is more than 1 active tblptr byte
  3250  0016E6  0E10               	movlw	high _ELEC_DOWN
  3251  0016E8  6EF7               	movwf	tblptrh,c
  3252  0016EA                     	endif
  3253  0016EA                     	if	0	;There are less than 3 active tblptr bytes
  3254  0016EA                     	endif
  3255  0016EA  0009               	tblrd		*+
  3256  0016EC  CFF5 F042          	movff	tablat,_servo_duties+6
  3257  0016F0  000A               	tblrd		*-
  3258  0016F2  CFF5 F043          	movff	tablat,_servo_duties+7
  3259                           
  3260                           ;main.c: 916: if (timer_counter2 >= SERVO_WAIT) {
  3261  0016F6  0E44               	movlw	low _SERVO_WAIT
  3262  0016F8  6EF6               	movwf	tblptrl,c
  3263  0016FA                     	if	1	;There is more than 1 active tblptr byte
  3264  0016FA  0E10               	movlw	high _SERVO_WAIT
  3265  0016FC  6EF7               	movwf	tblptrh,c
  3266  0016FE                     	endif
  3267  0016FE                     	if	0	;There are less than 3 active tblptr bytes
  3268  0016FE                     	endif
  3269  0016FE  0009               	tblrd		*+
  3270  001700  50F5               	movf	tablat,w,c
  3271  001702  5C5E               	subwf	_timer_counter2,w,c
  3272  001704  0009               	tblrd		*+
  3273  001706  50F5               	movf	tablat,w,c
  3274  001708  585F               	subwfb	_timer_counter2+1,w,c
  3275  00170A  A0D8               	btfss	status,0,c
  3276  00170C  0012               	return	
  3277                           
  3278                           ;main.c: 923: if (voltC >= VOLT_WAIT) {
  3279  00170E  0E46               	movlw	low _VOLT_WAIT
  3280  001710  6EF6               	movwf	tblptrl,c
  3281  001712                     	if	1	;There is more than 1 active tblptr byte
  3282  001712  0E10               	movlw	high _VOLT_WAIT
  3283  001714  6EF7               	movwf	tblptrh,c
  3284  001716                     	endif
  3285  001716                     	if	0	;There are less than 3 active tblptr bytes
  3286  001716                     	endif
  3287  001716  0009               	tblrd		*+
  3288  001718  50F5               	movf	tablat,w,c
  3289  00171A  5C66               	subwf	_voltC,w,c
  3290  00171C  5067               	movf	_voltC+1,w,c
  3291  00171E  0A80               	xorlw	128
  3292  001720  0100               	movlb	0	; () banked
  3293  001722  6FAA               	movwf	??_FSM& (0+255),b
  3294  001724  0009               	tblrd		*+
  3295  001726  50F5               	movf	tablat,w,c
  3296  001728  0A80               	xorlw	128
  3297  00172A  0100               	movlb	0	; () banked
  3298  00172C  59AA               	subwfb	??_FSM& (0+255),w,b
  3299  00172E  A0D8               	btfss	status,0,c
  3300  001730  D00E               	goto	l4047
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;main.c: 924: servo_duties[SERVO_RAMP] = RAMP_C;
  3304  001732  0E34               	movlw	low _RAMP_C
  3305  001734  6EF6               	movwf	tblptrl,c
  3306  001736                     	if	1	;There is more than 1 active tblptr byte
  3307  001736  0E10               	movlw	high _RAMP_C
  3308  001738  6EF7               	movwf	tblptrh,c
  3309  00173A                     	endif
  3310  00173A                     	if	0	;There are less than 3 active tblptr bytes
  3311  00173A                     	endif
  3312  00173A  0009               	tblrd		*+
  3313  00173C  CFF5 F044          	movff	tablat,_servo_duties+8
  3314  001740  000A               	tblrd		*-
  3315  001742  CFF5 F045          	movff	tablat,_servo_duties+9
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;main.c: 925: countC += 1;
  3319  001746  0100               	movlb	0	; () banked
  3320  001748  4BB1               	infsnz	_countC& (0+255),f,b
  3321  00174A  2BB2               	incf	(_countC+1)& (0+255),f,b
  3322                           
  3323                           ;main.c: 926: } else {
  3324  00174C  D00D               	goto	l4051
  3325  00174E                     l4047:
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;main.c: 929: servo_duties[SERVO_RAMP] = RAMP_DEAD;
  3329  00174E  0E36               	movlw	low _RAMP_DEAD
  3330  001750  6EF6               	movwf	tblptrl,c
  3331  001752                     	if	1	;There is more than 1 active tblptr byte
  3332  001752  0E10               	movlw	high _RAMP_DEAD
  3333  001754  6EF7               	movwf	tblptrh,c
  3334  001756                     	endif
  3335  001756                     	if	0	;There are less than 3 active tblptr bytes
  3336  001756                     	endif
  3337  001756  0009               	tblrd		*+
  3338  001758  CFF5 F044          	movff	tablat,_servo_duties+8
  3339  00175C  000A               	tblrd		*-
  3340  00175E  CFF5 F045          	movff	tablat,_servo_duties+9
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;main.c: 930: countDead += 1;
  3344  001762  0100               	movlb	0	; () banked
  3345  001764  4BB3               	infsnz	_countDead& (0+255),f,b
  3346  001766  2BB4               	incf	(_countDead+1)& (0+255),f,b
  3347  001768                     l4051:
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;main.c: 931: }
  3351                           ;main.c: 936: servo_duties[SERVO_ELEC] = ELEC_UP;
  3352  001768  0E1A               	movlw	low _ELEC_UP
  3353  00176A  6EF6               	movwf	tblptrl,c
  3354  00176C                     	if	1	;There is more than 1 active tblptr byte
  3355  00176C  0E10               	movlw	high _ELEC_UP
  3356  00176E  6EF7               	movwf	tblptrh,c
  3357  001770                     	endif
  3358  001770                     	if	0	;There are less than 3 active tblptr bytes
  3359  001770                     	endif
  3360  001770  0009               	tblrd		*+
  3361  001772  CFF5 F042          	movff	tablat,_servo_duties+6
  3362  001776  000A               	tblrd		*-
  3363  001778  CFF5 F043          	movff	tablat,_servo_duties+7
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;main.c: 937: state = VU_C;
  3367  00177C  0E00               	movlw	0
  3368  00177E  6E55               	movwf	_state+1,c
  3369  001780  0E23               	movlw	35
  3370  001782  6E54               	movwf	_state,c
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;main.c: 938: timer_counter2 = 0;
  3374  001784  0E00               	movlw	0
  3375  001786  6E5F               	movwf	_timer_counter2+1,c
  3376  001788  0E00               	movlw	0
  3377  00178A  6E5E               	movwf	_timer_counter2,c
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;main.c: 941: if (lcd_mode == 1)
  3381  00178C  0100               	movlb	0	; () banked
  3382  00178E  05BB               	decf	_lcd_mode& (0+255),w,b
  3383  001790  0100               	movlb	0	; () banked
  3384  001792  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  3385  001794  A4D8               	btfss	status,2,c
  3386  001796  0012               	return	
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;main.c: 942: print_simu();
  3390  001798  EC99  F014         	call	_print_simu	;wreg free
  3391                           
  3392                           ;main.c: 945: }
  3393                           ;main.c: 947: break;
  3394  00179C  0012               	return	
  3395  00179E                     l4061:
  3396                           
  3397                           ;main.c: 950: servo_duties[SERVO_ELEC] = ELEC_UP;
  3398  00179E  0E1A               	movlw	low _ELEC_UP
  3399  0017A0  6EF6               	movwf	tblptrl,c
  3400  0017A2                     	if	1	;There is more than 1 active tblptr byte
  3401  0017A2  0E10               	movlw	high _ELEC_UP
  3402  0017A4  6EF7               	movwf	tblptrh,c
  3403  0017A6                     	endif
  3404  0017A6                     	if	0	;There are less than 3 active tblptr bytes
  3405  0017A6                     	endif
  3406  0017A6  0009               	tblrd		*+
  3407  0017A8  CFF5 F042          	movff	tablat,_servo_duties+6
  3408  0017AC  000A               	tblrd		*-
  3409  0017AE  CFF5 F043          	movff	tablat,_servo_duties+7
  3410                           
  3411                           ;main.c: 951: if (timer_counter2 >= SERVO_WAIT) {
  3412  0017B2  0E44               	movlw	low _SERVO_WAIT
  3413  0017B4  6EF6               	movwf	tblptrl,c
  3414  0017B6                     	if	1	;There is more than 1 active tblptr byte
  3415  0017B6  0E10               	movlw	high _SERVO_WAIT
  3416  0017B8  6EF7               	movwf	tblptrh,c
  3417  0017BA                     	endif
  3418  0017BA                     	if	0	;There are less than 3 active tblptr bytes
  3419  0017BA                     	endif
  3420  0017BA  0009               	tblrd		*+
  3421  0017BC  50F5               	movf	tablat,w,c
  3422  0017BE  5C5E               	subwf	_timer_counter2,w,c
  3423  0017C0  0009               	tblrd		*+
  3424  0017C2  50F5               	movf	tablat,w,c
  3425  0017C4  585F               	subwfb	_timer_counter2+1,w,c
  3426  0017C6  A0D8               	btfss	status,0,c
  3427  0017C8  0012               	return	
  3428                           
  3429                           ;main.c: 952: timer_counter2 = 0;
  3430  0017CA  0E00               	movlw	0
  3431  0017CC  6E5F               	movwf	_timer_counter2+1,c
  3432  0017CE  0E00               	movlw	0
  3433  0017D0  6E5E               	movwf	_timer_counter2,c
  3434                           
  3435                           ;main.c: 953: state = FA_C;
  3436  0017D2  0E00               	movlw	0
  3437  0017D4  6E55               	movwf	_state+1,c
  3438  0017D6  0E20               	movlw	32
  3439  0017D8  6E54               	movwf	_state,c
  3440                           
  3441                           ;main.c: 954: }
  3442                           ;main.c: 955: break;
  3443  0017DA  0012               	return	
  3444  0017DC                     l4067:
  3445                           
  3446                           ;main.c: 972: servo_duties[SERVO_C] = FORWARD_POS_2_C;
  3447  0017DC  0E2C               	movlw	low _FORWARD_POS_2_C
  3448  0017DE  6EF6               	movwf	tblptrl,c
  3449  0017E0                     	if	1	;There is more than 1 active tblptr byte
  3450  0017E0  0E10               	movlw	high _FORWARD_POS_2_C
  3451  0017E2  6EF7               	movwf	tblptrh,c
  3452  0017E4                     	endif
  3453  0017E4                     	if	0	;There are less than 3 active tblptr bytes
  3454  0017E4                     	endif
  3455  0017E4  0009               	tblrd		*+
  3456  0017E6  CFF5 F03E          	movff	tablat,_servo_duties+2
  3457  0017EA  000A               	tblrd		*-
  3458  0017EC  CFF5 F03F          	movff	tablat,_servo_duties+3
  3459                           
  3460                           ;main.c: 975: if (timer_counter2 >= SERVO_WAIT) {
  3461  0017F0  0E44               	movlw	low _SERVO_WAIT
  3462  0017F2  6EF6               	movwf	tblptrl,c
  3463  0017F4                     	if	1	;There is more than 1 active tblptr byte
  3464  0017F4  0E10               	movlw	high _SERVO_WAIT
  3465  0017F6  6EF7               	movwf	tblptrh,c
  3466  0017F8                     	endif
  3467  0017F8                     	if	0	;There are less than 3 active tblptr bytes
  3468  0017F8                     	endif
  3469  0017F8  0009               	tblrd		*+
  3470  0017FA  50F5               	movf	tablat,w,c
  3471  0017FC  5C5E               	subwf	_timer_counter2,w,c
  3472  0017FE  0009               	tblrd		*+
  3473  001800  50F5               	movf	tablat,w,c
  3474  001802  585F               	subwfb	_timer_counter2+1,w,c
  3475  001804  A0D8               	btfss	status,0,c
  3476  001806  0012               	return	
  3477                           
  3478                           ;main.c: 976: state = A_C;
  3479  001808  0E00               	movlw	0
  3480  00180A  6E55               	movwf	_state+1,c
  3481  00180C  0E21               	movlw	33
  3482  00180E  6E54               	movwf	_state,c
  3483                           
  3484                           ;main.c: 978: timer_counter2 = 0;
  3485  001810  0E00               	movlw	0
  3486  001812  6E5F               	movwf	_timer_counter2+1,c
  3487  001814  0E00               	movlw	0
  3488  001816  6E5E               	movwf	_timer_counter2,c
  3489                           
  3490                           ;main.c: 981: if (lcd_mode == 1)
  3491  001818  0100               	movlb	0	; () banked
  3492  00181A  05BB               	decf	_lcd_mode& (0+255),w,b
  3493  00181C  0100               	movlb	0	; () banked
  3494  00181E  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  3495  001820  A4D8               	btfss	status,2,c
  3496  001822  0012               	return	
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;main.c: 982: print_simu();
  3500  001824  EC99  F014         	call	_print_simu	;wreg free
  3501                           
  3502                           ;main.c: 983: }
  3503                           ;main.c: 984: break;
  3504  001828  0012               	return	
  3505  00182A                     l4077:
  3506                           
  3507                           ;main.c: 987: if (timer_counter2 >= SERVO_WAIT/2 ) {
  3508  00182A  0E44               	movlw	low _SERVO_WAIT
  3509  00182C  6EF6               	movwf	tblptrl,c
  3510  00182E                     	if	1	;There is more than 1 active tblptr byte
  3511  00182E  0E10               	movlw	high _SERVO_WAIT
  3512  001830  6EF7               	movwf	tblptrh,c
  3513  001832                     	endif
  3514  001832                     	if	0	;There are less than 3 active tblptr bytes
  3515  001832                     	endif
  3516  001832  0009               	tblrd		*+
  3517  001834  CFF5 F080          	movff	tablat,___awdiv@dividend
  3518  001838  000A               	tblrd		*-
  3519  00183A  CFF5 F081          	movff	tablat,___awdiv@dividend+1
  3520  00183E  0E00               	movlw	0
  3521  001840  0100               	movlb	0	; () banked
  3522  001842  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  3523  001844  0E02               	movlw	2
  3524  001846  6F82               	movwf	___awdiv@divisor& (0+255),b
  3525  001848  EC7B  F016         	call	___awdiv	;wreg free
  3526  00184C  0100               	movlb	0	; () banked
  3527  00184E  5180               	movf	?___awdiv& (0+255),w,b
  3528  001850  5C5E               	subwf	_timer_counter2,w,c
  3529  001852  0100               	movlb	0	; () banked
  3530  001854  5181               	movf	(?___awdiv+1)& (0+255),w,b
  3531  001856  585F               	subwfb	_timer_counter2+1,w,c
  3532  001858  A0D8               	btfss	status,0,c
  3533  00185A  0012               	return	
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;main.c: 988: state = R_C;
  3537  00185C  0E00               	movlw	0
  3538  00185E  6E55               	movwf	_state+1,c
  3539  001860  0E22               	movlw	34
  3540  001862  6E54               	movwf	_state,c
  3541                           
  3542                           ;main.c: 989: timer_counter2 = 0;
  3543  001864  0E00               	movlw	0
  3544  001866  6E5F               	movwf	_timer_counter2+1,c
  3545  001868  0E00               	movlw	0
  3546  00186A  6E5E               	movwf	_timer_counter2,c
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;main.c: 993: if (lcd_mode == 1)
  3550  00186C  0100               	movlb	0	; () banked
  3551  00186E  05BB               	decf	_lcd_mode& (0+255),w,b
  3552  001870  0100               	movlb	0	; () banked
  3553  001872  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  3554  001874  B4D8               	btfsc	status,2,c
  3555                           
  3556                           ; BSR set to: 0
  3557                           ;main.c: 994: print_simu();
  3558  001876  EC99  F014         	call	_print_simu	;wreg free
  3559                           
  3560                           ;main.c: 997: servo_duties[SERVO_C] = RESET_POS_C;
  3561  00187A  0E3E               	movlw	low _RESET_POS_C
  3562  00187C  6EF6               	movwf	tblptrl,c
  3563  00187E                     	if	1	;There is more than 1 active tblptr byte
  3564  00187E  0E10               	movlw	high _RESET_POS_C
  3565  001880  6EF7               	movwf	tblptrh,c
  3566  001882                     	endif
  3567  001882                     	if	0	;There are less than 3 active tblptr bytes
  3568  001882                     	endif
  3569  001882  0009               	tblrd		*+
  3570  001884  CFF5 F03E          	movff	tablat,_servo_duties+2
  3571  001888  000A               	tblrd		*-
  3572  00188A  CFF5 F03F          	movff	tablat,_servo_duties+3
  3573                           
  3574                           ;main.c: 998: }
  3575                           ;main.c: 999: break;
  3576  00188E  0012               	return	
  3577  001890                     l4087:
  3578                           
  3579                           ;main.c: 1009: servo_duties[SERVO_9V] = RESET_POS_9V;
  3580  001890  0E3A               	movlw	low _RESET_POS_9V
  3581  001892  6EF6               	movwf	tblptrl,c
  3582  001894                     	if	1	;There is more than 1 active tblptr byte
  3583  001894  0E10               	movlw	high _RESET_POS_9V
  3584  001896  6EF7               	movwf	tblptrh,c
  3585  001898                     	endif
  3586  001898                     	if	0	;There are less than 3 active tblptr bytes
  3587  001898                     	endif
  3588  001898  0009               	tblrd		*+
  3589  00189A  CFF5 F03C          	movff	tablat,_servo_duties
  3590  00189E  000A               	tblrd		*-
  3591  0018A0  CFF5 F03D          	movff	tablat,_servo_duties+1
  3592                           
  3593                           ;main.c: 1010: servo_duties[SERVO_C] = RESET_POS_C;
  3594  0018A4  0E3E               	movlw	low _RESET_POS_C
  3595  0018A6  6EF6               	movwf	tblptrl,c
  3596  0018A8                     	if	1	;There is more than 1 active tblptr byte
  3597  0018A8  0E10               	movlw	high _RESET_POS_C
  3598  0018AA  6EF7               	movwf	tblptrh,c
  3599  0018AC                     	endif
  3600  0018AC                     	if	0	;There are less than 3 active tblptr bytes
  3601  0018AC                     	endif
  3602  0018AC  0009               	tblrd		*+
  3603  0018AE  CFF5 F03E          	movff	tablat,_servo_duties+2
  3604  0018B2  000A               	tblrd		*-
  3605  0018B4  CFF5 F03F          	movff	tablat,_servo_duties+3
  3606                           
  3607                           ;main.c: 1011: servo_duties[SERVO_AA] = RESET_POS_AA;
  3608  0018B8  0E3C               	movlw	low _RESET_POS_AA
  3609  0018BA  6EF6               	movwf	tblptrl,c
  3610  0018BC                     	if	1	;There is more than 1 active tblptr byte
  3611  0018BC  0E10               	movlw	high _RESET_POS_AA
  3612  0018BE  6EF7               	movwf	tblptrh,c
  3613  0018C0                     	endif
  3614  0018C0                     	if	0	;There are less than 3 active tblptr bytes
  3615  0018C0                     	endif
  3616  0018C0  0009               	tblrd		*+
  3617  0018C2  CFF5 F040          	movff	tablat,_servo_duties+4
  3618  0018C6  000A               	tblrd		*-
  3619  0018C8  CFF5 F041          	movff	tablat,_servo_duties+5
  3620                           
  3621                           ;main.c: 1013: if (timer_counter2 >= SERVO_WAIT ) {
  3622  0018CC  0E44               	movlw	low _SERVO_WAIT
  3623  0018CE  6EF6               	movwf	tblptrl,c
  3624  0018D0                     	if	1	;There is more than 1 active tblptr byte
  3625  0018D0  0E10               	movlw	high _SERVO_WAIT
  3626  0018D2  6EF7               	movwf	tblptrh,c
  3627  0018D4                     	endif
  3628  0018D4                     	if	0	;There are less than 3 active tblptr bytes
  3629  0018D4                     	endif
  3630  0018D4  0009               	tblrd		*+
  3631  0018D6  50F5               	movf	tablat,w,c
  3632  0018D8  5C5E               	subwf	_timer_counter2,w,c
  3633  0018DA  0009               	tblrd		*+
  3634  0018DC  50F5               	movf	tablat,w,c
  3635  0018DE  585F               	subwfb	_timer_counter2+1,w,c
  3636  0018E0  A0D8               	btfss	status,0,c
  3637  0018E2  0012               	return	
  3638                           
  3639                           ;main.c: 1014: servo_duties[SERVO_C] = RESET_POS_C;
  3640  0018E4  0E3E               	movlw	low _RESET_POS_C
  3641  0018E6  6EF6               	movwf	tblptrl,c
  3642  0018E8                     	if	1	;There is more than 1 active tblptr byte
  3643  0018E8  0E10               	movlw	high _RESET_POS_C
  3644  0018EA  6EF7               	movwf	tblptrh,c
  3645  0018EC                     	endif
  3646  0018EC                     	if	0	;There are less than 3 active tblptr bytes
  3647  0018EC                     	endif
  3648  0018EC  0009               	tblrd		*+
  3649  0018EE  CFF5 F03E          	movff	tablat,_servo_duties+2
  3650  0018F2  000A               	tblrd		*-
  3651  0018F4  CFF5 F03F          	movff	tablat,_servo_duties+3
  3652                           
  3653                           ;main.c: 1015: if (count9V + countC + countAA + countDead >= MAX_COUNT) {
  3654  0018F8  0E2E               	movlw	low _MAX_COUNT
  3655  0018FA  6EF6               	movwf	tblptrl,c
  3656  0018FC                     	if	1	;There is more than 1 active tblptr byte
  3657  0018FC  0E10               	movlw	high _MAX_COUNT
  3658  0018FE  6EF7               	movwf	tblptrh,c
  3659  001900                     	endif
  3660  001900                     	if	0	;There are less than 3 active tblptr bytes
  3661  001900                     	endif
  3662  001900  0100               	movlb	0	; () banked
  3663  001902  51B1               	movf	_countC& (0+255),w,b
  3664  001904  0100               	movlb	0	; () banked
  3665  001906  25AD               	addwf	_count9V& (0+255),w,b
  3666  001908  0100               	movlb	0	; () banked
  3667  00190A  6FAA               	movwf	??_FSM& (0+255),b
  3668  00190C  0100               	movlb	0	; () banked
  3669  00190E  51B2               	movf	(_countC+1)& (0+255),w,b
  3670  001910  0100               	movlb	0	; () banked
  3671  001912  21AE               	addwfc	(_count9V+1)& (0+255),w,b
  3672  001914  0100               	movlb	0	; () banked
  3673  001916  6FAB               	movwf	(??_FSM+1)& (0+255),b
  3674  001918  0100               	movlb	0	; () banked
  3675  00191A  51AF               	movf	_countAA& (0+255),w,b
  3676  00191C  0100               	movlb	0	; () banked
  3677  00191E  27AA               	addwf	??_FSM& (0+255),f,b
  3678  001920  0100               	movlb	0	; () banked
  3679  001922  51B0               	movf	(_countAA+1)& (0+255),w,b
  3680  001924  0100               	movlb	0	; () banked
  3681  001926  23AB               	addwfc	(??_FSM+1)& (0+255),f,b
  3682  001928  0100               	movlb	0	; () banked
  3683  00192A  51B3               	movf	_countDead& (0+255),w,b
  3684  00192C  0100               	movlb	0	; () banked
  3685  00192E  27AA               	addwf	??_FSM& (0+255),f,b
  3686  001930  0100               	movlb	0	; () banked
  3687  001932  51B4               	movf	(_countDead+1)& (0+255),w,b
  3688  001934  0100               	movlb	0	; () banked
  3689  001936  23AB               	addwfc	(??_FSM+1)& (0+255),f,b
  3690  001938  0009               	tblrd		*+
  3691  00193A  50F5               	movf	tablat,w,c
  3692  00193C  0100               	movlb	0	; () banked
  3693  00193E  5DAA               	subwf	??_FSM& (0+255),w,b
  3694  001940  0100               	movlb	0	; () banked
  3695  001942  51AB               	movf	(??_FSM+1)& (0+255),w,b
  3696  001944  0A80               	xorlw	128
  3697  001946  0100               	movlb	0	; () banked
  3698  001948  6FAC               	movwf	(??_FSM+2)& (0+255),b
  3699  00194A  0009               	tblrd		*+
  3700  00194C  50F5               	movf	tablat,w,c
  3701  00194E  0A80               	xorlw	128
  3702  001950  0100               	movlb	0	; () banked
  3703  001952  59AC               	subwfb	(??_FSM+2)& (0+255),w,b
  3704  001954  A0D8               	btfss	status,0,c
  3705  001956  D007               	goto	l4099
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;main.c: 1016: state = END;
  3709  001958  0E00               	movlw	0
  3710  00195A  6E55               	movwf	_state+1,c
  3711  00195C  0E63               	movlw	99
  3712  00195E  6E54               	movwf	_state,c
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;main.c: 1017: print_batteries();
  3716  001960  EC75  F011         	call	_print_batteries	;wreg free
  3717                           
  3718                           ;main.c: 1018: } else {
  3719  001964  D00B               	goto	l4105
  3720  001966                     l4099:
  3721                           
  3722                           ;main.c: 1019: state = WAIT;
  3723  001966  0E00               	movlw	0
  3724  001968  6E55               	movwf	_state+1,c
  3725  00196A  0E01               	movlw	1
  3726  00196C  6E54               	movwf	_state,c
  3727                           
  3728                           ;main.c: 1023: if (lcd_mode == 1) {
  3729  00196E  0100               	movlb	0	; () banked
  3730  001970  05BB               	decf	_lcd_mode& (0+255),w,b
  3731  001972  0100               	movlb	0	; () banked
  3732  001974  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  3733  001976  B4D8               	btfsc	status,2,c
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;main.c: 1025: print_simu();
  3737  001978  EC99  F014         	call	_print_simu	;wreg free
  3738  00197C                     l4105:
  3739                           
  3740                           ;main.c: 1026: }
  3741                           ;main.c: 1027: }
  3742                           ;main.c: 1028: timer_counter2 = 0;
  3743  00197C  0E00               	movlw	0
  3744  00197E  6E5F               	movwf	_timer_counter2+1,c
  3745  001980  0E00               	movlw	0
  3746  001982  6E5E               	movwf	_timer_counter2,c
  3747                           
  3748                           ;main.c: 1032: }
  3749                           ;main.c: 1033: break;
  3750  001984  0012               	return	
  3751  001986                     l4107:
  3752                           
  3753                           ;main.c: 1047: servo_duties[SERVO_AA] = FORWARD_POS_1_AA;
  3754  001986  0E22               	movlw	low _FORWARD_POS_1_AA
  3755  001988  6EF6               	movwf	tblptrl,c
  3756  00198A                     	if	1	;There is more than 1 active tblptr byte
  3757  00198A  0E10               	movlw	high _FORWARD_POS_1_AA
  3758  00198C  6EF7               	movwf	tblptrh,c
  3759  00198E                     	endif
  3760  00198E                     	if	0	;There are less than 3 active tblptr bytes
  3761  00198E                     	endif
  3762  00198E  0009               	tblrd		*+
  3763  001990  CFF5 F040          	movff	tablat,_servo_duties+4
  3764  001994  000A               	tblrd		*-
  3765  001996  CFF5 F041          	movff	tablat,_servo_duties+5
  3766                           
  3767                           ;main.c: 1050: servo_duties[SERVO_9V] = RESET_POS_9V + 3;
  3768  00199A  0E3A               	movlw	low _RESET_POS_9V
  3769  00199C  6EF6               	movwf	tblptrl,c
  3770  00199E                     	if	1	;There is more than 1 active tblptr byte
  3771  00199E  0E10               	movlw	high _RESET_POS_9V
  3772  0019A0  6EF7               	movwf	tblptrh,c
  3773  0019A2                     	endif
  3774  0019A2                     	if	0	;There are less than 3 active tblptr bytes
  3775  0019A2                     	endif
  3776  0019A2  0009               	tblrd		*+
  3777  0019A4  CFF5 F0AA          	movff	tablat,??_FSM
  3778  0019A8  0009               	tblrd		*+
  3779  0019AA  CFF5 F0AB          	movff	tablat,??_FSM+1
  3780  0019AE  0E03               	movlw	3
  3781  0019B0  0100               	movlb	0	; () banked
  3782  0019B2  25AA               	addwf	??_FSM& (0+255),w,b
  3783  0019B4  6E3C               	movwf	_servo_duties,c
  3784  0019B6  0E00               	movlw	0
  3785  0019B8  0100               	movlb	0	; () banked
  3786  0019BA  21AB               	addwfc	(??_FSM+1)& (0+255),w,b
  3787  0019BC  6E3D               	movwf	_servo_duties+1,c
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;main.c: 1051: servo_duties[SERVO_C] = RESET_POS_C + 3;
  3791  0019BE  0E3E               	movlw	low _RESET_POS_C
  3792  0019C0  6EF6               	movwf	tblptrl,c
  3793  0019C2                     	if	1	;There is more than 1 active tblptr byte
  3794  0019C2  0E10               	movlw	high _RESET_POS_C
  3795  0019C4  6EF7               	movwf	tblptrh,c
  3796  0019C6                     	endif
  3797  0019C6                     	if	0	;There are less than 3 active tblptr bytes
  3798  0019C6                     	endif
  3799  0019C6  0009               	tblrd		*+
  3800  0019C8  CFF5 F0AA          	movff	tablat,??_FSM
  3801  0019CC  0009               	tblrd		*+
  3802  0019CE  CFF5 F0AB          	movff	tablat,??_FSM+1
  3803  0019D2  0E03               	movlw	3
  3804  0019D4  0100               	movlb	0	; () banked
  3805  0019D6  25AA               	addwf	??_FSM& (0+255),w,b
  3806  0019D8  6E3E               	movwf	_servo_duties+2,c
  3807  0019DA  0E00               	movlw	0
  3808  0019DC  0100               	movlb	0	; () banked
  3809  0019DE  21AB               	addwfc	(??_FSM+1)& (0+255),w,b
  3810  0019E0  6E3F               	movwf	_servo_duties+3,c
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;main.c: 1055: if (timer_counter2 >= SERVO_WAIT) {
  3814  0019E2  0E44               	movlw	low _SERVO_WAIT
  3815  0019E4  6EF6               	movwf	tblptrl,c
  3816  0019E6                     	if	1	;There is more than 1 active tblptr byte
  3817  0019E6  0E10               	movlw	high _SERVO_WAIT
  3818  0019E8  6EF7               	movwf	tblptrh,c
  3819  0019EA                     	endif
  3820  0019EA                     	if	0	;There are less than 3 active tblptr bytes
  3821  0019EA                     	endif
  3822  0019EA  0009               	tblrd		*+
  3823  0019EC  50F5               	movf	tablat,w,c
  3824  0019EE  5C5E               	subwf	_timer_counter2,w,c
  3825  0019F0  0009               	tblrd		*+
  3826  0019F2  50F5               	movf	tablat,w,c
  3827  0019F4  585F               	subwfb	_timer_counter2+1,w,c
  3828  0019F6  A0D8               	btfss	status,0,c
  3829  0019F8  0012               	return	
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;main.c: 1058: state = V_AA;
  3833  0019FA  0E00               	movlw	0
  3834  0019FC  6E55               	movwf	_state+1,c
  3835  0019FE  0E29               	movlw	41
  3836  001A00  6E54               	movwf	_state,c
  3837                           
  3838                           ;main.c: 1059: timer_counter2 = 0;
  3839  001A02  0E00               	movlw	0
  3840  001A04  6E5F               	movwf	_timer_counter2+1,c
  3841  001A06  0E00               	movlw	0
  3842  001A08  6E5E               	movwf	_timer_counter2,c
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;main.c: 1062: if (lcd_mode == 1)
  3846  001A0A  0100               	movlb	0	; () banked
  3847  001A0C  05BB               	decf	_lcd_mode& (0+255),w,b
  3848  001A0E  0100               	movlb	0	; () banked
  3849  001A10  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  3850  001A12  B4D8               	btfsc	status,2,c
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;main.c: 1063: print_simu();
  3854  001A14  EC99  F014         	call	_print_simu	;wreg free
  3855                           
  3856                           ;main.c: 1065: servo_duties[SERVO_ELEC] = ELEC_DOWN;
  3857  001A18  0E18               	movlw	low _ELEC_DOWN
  3858  001A1A  6EF6               	movwf	tblptrl,c
  3859  001A1C                     	if	1	;There is more than 1 active tblptr byte
  3860  001A1C  0E10               	movlw	high _ELEC_DOWN
  3861  001A1E  6EF7               	movwf	tblptrh,c
  3862  001A20                     	endif
  3863  001A20                     	if	0	;There are less than 3 active tblptr bytes
  3864  001A20                     	endif
  3865  001A20  0009               	tblrd		*+
  3866  001A22  CFF5 F042          	movff	tablat,_servo_duties+6
  3867  001A26  000A               	tblrd		*-
  3868  001A28  CFF5 F043          	movff	tablat,_servo_duties+7
  3869                           
  3870                           ;main.c: 1066: }
  3871                           ;main.c: 1067: break;
  3872  001A2C  0012               	return	
  3873  001A2E                     l4123:
  3874                           
  3875                           ;main.c: 1074: servo_duties[SERVO_ELEC] = ELEC_DOWN;
  3876  001A2E  0E18               	movlw	low _ELEC_DOWN
  3877  001A30  6EF6               	movwf	tblptrl,c
  3878  001A32                     	if	1	;There is more than 1 active tblptr byte
  3879  001A32  0E10               	movlw	high _ELEC_DOWN
  3880  001A34  6EF7               	movwf	tblptrh,c
  3881  001A36                     	endif
  3882  001A36                     	if	0	;There are less than 3 active tblptr bytes
  3883  001A36                     	endif
  3884  001A36  0009               	tblrd		*+
  3885  001A38  CFF5 F042          	movff	tablat,_servo_duties+6
  3886  001A3C  000A               	tblrd		*-
  3887  001A3E  CFF5 F043          	movff	tablat,_servo_duties+7
  3888                           
  3889                           ;main.c: 1079: if (timer_counter2 >= SERVO_WAIT) {
  3890  001A42  0E44               	movlw	low _SERVO_WAIT
  3891  001A44  6EF6               	movwf	tblptrl,c
  3892  001A46                     	if	1	;There is more than 1 active tblptr byte
  3893  001A46  0E10               	movlw	high _SERVO_WAIT
  3894  001A48  6EF7               	movwf	tblptrh,c
  3895  001A4A                     	endif
  3896  001A4A                     	if	0	;There are less than 3 active tblptr bytes
  3897  001A4A                     	endif
  3898  001A4A  0009               	tblrd		*+
  3899  001A4C  50F5               	movf	tablat,w,c
  3900  001A4E  5C5E               	subwf	_timer_counter2,w,c
  3901  001A50  0009               	tblrd		*+
  3902  001A52  50F5               	movf	tablat,w,c
  3903  001A54  585F               	subwfb	_timer_counter2+1,w,c
  3904  001A56  A0D8               	btfss	status,0,c
  3905  001A58  D046               	goto	l4147
  3906                           
  3907                           ;main.c: 1086: if (voltAA >= VOLT_WAIT) {
  3908  001A5A  0E46               	movlw	low _VOLT_WAIT
  3909  001A5C  6EF6               	movwf	tblptrl,c
  3910  001A5E                     	if	1	;There is more than 1 active tblptr byte
  3911  001A5E  0E10               	movlw	high _VOLT_WAIT
  3912  001A60  6EF7               	movwf	tblptrh,c
  3913  001A62                     	endif
  3914  001A62                     	if	0	;There are less than 3 active tblptr bytes
  3915  001A62                     	endif
  3916  001A62  0009               	tblrd		*+
  3917  001A64  50F5               	movf	tablat,w,c
  3918  001A66  5C64               	subwf	_voltAA,w,c
  3919  001A68  5065               	movf	_voltAA+1,w,c
  3920  001A6A  0A80               	xorlw	128
  3921  001A6C  0100               	movlb	0	; () banked
  3922  001A6E  6FAA               	movwf	??_FSM& (0+255),b
  3923  001A70  0009               	tblrd		*+
  3924  001A72  50F5               	movf	tablat,w,c
  3925  001A74  0A80               	xorlw	128
  3926  001A76  0100               	movlb	0	; () banked
  3927  001A78  59AA               	subwfb	??_FSM& (0+255),w,b
  3928  001A7A  A0D8               	btfss	status,0,c
  3929  001A7C  D00E               	goto	l4133
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;main.c: 1087: servo_duties[SERVO_RAMP] = RAMP_AA;
  3933  001A7E  0E32               	movlw	low _RAMP_AA
  3934  001A80  6EF6               	movwf	tblptrl,c
  3935  001A82                     	if	1	;There is more than 1 active tblptr byte
  3936  001A82  0E10               	movlw	high _RAMP_AA
  3937  001A84  6EF7               	movwf	tblptrh,c
  3938  001A86                     	endif
  3939  001A86                     	if	0	;There are less than 3 active tblptr bytes
  3940  001A86                     	endif
  3941  001A86  0009               	tblrd		*+
  3942  001A88  CFF5 F044          	movff	tablat,_servo_duties+8
  3943  001A8C  000A               	tblrd		*-
  3944  001A8E  CFF5 F045          	movff	tablat,_servo_duties+9
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;main.c: 1088: countAA += 1;
  3948  001A92  0100               	movlb	0	; () banked
  3949  001A94  4BAF               	infsnz	_countAA& (0+255),f,b
  3950  001A96  2BB0               	incf	(_countAA+1)& (0+255),f,b
  3951                           
  3952                           ;main.c: 1089: } else {
  3953  001A98  D00D               	goto	l4137
  3954  001A9A                     l4133:
  3955                           
  3956                           ; BSR set to: 0
  3957                           ;main.c: 1092: servo_duties[SERVO_RAMP] = RAMP_DEAD;
  3958  001A9A  0E36               	movlw	low _RAMP_DEAD
  3959  001A9C  6EF6               	movwf	tblptrl,c
  3960  001A9E                     	if	1	;There is more than 1 active tblptr byte
  3961  001A9E  0E10               	movlw	high _RAMP_DEAD
  3962  001AA0  6EF7               	movwf	tblptrh,c
  3963  001AA2                     	endif
  3964  001AA2                     	if	0	;There are less than 3 active tblptr bytes
  3965  001AA2                     	endif
  3966  001AA2  0009               	tblrd		*+
  3967  001AA4  CFF5 F044          	movff	tablat,_servo_duties+8
  3968  001AA8  000A               	tblrd		*-
  3969  001AAA  CFF5 F045          	movff	tablat,_servo_duties+9
  3970                           
  3971                           ; BSR set to: 0
  3972                           ;main.c: 1093: countDead += 1;
  3973  001AAE  0100               	movlb	0	; () banked
  3974  001AB0  4BB3               	infsnz	_countDead& (0+255),f,b
  3975  001AB2  2BB4               	incf	(_countDead+1)& (0+255),f,b
  3976  001AB4                     l4137:
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;main.c: 1094: }
  3980                           ;main.c: 1099: servo_duties[SERVO_ELEC] = ELEC_UP;
  3981  001AB4  0E1A               	movlw	low _ELEC_UP
  3982  001AB6  6EF6               	movwf	tblptrl,c
  3983  001AB8                     	if	1	;There is more than 1 active tblptr byte
  3984  001AB8  0E10               	movlw	high _ELEC_UP
  3985  001ABA  6EF7               	movwf	tblptrh,c
  3986  001ABC                     	endif
  3987  001ABC                     	if	0	;There are less than 3 active tblptr bytes
  3988  001ABC                     	endif
  3989  001ABC  0009               	tblrd		*+
  3990  001ABE  CFF5 F042          	movff	tablat,_servo_duties+6
  3991  001AC2  000A               	tblrd		*-
  3992  001AC4  CFF5 F043          	movff	tablat,_servo_duties+7
  3993                           
  3994                           ; BSR set to: 0
  3995                           ;main.c: 1100: state = VU_AA;
  3996  001AC8  0E00               	movlw	0
  3997  001ACA  6E55               	movwf	_state+1,c
  3998  001ACC  0E2D               	movlw	45
  3999  001ACE  6E54               	movwf	_state,c
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;main.c: 1101: timer_counter2 = 0;
  4003  001AD0  0E00               	movlw	0
  4004  001AD2  6E5F               	movwf	_timer_counter2+1,c
  4005  001AD4  0E00               	movlw	0
  4006  001AD6  6E5E               	movwf	_timer_counter2,c
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;main.c: 1104: if (lcd_mode == 1)
  4010  001AD8  0100               	movlb	0	; () banked
  4011  001ADA  05BB               	decf	_lcd_mode& (0+255),w,b
  4012  001ADC  0100               	movlb	0	; () banked
  4013  001ADE  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  4014  001AE0  B4D8               	btfsc	status,2,c
  4015                           
  4016                           ; BSR set to: 0
  4017                           ;main.c: 1105: print_simu();
  4018  001AE2  EC99  F014         	call	_print_simu	;wreg free
  4019  001AE6                     l4147:
  4020                           
  4021                           ;main.c: 1109: servo_duties[SERVO_ELEC] = ELEC_UP;
  4022  001AE6  0E1A               	movlw	low _ELEC_UP
  4023  001AE8  6EF6               	movwf	tblptrl,c
  4024  001AEA                     	if	1	;There is more than 1 active tblptr byte
  4025  001AEA  0E10               	movlw	high _ELEC_UP
  4026  001AEC  6EF7               	movwf	tblptrh,c
  4027  001AEE                     	endif
  4028  001AEE                     	if	0	;There are less than 3 active tblptr bytes
  4029  001AEE                     	endif
  4030  001AEE  0009               	tblrd		*+
  4031  001AF0  CFF5 F042          	movff	tablat,_servo_duties+6
  4032  001AF4  000A               	tblrd		*-
  4033  001AF6  CFF5 F043          	movff	tablat,_servo_duties+7
  4034                           
  4035                           ;main.c: 1110: if (timer_counter2 >= SERVO_WAIT) {
  4036  001AFA  0E44               	movlw	low _SERVO_WAIT
  4037  001AFC  6EF6               	movwf	tblptrl,c
  4038  001AFE                     	if	1	;There is more than 1 active tblptr byte
  4039  001AFE  0E10               	movlw	high _SERVO_WAIT
  4040  001B00  6EF7               	movwf	tblptrh,c
  4041  001B02                     	endif
  4042  001B02                     	if	0	;There are less than 3 active tblptr bytes
  4043  001B02                     	endif
  4044  001B02  0009               	tblrd		*+
  4045  001B04  50F5               	movf	tablat,w,c
  4046  001B06  5C5E               	subwf	_timer_counter2,w,c
  4047  001B08  0009               	tblrd		*+
  4048  001B0A  50F5               	movf	tablat,w,c
  4049  001B0C  585F               	subwfb	_timer_counter2+1,w,c
  4050  001B0E  A0D8               	btfss	status,0,c
  4051  001B10  0012               	return	
  4052                           
  4053                           ;main.c: 1111: timer_counter2 = 0;
  4054  001B12  0E00               	movlw	0
  4055  001B14  6E5F               	movwf	_timer_counter2+1,c
  4056  001B16  0E00               	movlw	0
  4057  001B18  6E5E               	movwf	_timer_counter2,c
  4058                           
  4059                           ;main.c: 1112: state = FA_AA;
  4060  001B1A  0E00               	movlw	0
  4061  001B1C  6E55               	movwf	_state+1,c
  4062  001B1E  0E2A               	movlw	42
  4063  001B20  6E54               	movwf	_state,c
  4064                           
  4065                           ;main.c: 1116: break;
  4066                           
  4067                           ;main.c: 1113: }
  4068                           ;main.c: 1114: break;
  4069  001B22  0012               	return	
  4070  001B24                     l4155:
  4071                           
  4072                           ;main.c: 1119: servo_duties[SERVO_AA] = FORWARD_POS_2_AA;
  4073  001B24  0E2A               	movlw	low _FORWARD_POS_2_AA
  4074  001B26  6EF6               	movwf	tblptrl,c
  4075  001B28                     	if	1	;There is more than 1 active tblptr byte
  4076  001B28  0E10               	movlw	high _FORWARD_POS_2_AA
  4077  001B2A  6EF7               	movwf	tblptrh,c
  4078  001B2C                     	endif
  4079  001B2C                     	if	0	;There are less than 3 active tblptr bytes
  4080  001B2C                     	endif
  4081  001B2C  0009               	tblrd		*+
  4082  001B2E  CFF5 F040          	movff	tablat,_servo_duties+4
  4083  001B32  000A               	tblrd		*-
  4084  001B34  CFF5 F041          	movff	tablat,_servo_duties+5
  4085                           
  4086                           ;main.c: 1124: if (timer_counter2 >= SERVO_WAIT) {
  4087  001B38  0E44               	movlw	low _SERVO_WAIT
  4088  001B3A  6EF6               	movwf	tblptrl,c
  4089  001B3C                     	if	1	;There is more than 1 active tblptr byte
  4090  001B3C  0E10               	movlw	high _SERVO_WAIT
  4091  001B3E  6EF7               	movwf	tblptrh,c
  4092  001B40                     	endif
  4093  001B40                     	if	0	;There are less than 3 active tblptr bytes
  4094  001B40                     	endif
  4095  001B40  0009               	tblrd		*+
  4096  001B42  50F5               	movf	tablat,w,c
  4097  001B44  5C5E               	subwf	_timer_counter2,w,c
  4098  001B46  0009               	tblrd		*+
  4099  001B48  50F5               	movf	tablat,w,c
  4100  001B4A  585F               	subwfb	_timer_counter2+1,w,c
  4101  001B4C  A0D8               	btfss	status,0,c
  4102  001B4E  0012               	return	
  4103                           
  4104                           ;main.c: 1125: state = A_AA;
  4105  001B50  0E00               	movlw	0
  4106  001B52  6E55               	movwf	_state+1,c
  4107  001B54  0E2B               	movlw	43
  4108  001B56  6E54               	movwf	_state,c
  4109                           
  4110                           ;main.c: 1127: timer_counter2 = 0;
  4111  001B58  0E00               	movlw	0
  4112  001B5A  6E5F               	movwf	_timer_counter2+1,c
  4113  001B5C  0E00               	movlw	0
  4114  001B5E  6E5E               	movwf	_timer_counter2,c
  4115                           
  4116                           ;main.c: 1130: if (lcd_mode == 1)
  4117  001B60  0100               	movlb	0	; () banked
  4118  001B62  05BB               	decf	_lcd_mode& (0+255),w,b
  4119  001B64  0100               	movlb	0	; () banked
  4120  001B66  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  4121  001B68  A4D8               	btfss	status,2,c
  4122  001B6A  0012               	return	
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;main.c: 1131: print_simu();
  4126  001B6C  EC99  F014         	call	_print_simu	;wreg free
  4127                           
  4128                           ;main.c: 1132: }
  4129                           ;main.c: 1133: break;
  4130  001B70  0012               	return	
  4131  001B72                     l4165:
  4132                           
  4133                           ;main.c: 1136: if (timer_counter2 >= SERVO_WAIT/2) {
  4134  001B72  0E44               	movlw	low _SERVO_WAIT
  4135  001B74  6EF6               	movwf	tblptrl,c
  4136  001B76                     	if	1	;There is more than 1 active tblptr byte
  4137  001B76  0E10               	movlw	high _SERVO_WAIT
  4138  001B78  6EF7               	movwf	tblptrh,c
  4139  001B7A                     	endif
  4140  001B7A                     	if	0	;There are less than 3 active tblptr bytes
  4141  001B7A                     	endif
  4142  001B7A  0009               	tblrd		*+
  4143  001B7C  CFF5 F080          	movff	tablat,___awdiv@dividend
  4144  001B80  000A               	tblrd		*-
  4145  001B82  CFF5 F081          	movff	tablat,___awdiv@dividend+1
  4146  001B86  0E00               	movlw	0
  4147  001B88  0100               	movlb	0	; () banked
  4148  001B8A  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  4149  001B8C  0E02               	movlw	2
  4150  001B8E  6F82               	movwf	___awdiv@divisor& (0+255),b
  4151  001B90  EC7B  F016         	call	___awdiv	;wreg free
  4152  001B94  0100               	movlb	0	; () banked
  4153  001B96  5180               	movf	?___awdiv& (0+255),w,b
  4154  001B98  5C5E               	subwf	_timer_counter2,w,c
  4155  001B9A  0100               	movlb	0	; () banked
  4156  001B9C  5181               	movf	(?___awdiv+1)& (0+255),w,b
  4157  001B9E  585F               	subwfb	_timer_counter2+1,w,c
  4158  001BA0  A0D8               	btfss	status,0,c
  4159  001BA2  0012               	return	
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;main.c: 1137: state = R_AA;
  4163  001BA4  0E00               	movlw	0
  4164  001BA6  6E55               	movwf	_state+1,c
  4165  001BA8  0E2C               	movlw	44
  4166  001BAA  6E54               	movwf	_state,c
  4167                           
  4168                           ;main.c: 1138: timer_counter2 = 0;
  4169  001BAC  0E00               	movlw	0
  4170  001BAE  6E5F               	movwf	_timer_counter2+1,c
  4171  001BB0  0E00               	movlw	0
  4172  001BB2  6E5E               	movwf	_timer_counter2,c
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;main.c: 1141: if (lcd_mode == 1)
  4176  001BB4  0100               	movlb	0	; () banked
  4177  001BB6  05BB               	decf	_lcd_mode& (0+255),w,b
  4178  001BB8  0100               	movlb	0	; () banked
  4179  001BBA  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  4180  001BBC  B4D8               	btfsc	status,2,c
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;main.c: 1142: print_simu();
  4184  001BBE  EC99  F014         	call	_print_simu	;wreg free
  4185                           
  4186                           ;main.c: 1145: servo_duties[SERVO_AA] = RESET_POS_AA;
  4187  001BC2  0E3C               	movlw	low _RESET_POS_AA
  4188  001BC4  6EF6               	movwf	tblptrl,c
  4189  001BC6                     	if	1	;There is more than 1 active tblptr byte
  4190  001BC6  0E10               	movlw	high _RESET_POS_AA
  4191  001BC8  6EF7               	movwf	tblptrh,c
  4192  001BCA                     	endif
  4193  001BCA                     	if	0	;There are less than 3 active tblptr bytes
  4194  001BCA                     	endif
  4195  001BCA  0009               	tblrd		*+
  4196  001BCC  CFF5 F040          	movff	tablat,_servo_duties+4
  4197  001BD0  000A               	tblrd		*-
  4198  001BD2  CFF5 F041          	movff	tablat,_servo_duties+5
  4199                           
  4200                           ;main.c: 1146: }
  4201                           ;main.c: 1147: break;
  4202  001BD6  0012               	return	
  4203  001BD8                     l4175:
  4204                           
  4205                           ;main.c: 1151: servo_duties[SERVO_9V] = RESET_POS_9V;
  4206  001BD8  0E3A               	movlw	low _RESET_POS_9V
  4207  001BDA  6EF6               	movwf	tblptrl,c
  4208  001BDC                     	if	1	;There is more than 1 active tblptr byte
  4209  001BDC  0E10               	movlw	high _RESET_POS_9V
  4210  001BDE  6EF7               	movwf	tblptrh,c
  4211  001BE0                     	endif
  4212  001BE0                     	if	0	;There are less than 3 active tblptr bytes
  4213  001BE0                     	endif
  4214  001BE0  0009               	tblrd		*+
  4215  001BE2  CFF5 F03C          	movff	tablat,_servo_duties
  4216  001BE6  000A               	tblrd		*-
  4217  001BE8  CFF5 F03D          	movff	tablat,_servo_duties+1
  4218                           
  4219                           ;main.c: 1152: servo_duties[SERVO_C] = RESET_POS_C;
  4220  001BEC  0E3E               	movlw	low _RESET_POS_C
  4221  001BEE  6EF6               	movwf	tblptrl,c
  4222  001BF0                     	if	1	;There is more than 1 active tblptr byte
  4223  001BF0  0E10               	movlw	high _RESET_POS_C
  4224  001BF2  6EF7               	movwf	tblptrh,c
  4225  001BF4                     	endif
  4226  001BF4                     	if	0	;There are less than 3 active tblptr bytes
  4227  001BF4                     	endif
  4228  001BF4  0009               	tblrd		*+
  4229  001BF6  CFF5 F03E          	movff	tablat,_servo_duties+2
  4230  001BFA  000A               	tblrd		*-
  4231  001BFC  CFF5 F03F          	movff	tablat,_servo_duties+3
  4232                           
  4233                           ;main.c: 1153: servo_duties[SERVO_AA] = RESET_POS_AA;
  4234  001C00  0E3C               	movlw	low _RESET_POS_AA
  4235  001C02  6EF6               	movwf	tblptrl,c
  4236  001C04                     	if	1	;There is more than 1 active tblptr byte
  4237  001C04  0E10               	movlw	high _RESET_POS_AA
  4238  001C06  6EF7               	movwf	tblptrh,c
  4239  001C08                     	endif
  4240  001C08                     	if	0	;There are less than 3 active tblptr bytes
  4241  001C08                     	endif
  4242  001C08  0009               	tblrd		*+
  4243  001C0A  CFF5 F040          	movff	tablat,_servo_duties+4
  4244  001C0E  000A               	tblrd		*-
  4245  001C10  CFF5 F041          	movff	tablat,_servo_duties+5
  4246                           
  4247                           ;main.c: 1155: if (timer_counter2 >= SERVO_WAIT) {
  4248  001C14  0E44               	movlw	low _SERVO_WAIT
  4249  001C16  6EF6               	movwf	tblptrl,c
  4250  001C18                     	if	1	;There is more than 1 active tblptr byte
  4251  001C18  0E10               	movlw	high _SERVO_WAIT
  4252  001C1A  6EF7               	movwf	tblptrh,c
  4253  001C1C                     	endif
  4254  001C1C                     	if	0	;There are less than 3 active tblptr bytes
  4255  001C1C                     	endif
  4256  001C1C  0009               	tblrd		*+
  4257  001C1E  50F5               	movf	tablat,w,c
  4258  001C20  5C5E               	subwf	_timer_counter2,w,c
  4259  001C22  0009               	tblrd		*+
  4260  001C24  50F5               	movf	tablat,w,c
  4261  001C26  585F               	subwfb	_timer_counter2+1,w,c
  4262  001C28  A0D8               	btfss	status,0,c
  4263  001C2A  0012               	return	
  4264                           
  4265                           ;main.c: 1156: if (count9V + countC + countAA + countDead >= MAX_COUNT) {
  4266  001C2C  0E2E               	movlw	low _MAX_COUNT
  4267  001C2E  6EF6               	movwf	tblptrl,c
  4268  001C30                     	if	1	;There is more than 1 active tblptr byte
  4269  001C30  0E10               	movlw	high _MAX_COUNT
  4270  001C32  6EF7               	movwf	tblptrh,c
  4271  001C34                     	endif
  4272  001C34                     	if	0	;There are less than 3 active tblptr bytes
  4273  001C34                     	endif
  4274  001C34  0100               	movlb	0	; () banked
  4275  001C36  51B1               	movf	_countC& (0+255),w,b
  4276  001C38  0100               	movlb	0	; () banked
  4277  001C3A  25AD               	addwf	_count9V& (0+255),w,b
  4278  001C3C  0100               	movlb	0	; () banked
  4279  001C3E  6FAA               	movwf	??_FSM& (0+255),b
  4280  001C40  0100               	movlb	0	; () banked
  4281  001C42  51B2               	movf	(_countC+1)& (0+255),w,b
  4282  001C44  0100               	movlb	0	; () banked
  4283  001C46  21AE               	addwfc	(_count9V+1)& (0+255),w,b
  4284  001C48  0100               	movlb	0	; () banked
  4285  001C4A  6FAB               	movwf	(??_FSM+1)& (0+255),b
  4286  001C4C  0100               	movlb	0	; () banked
  4287  001C4E  51AF               	movf	_countAA& (0+255),w,b
  4288  001C50  0100               	movlb	0	; () banked
  4289  001C52  27AA               	addwf	??_FSM& (0+255),f,b
  4290  001C54  0100               	movlb	0	; () banked
  4291  001C56  51B0               	movf	(_countAA+1)& (0+255),w,b
  4292  001C58  0100               	movlb	0	; () banked
  4293  001C5A  23AB               	addwfc	(??_FSM+1)& (0+255),f,b
  4294  001C5C  0100               	movlb	0	; () banked
  4295  001C5E  51B3               	movf	_countDead& (0+255),w,b
  4296  001C60  0100               	movlb	0	; () banked
  4297  001C62  27AA               	addwf	??_FSM& (0+255),f,b
  4298  001C64  0100               	movlb	0	; () banked
  4299  001C66  51B4               	movf	(_countDead+1)& (0+255),w,b
  4300  001C68  0100               	movlb	0	; () banked
  4301  001C6A  23AB               	addwfc	(??_FSM+1)& (0+255),f,b
  4302  001C6C  0009               	tblrd		*+
  4303  001C6E  50F5               	movf	tablat,w,c
  4304  001C70  0100               	movlb	0	; () banked
  4305  001C72  5DAA               	subwf	??_FSM& (0+255),w,b
  4306  001C74  0100               	movlb	0	; () banked
  4307  001C76  51AB               	movf	(??_FSM+1)& (0+255),w,b
  4308  001C78  0A80               	xorlw	128
  4309  001C7A  0100               	movlb	0	; () banked
  4310  001C7C  6FAC               	movwf	(??_FSM+2)& (0+255),b
  4311  001C7E  0009               	tblrd		*+
  4312  001C80  50F5               	movf	tablat,w,c
  4313  001C82  0A80               	xorlw	128
  4314  001C84  0100               	movlb	0	; () banked
  4315  001C86  59AC               	subwfb	(??_FSM+2)& (0+255),w,b
  4316  001C88  A0D8               	btfss	status,0,c
  4317  001C8A  D007               	goto	l4185
  4318                           
  4319                           ; BSR set to: 0
  4320                           ;main.c: 1157: state = END;
  4321  001C8C  0E00               	movlw	0
  4322  001C8E  6E55               	movwf	_state+1,c
  4323  001C90  0E63               	movlw	99
  4324  001C92  6E54               	movwf	_state,c
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;main.c: 1158: print_batteries();
  4328  001C94  EC75  F011         	call	_print_batteries	;wreg free
  4329                           
  4330                           ;main.c: 1159: } else {
  4331  001C98  D00B               	goto	l4191
  4332  001C9A                     l4185:
  4333                           
  4334                           ;main.c: 1160: state = WAIT;
  4335  001C9A  0E00               	movlw	0
  4336  001C9C  6E55               	movwf	_state+1,c
  4337  001C9E  0E01               	movlw	1
  4338  001CA0  6E54               	movwf	_state,c
  4339                           
  4340                           ;main.c: 1164: if (lcd_mode == 1) {
  4341  001CA2  0100               	movlb	0	; () banked
  4342  001CA4  05BB               	decf	_lcd_mode& (0+255),w,b
  4343  001CA6  0100               	movlb	0	; () banked
  4344  001CA8  11BC               	iorwf	(_lcd_mode+1)& (0+255),w,b
  4345  001CAA  B4D8               	btfsc	status,2,c
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;main.c: 1166: print_simu();
  4349  001CAC  EC99  F014         	call	_print_simu	;wreg free
  4350  001CB0                     l4191:
  4351                           
  4352                           ;main.c: 1167: }
  4353                           ;main.c: 1168: }
  4354                           ;main.c: 1169: timer_counter2 = 0;
  4355  001CB0  0E00               	movlw	0
  4356  001CB2  6E5F               	movwf	_timer_counter2+1,c
  4357  001CB4  0E00               	movlw	0
  4358  001CB6  6E5E               	movwf	_timer_counter2,c
  4359                           
  4360                           ;main.c: 1195: }
  4361                           
  4362                           ;main.c: 1194: break;
  4363                           
  4364                           ;main.c: 1193: default:
  4365                           
  4366                           ;main.c: 1189: break;
  4367                           
  4368                           ;main.c: 1188: case END:
  4369                           
  4370                           ;main.c: 1183: break;
  4371                           
  4372                           ;main.c: 1181: case TEST:
  4373                           
  4374                           ;main.c: 1174: }
  4375                           ;main.c: 1175: break;
  4376  001CB8  0012               	return	
  4377  001CBA                     l4195:
  4378  001CBA  C054  F0AA         	movff	_state,??_FSM
  4379  001CBE  C055  F0AB         	movff	_state+1,??_FSM+1
  4380                           
  4381                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4382                           ; Switch size 1, requested type "space"
  4383                           ; Number of cases is 1, Range of values is 0 to 0
  4384                           ; switch strategies available:
  4385                           ; Name         Instructions Cycles
  4386                           ; simple_byte            4     3 (average)
  4387                           ;	Chosen strategy is simple_byte
  4388  001CC2  0100               	movlb	0	; () banked
  4389  001CC4  51AB               	movf	(??_FSM+1)& (0+255),w,b
  4390  001CC6  0A00               	xorlw	0	; case 0
  4391  001CC8  A4D8               	btfss	status,2,c
  4392  001CCA  0012               	return	
  4393                           
  4394                           ; BSR set to: 0
  4395                           ; Switch size 1, requested type "space"
  4396                           ; Number of cases is 22, Range of values is 0 to 99
  4397                           ; switch strategies available:
  4398                           ; Name         Instructions Cycles
  4399                           ; simple_byte           67    34 (average)
  4400                           ;	Chosen strategy is simple_byte
  4401  001CCC  0100               	movlb	0	; () banked
  4402  001CCE  51AA               	movf	??_FSM& (0+255),w,b
  4403  001CD0  0A00               	xorlw	0	; case 0
  4404  001CD2  B4D8               	btfsc	status,2,c
  4405  001CD4  EF27  F008         	goto	l3849
  4406  001CD8  0A01               	xorlw	1	; case 1
  4407  001CDA  B4D8               	btfsc	status,2,c
  4408  001CDC  EF2C  F008         	goto	l3851
  4409  001CE0  0A15               	xorlw	21	; case 20
  4410  001CE2  B4D8               	btfsc	status,2,c
  4411  001CE4  EFBB  F009         	goto	l3945
  4412  001CE8  0A01               	xorlw	1	; case 21
  4413  001CEA  B4D8               	btfsc	status,2,c
  4414  001CEC  EFEF  F009         	goto	l3957
  4415  001CF0  0A03               	xorlw	3	; case 22
  4416  001CF2  B4D8               	btfsc	status,2,c
  4417  001CF4  EF6C  F00A         	goto	l3987
  4418  001CF8  0A01               	xorlw	1	; case 23
  4419  001CFA  B4D8               	btfsc	status,2,c
  4420  001CFC  D414               	goto	l3997
  4421  001CFE  0A0F               	xorlw	15	; case 24
  4422  001D00  B4D8               	btfsc	status,2,c
  4423  001D02  D444               	goto	l4007
  4424  001D04  0A01               	xorlw	1	; case 25
  4425  001D06  B4D8               	btfsc	status,2,c
  4426  001D08  EF4D  F00A         	goto	l3981
  4427  001D0C  0A07               	xorlw	7	; case 30
  4428  001D0E  B4D8               	btfsc	status,2,c
  4429  001D10  D4AE               	goto	l4025
  4430  001D12  0A01               	xorlw	1	; case 31
  4431  001D14  B4D8               	btfsc	status,2,c
  4432  001D16  D4E5               	goto	l4037
  4433  001D18  0A3F               	xorlw	63	; case 32
  4434  001D1A  B4D8               	btfsc	status,2,c
  4435  001D1C  D55F               	goto	l4067
  4436  001D1E  0A01               	xorlw	1	; case 33
  4437  001D20  B4D8               	btfsc	status,2,c
  4438  001D22  D583               	goto	l4077
  4439  001D24  0A03               	xorlw	3	; case 34
  4440  001D26  B4D8               	btfsc	status,2,c
  4441  001D28  D5B3               	goto	l4087
  4442  001D2A  0A01               	xorlw	1	; case 35
  4443  001D2C  B4D8               	btfsc	status,2,c
  4444  001D2E  D537               	goto	l4061
  4445  001D30  0A0B               	xorlw	11	; case 40
  4446  001D32  B4D8               	btfsc	status,2,c
  4447  001D34  D628               	goto	l4107
  4448  001D36  0A01               	xorlw	1	; case 41
  4449  001D38  B4D8               	btfsc	status,2,c
  4450  001D3A  D679               	goto	l4123
  4451  001D3C  0A03               	xorlw	3	; case 42
  4452  001D3E  B4D8               	btfsc	status,2,c
  4453  001D40  D6F1               	goto	l4155
  4454  001D42  0A01               	xorlw	1	; case 43
  4455  001D44  B4D8               	btfsc	status,2,c
  4456  001D46  D715               	goto	l4165
  4457  001D48  0A07               	xorlw	7	; case 44
  4458  001D4A  B4D8               	btfsc	status,2,c
  4459  001D4C  D745               	goto	l4175
  4460  001D4E  0A01               	xorlw	1	; case 45
  4461  001D50  B4D8               	btfsc	status,2,c
  4462  001D52  D6C9               	goto	l4147
  4463  001D54  0A4F               	xorlw	79	; case 98
  4464  001D56  B4D8               	btfsc	status,2,c
  4465  001D58  0012               	return	
  4466  001D5A  0A01               	xorlw	1	; case 99
  4467  001D5C  0012               	return	
  4468  001D5E                     __end_of_FSM:
  4469                           	opt stack 0
  4470                           tblptru	equ	0xFF8
  4471                           tblptrh	equ	0xFF7
  4472                           tblptrl	equ	0xFF6
  4473                           tablat	equ	0xFF5
  4474                           prodh	equ	0xFF4
  4475                           prodl	equ	0xFF3
  4476                           intcon	equ	0xFF2
  4477                           postinc0	equ	0xFEE
  4478                           wreg	equ	0xFE8
  4479                           postdec1	equ	0xFE5
  4480                           fsr1l	equ	0xFE1
  4481                           status	equ	0xFD8
  4482                           
  4483 ;; *************** function _print_simu *****************
  4484 ;; Defined at:
  4485 ;;		line 1508 in file "main.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;		None
  4488 ;; Auto vars:     Size  Location     Type
  4489 ;;		None
  4490 ;; Return value:  Size  Location     Type
  4491 ;;                  1    wreg      void 
  4492 ;; Registers used:
  4493 ;;		wreg, status,2, status,0, cstack
  4494 ;; Tracked objects:
  4495 ;;		On entry : 0/0
  4496 ;;		On exit  : 0/0
  4497 ;;		Unchanged: 0/0
  4498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4501 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4502 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4503 ;;Total ram usage:        2 bytes
  4504 ;; Hardware stack levels used:    1
  4505 ;; Hardware stack levels required when called:    4
  4506 ;; This function calls:
  4507 ;;		_initLCD
  4508 ;;		_putch
  4509 ;; This function is called by:
  4510 ;;		_FSM
  4511 ;;		_keypad
  4512 ;; This function uses a non-reentrant model
  4513 ;;
  4514                           
  4515                           	psect	text4
  4516  002932                     __ptext4:
  4517                           	opt stack 0
  4518  002932                     _print_simu:
  4519                           	opt stack 25
  4520                           
  4521                           ;main.c: 1510: initLCD();
  4522                           
  4523                           ;incstack = 0
  4524  002932  EC23  F018         	call	_initLCD	;wreg free
  4525                           
  4526                           ;main.c: 1511: switch(state) {
  4527  002936  D121               	goto	l3729
  4528  002938                     l3679:
  4529                           
  4530                           ;main.c: 1515: putch('R');putch('S');
  4531  002938  0E52               	movlw	82
  4532  00293A  EC61  F018         	call	_putch
  4533  00293E  0E53               	movlw	83
  4534  002940  EC61  F018         	call	_putch
  4535                           
  4536                           ;main.c: 1516: break;
  4537  002944  D164               	goto	l3731
  4538  002946                     l3681:
  4539                           
  4540                           ;main.c: 1518: putch('W');putch('S');
  4541  002946  0E57               	movlw	87
  4542  002948  EC61  F018         	call	_putch
  4543  00294C  0E53               	movlw	83
  4544  00294E  EC61  F018         	call	_putch
  4545                           
  4546                           ;main.c: 1519: break;
  4547  002952  D15D               	goto	l3731
  4548  002954                     l3683:
  4549                           
  4550                           ;main.c: 1521: putch('W');putch('S');putch('C');
  4551  002954  0E57               	movlw	87
  4552  002956  EC61  F018         	call	_putch
  4553  00295A  0E53               	movlw	83
  4554  00295C  EC61  F018         	call	_putch
  4555  002960  0E43               	movlw	67
  4556  002962  EC61  F018         	call	_putch
  4557                           
  4558                           ;main.c: 1525: }
  4559                           
  4560                           ;main.c: 1524: break;
  4561                           
  4562                           ;main.c: 1523: default:
  4563                           
  4564                           ;main.c: 1522: break;
  4565  002966  D153               	goto	l3731
  4566  002968                     l3687:
  4567  002968  C052  F084         	movff	_sensor_state,??_print_simu
  4568  00296C  C053  F085         	movff	_sensor_state+1,??_print_simu+1
  4569                           
  4570                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4571                           ; Switch size 1, requested type "space"
  4572                           ; Number of cases is 1, Range of values is 0 to 0
  4573                           ; switch strategies available:
  4574                           ; Name         Instructions Cycles
  4575                           ; simple_byte            4     3 (average)
  4576                           ;	Chosen strategy is simple_byte
  4577  002970  0100               	movlb	0	; () banked
  4578  002972  5185               	movf	(??_print_simu+1)& (0+255),w,b
  4579  002974  0A00               	xorlw	0	; case 0
  4580  002976  A4D8               	btfss	status,2,c
  4581  002978  D14A               	goto	l3731
  4582                           
  4583                           ; BSR set to: 0
  4584                           ; Switch size 1, requested type "space"
  4585                           ; Number of cases is 3, Range of values is 0 to 2
  4586                           ; switch strategies available:
  4587                           ; Name         Instructions Cycles
  4588                           ; simple_byte           10     6 (average)
  4589                           ;	Chosen strategy is simple_byte
  4590  00297A  0100               	movlb	0	; () banked
  4591  00297C  5184               	movf	??_print_simu& (0+255),w,b
  4592  00297E  0A00               	xorlw	0	; case 0
  4593  002980  B4D8               	btfsc	status,2,c
  4594  002982  D7DA               	goto	l3679
  4595  002984  0A01               	xorlw	1	; case 1
  4596  002986  B4D8               	btfsc	status,2,c
  4597  002988  D7DE               	goto	l3681
  4598  00298A  0A03               	xorlw	3	; case 2
  4599  00298C  B4D8               	btfsc	status,2,c
  4600  00298E  D7E2               	goto	l3683
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;main.c: 1527: break;
  4604  002990  D13E               	goto	l3731
  4605  002992                     l3689:
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;main.c: 1529: putch('F'); putch(' '); putch('9'); putch('V');
  4609  002992  0E46               	movlw	70
  4610  002994  EC61  F018         	call	_putch
  4611  002998  0E20               	movlw	32
  4612  00299A  EC61  F018         	call	_putch
  4613  00299E  0E39               	movlw	57
  4614  0029A0  EC61  F018         	call	_putch
  4615  0029A4  0E56               	movlw	86
  4616  0029A6  EC61  F018         	call	_putch
  4617                           
  4618                           ;main.c: 1530: break;
  4619  0029AA  D131               	goto	l3731
  4620  0029AC                     l3691:
  4621                           
  4622                           ;main.c: 1532: putch('V'); putch(' '); putch('9'); putch('V');
  4623  0029AC  0E56               	movlw	86
  4624  0029AE  EC61  F018         	call	_putch
  4625  0029B2  0E20               	movlw	32
  4626  0029B4  EC61  F018         	call	_putch
  4627  0029B8  0E39               	movlw	57
  4628  0029BA  EC61  F018         	call	_putch
  4629  0029BE  0E56               	movlw	86
  4630  0029C0  EC61  F018         	call	_putch
  4631                           
  4632                           ;main.c: 1533: break;
  4633  0029C4  D124               	goto	l3731
  4634  0029C6                     l3693:
  4635                           
  4636                           ;main.c: 1535: putch('V'); putch('U'); putch(' '); putch('9'); putch('V');
  4637  0029C6  0E56               	movlw	86
  4638  0029C8  EC61  F018         	call	_putch
  4639  0029CC  0E55               	movlw	85
  4640  0029CE  EC61  F018         	call	_putch
  4641  0029D2  0E20               	movlw	32
  4642  0029D4  EC61  F018         	call	_putch
  4643  0029D8  0E39               	movlw	57
  4644  0029DA  EC61  F018         	call	_putch
  4645  0029DE  0E56               	movlw	86
  4646  0029E0  EC61  F018         	call	_putch
  4647                           
  4648                           ;main.c: 1536: break;
  4649  0029E4  D114               	goto	l3731
  4650  0029E6                     l3695:
  4651                           
  4652                           ;main.c: 1538: putch('A'); putch(' '); putch('9'); putch('V');
  4653  0029E6  0E41               	movlw	65
  4654  0029E8  EC61  F018         	call	_putch
  4655  0029EC  0E20               	movlw	32
  4656  0029EE  EC61  F018         	call	_putch
  4657  0029F2  0E39               	movlw	57
  4658  0029F4  EC61  F018         	call	_putch
  4659  0029F8  0E56               	movlw	86
  4660  0029FA  EC61  F018         	call	_putch
  4661                           
  4662                           ;main.c: 1539: break;
  4663  0029FE  D107               	goto	l3731
  4664  002A00                     l3697:
  4665                           
  4666                           ;main.c: 1541: putch('F'); putch('A'); putch(' '); putch('9'); putch('V');
  4667  002A00  0E46               	movlw	70
  4668  002A02  EC61  F018         	call	_putch
  4669  002A06  0E41               	movlw	65
  4670  002A08  EC61  F018         	call	_putch
  4671  002A0C  0E20               	movlw	32
  4672  002A0E  EC61  F018         	call	_putch
  4673  002A12  0E39               	movlw	57
  4674  002A14  EC61  F018         	call	_putch
  4675  002A18  0E56               	movlw	86
  4676  002A1A  EC61  F018         	call	_putch
  4677                           
  4678                           ;main.c: 1542: break;
  4679  002A1E  D0F7               	goto	l3731
  4680  002A20                     l3699:
  4681                           
  4682                           ;main.c: 1544: putch('R'); putch(' '); putch('9'); putch('V');
  4683  002A20  0E52               	movlw	82
  4684  002A22  EC61  F018         	call	_putch
  4685  002A26  0E20               	movlw	32
  4686  002A28  EC61  F018         	call	_putch
  4687  002A2C  0E39               	movlw	57
  4688  002A2E  EC61  F018         	call	_putch
  4689  002A32  0E56               	movlw	86
  4690  002A34  EC61  F018         	call	_putch
  4691                           
  4692                           ;main.c: 1545: break;
  4693  002A38  D0EA               	goto	l3731
  4694  002A3A                     l3701:
  4695                           
  4696                           ;main.c: 1547: putch('F'); putch(' '); putch('C');
  4697  002A3A  0E46               	movlw	70
  4698  002A3C  EC61  F018         	call	_putch
  4699  002A40  0E20               	movlw	32
  4700  002A42  EC61  F018         	call	_putch
  4701  002A46  0E43               	movlw	67
  4702  002A48  EC61  F018         	call	_putch
  4703                           
  4704                           ;main.c: 1548: break;
  4705  002A4C  D0E0               	goto	l3731
  4706  002A4E                     l3703:
  4707                           
  4708                           ;main.c: 1550: putch('V'); putch(' '); putch('C');
  4709  002A4E  0E56               	movlw	86
  4710  002A50  EC61  F018         	call	_putch
  4711  002A54  0E20               	movlw	32
  4712  002A56  EC61  F018         	call	_putch
  4713  002A5A  0E43               	movlw	67
  4714  002A5C  EC61  F018         	call	_putch
  4715                           
  4716                           ;main.c: 1551: break;
  4717  002A60  D0D6               	goto	l3731
  4718  002A62                     l3705:
  4719                           
  4720                           ;main.c: 1553: putch('V'); putch('U'); putch(' '); putch('C');
  4721  002A62  0E56               	movlw	86
  4722  002A64  EC61  F018         	call	_putch
  4723  002A68  0E55               	movlw	85
  4724  002A6A  EC61  F018         	call	_putch
  4725  002A6E  0E20               	movlw	32
  4726  002A70  EC61  F018         	call	_putch
  4727  002A74  0E43               	movlw	67
  4728  002A76  EC61  F018         	call	_putch
  4729                           
  4730                           ;main.c: 1554: break;
  4731  002A7A  D0C9               	goto	l3731
  4732  002A7C                     l3707:
  4733                           
  4734                           ;main.c: 1556: putch('A'); putch(' '); putch('C');
  4735  002A7C  0E41               	movlw	65
  4736  002A7E  EC61  F018         	call	_putch
  4737  002A82  0E20               	movlw	32
  4738  002A84  EC61  F018         	call	_putch
  4739  002A88  0E43               	movlw	67
  4740  002A8A  EC61  F018         	call	_putch
  4741                           
  4742                           ;main.c: 1557: break;
  4743  002A8E  D0BF               	goto	l3731
  4744  002A90                     l3709:
  4745                           
  4746                           ;main.c: 1559: putch('F'); putch('A'); putch(' '); putch('C');
  4747  002A90  0E46               	movlw	70
  4748  002A92  EC61  F018         	call	_putch
  4749  002A96  0E41               	movlw	65
  4750  002A98  EC61  F018         	call	_putch
  4751  002A9C  0E20               	movlw	32
  4752  002A9E  EC61  F018         	call	_putch
  4753  002AA2  0E43               	movlw	67
  4754  002AA4  EC61  F018         	call	_putch
  4755                           
  4756                           ;main.c: 1560: break;
  4757  002AA8  D0B2               	goto	l3731
  4758  002AAA                     l3711:
  4759                           
  4760                           ;main.c: 1562: putch('R'); putch(' '); putch('C');
  4761  002AAA  0E52               	movlw	82
  4762  002AAC  EC61  F018         	call	_putch
  4763  002AB0  0E20               	movlw	32
  4764  002AB2  EC61  F018         	call	_putch
  4765  002AB6  0E43               	movlw	67
  4766  002AB8  EC61  F018         	call	_putch
  4767                           
  4768                           ;main.c: 1563: break;
  4769  002ABC  D0A8               	goto	l3731
  4770  002ABE                     l3713:
  4771                           
  4772                           ;main.c: 1565: putch('F'); putch(' '); putch('A'); putch('A');
  4773  002ABE  0E46               	movlw	70
  4774  002AC0  EC61  F018         	call	_putch
  4775  002AC4  0E20               	movlw	32
  4776  002AC6  EC61  F018         	call	_putch
  4777  002ACA  0E41               	movlw	65
  4778  002ACC  EC61  F018         	call	_putch
  4779  002AD0  0E41               	movlw	65
  4780  002AD2  EC61  F018         	call	_putch
  4781                           
  4782                           ;main.c: 1566: break;
  4783  002AD6  D09B               	goto	l3731
  4784  002AD8                     l3715:
  4785                           
  4786                           ;main.c: 1568: putch('V'); putch(' '); putch('A'); putch('A');
  4787  002AD8  0E56               	movlw	86
  4788  002ADA  EC61  F018         	call	_putch
  4789  002ADE  0E20               	movlw	32
  4790  002AE0  EC61  F018         	call	_putch
  4791  002AE4  0E41               	movlw	65
  4792  002AE6  EC61  F018         	call	_putch
  4793  002AEA  0E41               	movlw	65
  4794  002AEC  EC61  F018         	call	_putch
  4795                           
  4796                           ;main.c: 1569: break;
  4797  002AF0  D08E               	goto	l3731
  4798  002AF2                     l3717:
  4799                           
  4800                           ;main.c: 1571: putch('V'); putch('U'); putch(' '); putch('A'); putch('A');
  4801  002AF2  0E56               	movlw	86
  4802  002AF4  EC61  F018         	call	_putch
  4803  002AF8  0E55               	movlw	85
  4804  002AFA  EC61  F018         	call	_putch
  4805  002AFE  0E20               	movlw	32
  4806  002B00  EC61  F018         	call	_putch
  4807  002B04  0E41               	movlw	65
  4808  002B06  EC61  F018         	call	_putch
  4809  002B0A  0E41               	movlw	65
  4810  002B0C  EC61  F018         	call	_putch
  4811                           
  4812                           ;main.c: 1572: break;
  4813  002B10  D07E               	goto	l3731
  4814  002B12                     l3719:
  4815                           
  4816                           ;main.c: 1574: putch('A'); putch(' '); putch('A'); putch('A');
  4817  002B12  0E41               	movlw	65
  4818  002B14  EC61  F018         	call	_putch
  4819  002B18  0E20               	movlw	32
  4820  002B1A  EC61  F018         	call	_putch
  4821  002B1E  0E41               	movlw	65
  4822  002B20  EC61  F018         	call	_putch
  4823  002B24  0E41               	movlw	65
  4824  002B26  EC61  F018         	call	_putch
  4825                           
  4826                           ;main.c: 1575: break;
  4827  002B2A  D071               	goto	l3731
  4828  002B2C                     l3721:
  4829                           
  4830                           ;main.c: 1577: putch('F'); putch('A'); putch(' '); putch('A'); putch('A');
  4831  002B2C  0E46               	movlw	70
  4832  002B2E  EC61  F018         	call	_putch
  4833  002B32  0E41               	movlw	65
  4834  002B34  EC61  F018         	call	_putch
  4835  002B38  0E20               	movlw	32
  4836  002B3A  EC61  F018         	call	_putch
  4837  002B3E  0E41               	movlw	65
  4838  002B40  EC61  F018         	call	_putch
  4839  002B44  0E41               	movlw	65
  4840  002B46  EC61  F018         	call	_putch
  4841                           
  4842                           ;main.c: 1578: break;
  4843  002B4A  D061               	goto	l3731
  4844  002B4C                     l3723:
  4845                           
  4846                           ;main.c: 1580: putch('R'); putch(' '); putch('A'); putch('A');
  4847  002B4C  0E52               	movlw	82
  4848  002B4E  EC61  F018         	call	_putch
  4849  002B52  0E20               	movlw	32
  4850  002B54  EC61  F018         	call	_putch
  4851  002B58  0E41               	movlw	65
  4852  002B5A  EC61  F018         	call	_putch
  4853  002B5E  0E41               	movlw	65
  4854  002B60  EC61  F018         	call	_putch
  4855                           
  4856                           ;main.c: 1581: break;
  4857  002B64  D054               	goto	l3731
  4858  002B66                     l3725:
  4859                           
  4860                           ;main.c: 1583: putch('E'); putch('N'); putch('D');
  4861  002B66  0E45               	movlw	69
  4862  002B68  EC61  F018         	call	_putch
  4863  002B6C  0E4E               	movlw	78
  4864  002B6E  EC61  F018         	call	_putch
  4865  002B72  0E44               	movlw	68
  4866  002B74  EC61  F018         	call	_putch
  4867                           
  4868                           ;main.c: 1589: }
  4869                           
  4870                           ;main.c: 1588: break;
  4871                           
  4872                           ;main.c: 1587: default:
  4873                           
  4874                           ;main.c: 1586: break;
  4875                           
  4876                           ;main.c: 1585: case TEST:
  4877                           
  4878                           ;main.c: 1584: break;
  4879  002B78  D04A               	goto	l3731
  4880  002B7A                     l3729:
  4881  002B7A  C054  F084         	movff	_state,??_print_simu
  4882  002B7E  C055  F085         	movff	_state+1,??_print_simu+1
  4883                           
  4884                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4885                           ; Switch size 1, requested type "space"
  4886                           ; Number of cases is 1, Range of values is 0 to 0
  4887                           ; switch strategies available:
  4888                           ; Name         Instructions Cycles
  4889                           ; simple_byte            4     3 (average)
  4890                           ;	Chosen strategy is simple_byte
  4891  002B82  0100               	movlb	0	; () banked
  4892  002B84  5185               	movf	(??_print_simu+1)& (0+255),w,b
  4893  002B86  0A00               	xorlw	0	; case 0
  4894  002B88  A4D8               	btfss	status,2,c
  4895  002B8A  D041               	goto	l3731
  4896                           
  4897                           ; BSR set to: 0
  4898                           ; Switch size 1, requested type "space"
  4899                           ; Number of cases is 21, Range of values is 1 to 99
  4900                           ; switch strategies available:
  4901                           ; Name         Instructions Cycles
  4902                           ; simple_byte           64    33 (average)
  4903                           ;	Chosen strategy is simple_byte
  4904  002B8C  0100               	movlb	0	; () banked
  4905  002B8E  5184               	movf	??_print_simu& (0+255),w,b
  4906  002B90  0A01               	xorlw	1	; case 1
  4907  002B92  B4D8               	btfsc	status,2,c
  4908  002B94  D6E9               	goto	l3687
  4909  002B96  0A15               	xorlw	21	; case 20
  4910  002B98  B4D8               	btfsc	status,2,c
  4911  002B9A  D6FB               	goto	l3689
  4912  002B9C  0A01               	xorlw	1	; case 21
  4913  002B9E  B4D8               	btfsc	status,2,c
  4914  002BA0  D705               	goto	l3691
  4915  002BA2  0A03               	xorlw	3	; case 22
  4916  002BA4  B4D8               	btfsc	status,2,c
  4917  002BA6  D72C               	goto	l3697
  4918  002BA8  0A01               	xorlw	1	; case 23
  4919  002BAA  B4D8               	btfsc	status,2,c
  4920  002BAC  D71C               	goto	l3695
  4921  002BAE  0A0F               	xorlw	15	; case 24
  4922  002BB0  B4D8               	btfsc	status,2,c
  4923  002BB2  D736               	goto	l3699
  4924  002BB4  0A01               	xorlw	1	; case 25
  4925  002BB6  B4D8               	btfsc	status,2,c
  4926  002BB8  D706               	goto	l3693
  4927  002BBA  0A07               	xorlw	7	; case 30
  4928  002BBC  B4D8               	btfsc	status,2,c
  4929  002BBE  D73D               	goto	l3701
  4930  002BC0  0A01               	xorlw	1	; case 31
  4931  002BC2  B4D8               	btfsc	status,2,c
  4932  002BC4  D744               	goto	l3703
  4933  002BC6  0A3F               	xorlw	63	; case 32
  4934  002BC8  B4D8               	btfsc	status,2,c
  4935  002BCA  D762               	goto	l3709
  4936  002BCC  0A01               	xorlw	1	; case 33
  4937  002BCE  B4D8               	btfsc	status,2,c
  4938  002BD0  D755               	goto	l3707
  4939  002BD2  0A03               	xorlw	3	; case 34
  4940  002BD4  B4D8               	btfsc	status,2,c
  4941  002BD6  D769               	goto	l3711
  4942  002BD8  0A01               	xorlw	1	; case 35
  4943  002BDA  B4D8               	btfsc	status,2,c
  4944  002BDC  D742               	goto	l3705
  4945  002BDE  0A0B               	xorlw	11	; case 40
  4946  002BE0  B4D8               	btfsc	status,2,c
  4947  002BE2  D76D               	goto	l3713
  4948  002BE4  0A01               	xorlw	1	; case 41
  4949  002BE6  B4D8               	btfsc	status,2,c
  4950  002BE8  D777               	goto	l3715
  4951  002BEA  0A03               	xorlw	3	; case 42
  4952  002BEC  B4D8               	btfsc	status,2,c
  4953  002BEE  D79E               	goto	l3721
  4954  002BF0  0A01               	xorlw	1	; case 43
  4955  002BF2  B4D8               	btfsc	status,2,c
  4956  002BF4  D78E               	goto	l3719
  4957  002BF6  0A07               	xorlw	7	; case 44
  4958  002BF8  B4D8               	btfsc	status,2,c
  4959  002BFA  D7A8               	goto	l3723
  4960  002BFC  0A01               	xorlw	1	; case 45
  4961  002BFE  B4D8               	btfsc	status,2,c
  4962  002C00  D778               	goto	l3717
  4963  002C02  0A4F               	xorlw	79	; case 98
  4964  002C04  B4D8               	btfsc	status,2,c
  4965  002C06  D003               	goto	l3731
  4966  002C08  0A01               	xorlw	1	; case 99
  4967  002C0A  B4D8               	btfsc	status,2,c
  4968  002C0C  D7AC               	goto	l3725
  4969  002C0E                     l3731:
  4970                           
  4971                           ;main.c: 1590: _delay((unsigned long)((10)*(32000000/4000.0)));
  4972  002C0E  0E68               	movlw	104
  4973  002C10  0100               	movlb	0	; () banked
  4974  002C12  6F84               	movwf	??_print_simu& (0+255),b
  4975  002C14  0EE4               	movlw	228
  4976  002C16                     u3757:
  4977  002C16  2EE8               	decfsz	wreg,f,c
  4978  002C18  D7FE               	bra	u3757
  4979  002C1A  2F84               	decfsz	??_print_simu& (0+255),f,b
  4980  002C1C  D7FC               	bra	u3757
  4981  002C1E  F000               	nop	
  4982  002C20  0012               	return		;funcret
  4983  002C22                     __end_of_print_simu:
  4984                           	opt stack 0
  4985                           tblptru	equ	0xFF8
  4986                           tblptrh	equ	0xFF7
  4987                           tblptrl	equ	0xFF6
  4988                           tablat	equ	0xFF5
  4989                           prodh	equ	0xFF4
  4990                           prodl	equ	0xFF3
  4991                           intcon	equ	0xFF2
  4992                           postinc0	equ	0xFEE
  4993                           wreg	equ	0xFE8
  4994                           postdec1	equ	0xFE5
  4995                           fsr1l	equ	0xFE1
  4996                           status	equ	0xFD8
  4997                           
  4998 ;; *************** function _print_batteries *****************
  4999 ;; Defined at:
  5000 ;;		line 1440 in file "main.c"
  5001 ;; Parameters:    Size  Location     Type
  5002 ;;		None
  5003 ;; Auto vars:     Size  Location     Type
  5004 ;;  oneOpDigit      2   40[BANK0 ] unsigned int 
  5005 ;;  tenOpDigit      2   38[BANK0 ] unsigned int 
  5006 ;;  minOpDigit      2   36[BANK0 ] unsigned int 
  5007 ;;  oneDrained      2   23[BANK0 ] unsigned int 
  5008 ;;  tenDrained      2   21[BANK0 ] unsigned int 
  5009 ;;  oneAA           2   19[BANK0 ] unsigned int 
  5010 ;;  tenAA           2   17[BANK0 ] unsigned int 
  5011 ;;  oneC            2   15[BANK0 ] unsigned int 
  5012 ;;  tenC            2   13[BANK0 ] unsigned int 
  5013 ;;  one9V           2   11[BANK0 ] unsigned int 
  5014 ;;  ten9V           2    9[BANK0 ] unsigned int 
  5015 ;;  choneDrained    1   35[BANK0 ] unsigned char 
  5016 ;;  chtenDrained    1   34[BANK0 ] unsigned char 
  5017 ;;  choneAA         1   33[BANK0 ] unsigned char 
  5018 ;;  chtenAA         1   32[BANK0 ] unsigned char 
  5019 ;;  choneC          1   31[BANK0 ] unsigned char 
  5020 ;;  chtenC          1   30[BANK0 ] unsigned char 
  5021 ;;  chone9V         1   29[BANK0 ] unsigned char 
  5022 ;;  chten9V         1   28[BANK0 ] unsigned char 
  5023 ;;  oneOpChar       1   27[BANK0 ] unsigned char 
  5024 ;;  tenOpChar       1   26[BANK0 ] unsigned char 
  5025 ;;  minOpChar       1   25[BANK0 ] unsigned char 
  5026 ;; Return value:  Size  Location     Type
  5027 ;;                  1    wreg      void 
  5028 ;; Registers used:
  5029 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5036 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5037 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;      Totals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;Total ram usage:       34 bytes
  5040 ;; Hardware stack levels used:    1
  5041 ;; Hardware stack levels required when called:    4
  5042 ;; This function calls:
  5043 ;;		___awdiv
  5044 ;;		___awmod
  5045 ;;		___lwdiv
  5046 ;;		___lwmod
  5047 ;;		___wmul
  5048 ;;		_initLCD
  5049 ;;		_lcdInst
  5050 ;;		_putch
  5051 ;; This function is called by:
  5052 ;;		_FSM
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           	psect	text5
  5057  0022EA                     __ptext5:
  5058                           	opt stack 0
  5059  0022EA                     _print_batteries:
  5060                           	opt stack 25
  5061                           
  5062                           ;main.c: 1441: initLCD();
  5063                           
  5064                           ;incstack = 0
  5065  0022EA  EC23  F018         	call	_initLCD	;wreg free
  5066                           
  5067                           ;main.c: 1442: unsigned int ten9V = count9V / 10 + 48;
  5068  0022EE  C0AD  F080         	movff	_count9V,___awdiv@dividend
  5069  0022F2  C0AE  F081         	movff	_count9V+1,___awdiv@dividend+1
  5070  0022F6  0E00               	movlw	0
  5071  0022F8  0100               	movlb	0	; () banked
  5072  0022FA  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  5073  0022FC  0E0A               	movlw	10
  5074  0022FE  6F82               	movwf	___awdiv@divisor& (0+255),b
  5075  002300  EC7B  F016         	call	___awdiv	;wreg free
  5076  002304  0E30               	movlw	48
  5077  002306  0100               	movlb	0	; () banked
  5078  002308  2580               	addwf	?___awdiv& (0+255),w,b
  5079  00230A  0100               	movlb	0	; () banked
  5080  00230C  6F89               	movwf	print_batteries@ten9V& (0+255),b
  5081  00230E  0E00               	movlw	0
  5082  002310  0100               	movlb	0	; () banked
  5083  002312  2181               	addwfc	(?___awdiv+1)& (0+255),w,b
  5084  002314  0100               	movlb	0	; () banked
  5085  002316  6F8A               	movwf	(print_batteries@ten9V+1)& (0+255),b
  5086                           
  5087                           ;main.c: 1443: unsigned int one9V = count9V % 10 + 48;
  5088  002318  C0AD  F080         	movff	_count9V,___awmod@dividend
  5089  00231C  C0AE  F081         	movff	_count9V+1,___awmod@dividend+1
  5090  002320  0E00               	movlw	0
  5091  002322  0100               	movlb	0	; () banked
  5092  002324  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5093  002326  0E0A               	movlw	10
  5094  002328  6F82               	movwf	___awmod@divisor& (0+255),b
  5095  00232A  ECDA  F016         	call	___awmod	;wreg free
  5096  00232E  0E30               	movlw	48
  5097  002330  0100               	movlb	0	; () banked
  5098  002332  2580               	addwf	?___awmod& (0+255),w,b
  5099  002334  0100               	movlb	0	; () banked
  5100  002336  6F8B               	movwf	print_batteries@one9V& (0+255),b
  5101  002338  0E00               	movlw	0
  5102  00233A  0100               	movlb	0	; () banked
  5103  00233C  2181               	addwfc	(?___awmod+1)& (0+255),w,b
  5104  00233E  0100               	movlb	0	; () banked
  5105  002340  6F8C               	movwf	(print_batteries@one9V+1)& (0+255),b
  5106                           
  5107                           ;main.c: 1444: unsigned int tenC = countC / 10 + 48;
  5108  002342  C0B1  F080         	movff	_countC,___awdiv@dividend
  5109  002346  C0B2  F081         	movff	_countC+1,___awdiv@dividend+1
  5110  00234A  0E00               	movlw	0
  5111  00234C  0100               	movlb	0	; () banked
  5112  00234E  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  5113  002350  0E0A               	movlw	10
  5114  002352  6F82               	movwf	___awdiv@divisor& (0+255),b
  5115  002354  EC7B  F016         	call	___awdiv	;wreg free
  5116  002358  0E30               	movlw	48
  5117  00235A  0100               	movlb	0	; () banked
  5118  00235C  2580               	addwf	?___awdiv& (0+255),w,b
  5119  00235E  0100               	movlb	0	; () banked
  5120  002360  6F8D               	movwf	print_batteries@tenC& (0+255),b
  5121  002362  0E00               	movlw	0
  5122  002364  0100               	movlb	0	; () banked
  5123  002366  2181               	addwfc	(?___awdiv+1)& (0+255),w,b
  5124  002368  0100               	movlb	0	; () banked
  5125  00236A  6F8E               	movwf	(print_batteries@tenC+1)& (0+255),b
  5126                           
  5127                           ;main.c: 1445: unsigned int oneC = countC % 10 + 48;
  5128  00236C  C0B1  F080         	movff	_countC,___awmod@dividend
  5129  002370  C0B2  F081         	movff	_countC+1,___awmod@dividend+1
  5130  002374  0E00               	movlw	0
  5131  002376  0100               	movlb	0	; () banked
  5132  002378  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5133  00237A  0E0A               	movlw	10
  5134  00237C  6F82               	movwf	___awmod@divisor& (0+255),b
  5135  00237E  ECDA  F016         	call	___awmod	;wreg free
  5136  002382  0E30               	movlw	48
  5137  002384  0100               	movlb	0	; () banked
  5138  002386  2580               	addwf	?___awmod& (0+255),w,b
  5139  002388  0100               	movlb	0	; () banked
  5140  00238A  6F8F               	movwf	print_batteries@oneC& (0+255),b
  5141  00238C  0E00               	movlw	0
  5142  00238E  0100               	movlb	0	; () banked
  5143  002390  2181               	addwfc	(?___awmod+1)& (0+255),w,b
  5144  002392  0100               	movlb	0	; () banked
  5145  002394  6F90               	movwf	(print_batteries@oneC+1)& (0+255),b
  5146                           
  5147                           ;main.c: 1446: unsigned int tenAA = countAA / 10 + 48;
  5148  002396  C0AF  F080         	movff	_countAA,___awdiv@dividend
  5149  00239A  C0B0  F081         	movff	_countAA+1,___awdiv@dividend+1
  5150  00239E  0E00               	movlw	0
  5151  0023A0  0100               	movlb	0	; () banked
  5152  0023A2  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  5153  0023A4  0E0A               	movlw	10
  5154  0023A6  6F82               	movwf	___awdiv@divisor& (0+255),b
  5155  0023A8  EC7B  F016         	call	___awdiv	;wreg free
  5156  0023AC  0E30               	movlw	48
  5157  0023AE  0100               	movlb	0	; () banked
  5158  0023B0  2580               	addwf	?___awdiv& (0+255),w,b
  5159  0023B2  0100               	movlb	0	; () banked
  5160  0023B4  6F91               	movwf	print_batteries@tenAA& (0+255),b
  5161  0023B6  0E00               	movlw	0
  5162  0023B8  0100               	movlb	0	; () banked
  5163  0023BA  2181               	addwfc	(?___awdiv+1)& (0+255),w,b
  5164  0023BC  0100               	movlb	0	; () banked
  5165  0023BE  6F92               	movwf	(print_batteries@tenAA+1)& (0+255),b
  5166                           
  5167                           ;main.c: 1447: unsigned int oneAA = countAA % 10 + 48;
  5168  0023C0  C0AF  F080         	movff	_countAA,___awmod@dividend
  5169  0023C4  C0B0  F081         	movff	_countAA+1,___awmod@dividend+1
  5170  0023C8  0E00               	movlw	0
  5171  0023CA  0100               	movlb	0	; () banked
  5172  0023CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5173  0023CE  0E0A               	movlw	10
  5174  0023D0  6F82               	movwf	___awmod@divisor& (0+255),b
  5175  0023D2  ECDA  F016         	call	___awmod	;wreg free
  5176  0023D6  0E30               	movlw	48
  5177  0023D8  0100               	movlb	0	; () banked
  5178  0023DA  2580               	addwf	?___awmod& (0+255),w,b
  5179  0023DC  0100               	movlb	0	; () banked
  5180  0023DE  6F93               	movwf	print_batteries@oneAA& (0+255),b
  5181  0023E0  0E00               	movlw	0
  5182  0023E2  0100               	movlb	0	; () banked
  5183  0023E4  2181               	addwfc	(?___awmod+1)& (0+255),w,b
  5184  0023E6  0100               	movlb	0	; () banked
  5185  0023E8  6F94               	movwf	(print_batteries@oneAA+1)& (0+255),b
  5186                           
  5187                           ;main.c: 1448: unsigned int tenDrained = countDead / 10 + 48;
  5188  0023EA  C0B3  F080         	movff	_countDead,___awdiv@dividend
  5189  0023EE  C0B4  F081         	movff	_countDead+1,___awdiv@dividend+1
  5190  0023F2  0E00               	movlw	0
  5191  0023F4  0100               	movlb	0	; () banked
  5192  0023F6  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  5193  0023F8  0E0A               	movlw	10
  5194  0023FA  6F82               	movwf	___awdiv@divisor& (0+255),b
  5195  0023FC  EC7B  F016         	call	___awdiv	;wreg free
  5196  002400  0E30               	movlw	48
  5197  002402  0100               	movlb	0	; () banked
  5198  002404  2580               	addwf	?___awdiv& (0+255),w,b
  5199  002406  0100               	movlb	0	; () banked
  5200  002408  6F95               	movwf	print_batteries@tenDrained& (0+255),b
  5201  00240A  0E00               	movlw	0
  5202  00240C  0100               	movlb	0	; () banked
  5203  00240E  2181               	addwfc	(?___awdiv+1)& (0+255),w,b
  5204  002410  0100               	movlb	0	; () banked
  5205  002412  6F96               	movwf	(print_batteries@tenDrained+1)& (0+255),b
  5206                           
  5207                           ;main.c: 1449: unsigned int oneDrained = countDead % 10 + 48;
  5208  002414  C0B3  F080         	movff	_countDead,___awmod@dividend
  5209  002418  C0B4  F081         	movff	_countDead+1,___awmod@dividend+1
  5210  00241C  0E00               	movlw	0
  5211  00241E  0100               	movlb	0	; () banked
  5212  002420  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5213  002422  0E0A               	movlw	10
  5214  002424  6F82               	movwf	___awmod@divisor& (0+255),b
  5215  002426  ECDA  F016         	call	___awmod	;wreg free
  5216  00242A  0E30               	movlw	48
  5217  00242C  0100               	movlb	0	; () banked
  5218  00242E  2580               	addwf	?___awmod& (0+255),w,b
  5219  002430  0100               	movlb	0	; () banked
  5220  002432  6F97               	movwf	print_batteries@oneDrained& (0+255),b
  5221  002434  0E00               	movlw	0
  5222  002436  0100               	movlb	0	; () banked
  5223  002438  2181               	addwfc	(?___awmod+1)& (0+255),w,b
  5224  00243A  0100               	movlb	0	; () banked
  5225  00243C  6F98               	movwf	(print_batteries@oneDrained+1)& (0+255),b
  5226                           
  5227                           ;main.c: 1451: unsigned int minOpDigit = operation_time / 60;
  5228  00243E  C0B5  F080         	movff	_operation_time,___lwdiv@dividend
  5229  002442  C0B6  F081         	movff	_operation_time+1,___lwdiv@dividend+1
  5230  002446  0E00               	movlw	0
  5231  002448  0100               	movlb	0	; () banked
  5232  00244A  6F83               	movwf	(___lwdiv@divisor+1)& (0+255),b
  5233  00244C  0E3C               	movlw	60
  5234  00244E  6F82               	movwf	___lwdiv@divisor& (0+255),b
  5235  002450  EC2B  F017         	call	___lwdiv	;wreg free
  5236  002454  C080  F0A4         	movff	?___lwdiv,print_batteries@minOpDigit
  5237  002458  C081  F0A5         	movff	?___lwdiv+1,print_batteries@minOpDigit+1
  5238                           
  5239                           ;main.c: 1452: unsigned int tenOpDigit = operation_time - minOpDigit * 60;
  5240  00245C  C0A4  F080         	movff	print_batteries@minOpDigit,___wmul@multiplier
  5241  002460  C0A5  F081         	movff	print_batteries@minOpDigit+1,___wmul@multiplier+1
  5242  002464  0E00               	movlw	0
  5243  002466  0100               	movlb	0	; () banked
  5244  002468  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5245  00246A  0E3C               	movlw	60
  5246  00246C  6F82               	movwf	___wmul@multiplicand& (0+255),b
  5247  00246E  EC46  F018         	call	___wmul	;wreg free
  5248  002472  0100               	movlb	0	; () banked
  5249  002474  1F80               	comf	?___wmul& (0+255),f,b
  5250  002476  0100               	movlb	0	; () banked
  5251  002478  1F81               	comf	(?___wmul+1)& (0+255),f,b
  5252  00247A  0100               	movlb	0	; () banked
  5253  00247C  4B80               	infsnz	?___wmul& (0+255),f,b
  5254  00247E  2B81               	incf	(?___wmul+1)& (0+255),f,b
  5255  002480  0100               	movlb	0	; () banked
  5256  002482  51B5               	movf	_operation_time& (0+255),w,b
  5257  002484  0100               	movlb	0	; () banked
  5258  002486  2580               	addwf	?___wmul& (0+255),w,b
  5259  002488  0100               	movlb	0	; () banked
  5260  00248A  6FA6               	movwf	print_batteries@tenOpDigit& (0+255),b
  5261  00248C  0100               	movlb	0	; () banked
  5262  00248E  51B6               	movf	(_operation_time+1)& (0+255),w,b
  5263  002490  0100               	movlb	0	; () banked
  5264  002492  2181               	addwfc	(?___wmul+1)& (0+255),w,b
  5265  002494  0100               	movlb	0	; () banked
  5266  002496  6FA7               	movwf	(print_batteries@tenOpDigit+1)& (0+255),b
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;main.c: 1453: tenOpDigit /= 10;
  5270  002498  C0A6  F080         	movff	print_batteries@tenOpDigit,___lwdiv@dividend
  5271  00249C  C0A7  F081         	movff	print_batteries@tenOpDigit+1,___lwdiv@dividend+1
  5272  0024A0  0E00               	movlw	0
  5273  0024A2  0100               	movlb	0	; () banked
  5274  0024A4  6F83               	movwf	(___lwdiv@divisor+1)& (0+255),b
  5275  0024A6  0E0A               	movlw	10
  5276  0024A8  6F82               	movwf	___lwdiv@divisor& (0+255),b
  5277  0024AA  EC2B  F017         	call	___lwdiv	;wreg free
  5278  0024AE  C080  F0A6         	movff	?___lwdiv,print_batteries@tenOpDigit
  5279  0024B2  C081  F0A7         	movff	?___lwdiv+1,print_batteries@tenOpDigit+1
  5280                           
  5281                           ;main.c: 1454: tenOpDigit += 48;
  5282  0024B6  0E30               	movlw	48
  5283  0024B8  0100               	movlb	0	; () banked
  5284  0024BA  27A6               	addwf	print_batteries@tenOpDigit& (0+255),f,b
  5285  0024BC  0E00               	movlw	0
  5286  0024BE  23A7               	addwfc	(print_batteries@tenOpDigit+1)& (0+255),f,b
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;main.c: 1455: minOpDigit += 48;
  5290  0024C0  0E30               	movlw	48
  5291  0024C2  0100               	movlb	0	; () banked
  5292  0024C4  27A4               	addwf	print_batteries@minOpDigit& (0+255),f,b
  5293  0024C6  0E00               	movlw	0
  5294  0024C8  23A5               	addwfc	(print_batteries@minOpDigit+1)& (0+255),f,b
  5295                           
  5296                           ; BSR set to: 0
  5297                           ;main.c: 1456: unsigned int oneOpDigit = operation_time % 10;
  5298  0024CA  C0B5  F080         	movff	_operation_time,___lwmod@dividend
  5299  0024CE  C0B6  F081         	movff	_operation_time+1,___lwmod@dividend+1
  5300  0024D2  0E00               	movlw	0
  5301  0024D4  0100               	movlb	0	; () banked
  5302  0024D6  6F83               	movwf	(___lwmod@divisor+1)& (0+255),b
  5303  0024D8  0E0A               	movlw	10
  5304  0024DA  6F82               	movwf	___lwmod@divisor& (0+255),b
  5305  0024DC  ECCE  F017         	call	___lwmod	;wreg free
  5306  0024E0  C080  F0A8         	movff	?___lwmod,print_batteries@oneOpDigit
  5307  0024E4  C081  F0A9         	movff	?___lwmod+1,print_batteries@oneOpDigit+1
  5308                           
  5309                           ;main.c: 1457: while (oneOpDigit > 10) {
  5310  0024E8  D005               	goto	l415
  5311  0024EA                     l3753:
  5312                           
  5313                           ;main.c: 1458: oneOpDigit -= 10;
  5314  0024EA  0E0A               	movlw	10
  5315  0024EC  0100               	movlb	0	; () banked
  5316  0024EE  5FA8               	subwf	print_batteries@oneOpDigit& (0+255),f,b
  5317  0024F0  0E00               	movlw	0
  5318  0024F2  5BA9               	subwfb	(print_batteries@oneOpDigit+1)& (0+255),f,b
  5319  0024F4                     l415:
  5320  0024F4  0100               	movlb	0	; () banked
  5321  0024F6  51A9               	movf	(print_batteries@oneOpDigit+1)& (0+255),w,b
  5322  0024F8  E1F8               	bnz	l3753
  5323  0024FA  0E0B               	movlw	11
  5324  0024FC  0100               	movlb	0	; () banked
  5325  0024FE  5DA8               	subwf	print_batteries@oneOpDigit& (0+255),w,b
  5326  002500  B0D8               	btfsc	status,0,c
  5327  002502  D7F3               	goto	l3753
  5328                           
  5329                           ; BSR set to: 0
  5330                           ;main.c: 1459: }
  5331                           ;main.c: 1460: oneOpDigit += 48;
  5332                           
  5333                           ; BSR set to: 0
  5334  002504  0E30               	movlw	48
  5335  002506  0100               	movlb	0	; () banked
  5336  002508  27A8               	addwf	print_batteries@oneOpDigit& (0+255),f,b
  5337  00250A  0E00               	movlw	0
  5338  00250C  23A9               	addwfc	(print_batteries@oneOpDigit+1)& (0+255),f,b
  5339                           
  5340                           ; BSR set to: 0
  5341                           ;main.c: 1461: unsigned char minOpChar = minOpDigit;
  5342  00250E  C0A4  F099         	movff	print_batteries@minOpDigit,print_batteries@minOpChar
  5343                           
  5344                           ; BSR set to: 0
  5345                           ;main.c: 1462: unsigned char tenOpChar = tenOpDigit;
  5346  002512  C0A6  F09A         	movff	print_batteries@tenOpDigit,print_batteries@tenOpChar
  5347                           
  5348                           ; BSR set to: 0
  5349                           ;main.c: 1463: unsigned char oneOpChar = oneOpDigit;
  5350  002516  C0A8  F09B         	movff	print_batteries@oneOpDigit,print_batteries@oneOpChar
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;main.c: 1465: unsigned char chten9V;
  5354                           ;main.c: 1466: chten9V = ten9V;
  5355  00251A  C089  F09C         	movff	print_batteries@ten9V,print_batteries@chten9V
  5356                           
  5357                           ; BSR set to: 0
  5358                           ;main.c: 1467: unsigned char chone9V;
  5359                           ;main.c: 1468: chone9V = one9V;
  5360  00251E  C08B  F09D         	movff	print_batteries@one9V,print_batteries@chone9V
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;main.c: 1469: unsigned char chtenC;
  5364                           ;main.c: 1470: chtenC = tenC;
  5365  002522  C08D  F09E         	movff	print_batteries@tenC,print_batteries@chtenC
  5366                           
  5367                           ; BSR set to: 0
  5368                           ;main.c: 1471: unsigned char choneC;
  5369                           ;main.c: 1472: choneC = oneC;
  5370  002526  C08F  F09F         	movff	print_batteries@oneC,print_batteries@choneC
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;main.c: 1473: unsigned char chtenAA;
  5374                           ;main.c: 1474: chtenAA = tenAA;
  5375  00252A  C091  F0A0         	movff	print_batteries@tenAA,print_batteries@chtenAA
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;main.c: 1475: unsigned char choneAA;
  5379                           ;main.c: 1476: choneAA = oneAA;
  5380  00252E  C093  F0A1         	movff	print_batteries@oneAA,print_batteries@choneAA
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;main.c: 1477: unsigned char chtenDrained;
  5384                           ;main.c: 1478: chtenDrained = tenDrained;
  5385  002532  C095  F0A2         	movff	print_batteries@tenDrained,print_batteries@chtenDrained
  5386                           
  5387                           ; BSR set to: 0
  5388                           ;main.c: 1479: unsigned char choneDrained;
  5389                           ;main.c: 1480: choneDrained = oneDrained;
  5390  002536  C097  F0A3         	movff	print_batteries@oneDrained,print_batteries@choneDrained
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;main.c: 1481: putch('9');
  5394  00253A  0E39               	movlw	57
  5395  00253C  EC61  F018         	call	_putch
  5396                           
  5397                           ;main.c: 1482: putch('V');
  5398  002540  0E56               	movlw	86
  5399  002542  EC61  F018         	call	_putch
  5400                           
  5401                           ;main.c: 1483: putch(':');
  5402  002546  0E3A               	movlw	58
  5403  002548  EC61  F018         	call	_putch
  5404                           
  5405                           ;main.c: 1484: putch(chten9V);
  5406  00254C  0100               	movlb	0	; () banked
  5407  00254E  519C               	movf	print_batteries@chten9V& (0+255),w,b
  5408  002550  EC61  F018         	call	_putch
  5409                           
  5410                           ;main.c: 1485: putch(chone9V);
  5411  002554  0100               	movlb	0	; () banked
  5412  002556  519D               	movf	print_batteries@chone9V& (0+255),w,b
  5413  002558  EC61  F018         	call	_putch
  5414                           
  5415                           ;main.c: 1486: putch(' ');
  5416  00255C  0E20               	movlw	32
  5417  00255E  EC61  F018         	call	_putch
  5418                           
  5419                           ;main.c: 1487: putch('C');
  5420  002562  0E43               	movlw	67
  5421  002564  EC61  F018         	call	_putch
  5422                           
  5423                           ;main.c: 1488: putch(':');
  5424  002568  0E3A               	movlw	58
  5425  00256A  EC61  F018         	call	_putch
  5426                           
  5427                           ;main.c: 1489: putch(chtenC);
  5428  00256E  0100               	movlb	0	; () banked
  5429  002570  519E               	movf	print_batteries@chtenC& (0+255),w,b
  5430  002572  EC61  F018         	call	_putch
  5431                           
  5432                           ;main.c: 1490: putch(choneC);
  5433  002576  0100               	movlb	0	; () banked
  5434  002578  519F               	movf	print_batteries@choneC& (0+255),w,b
  5435  00257A  EC61  F018         	call	_putch
  5436                           
  5437                           ;main.c: 1491: putch(' ');
  5438  00257E  0E20               	movlw	32
  5439  002580  EC61  F018         	call	_putch
  5440                           
  5441                           ;main.c: 1492: putch('A');
  5442  002584  0E41               	movlw	65
  5443  002586  EC61  F018         	call	_putch
  5444                           
  5445                           ;main.c: 1493: putch('A');
  5446  00258A  0E41               	movlw	65
  5447  00258C  EC61  F018         	call	_putch
  5448                           
  5449                           ;main.c: 1494: putch(':');
  5450  002590  0E3A               	movlw	58
  5451  002592  EC61  F018         	call	_putch
  5452                           
  5453                           ;main.c: 1495: putch(chtenAA);
  5454  002596  0100               	movlb	0	; () banked
  5455  002598  51A0               	movf	print_batteries@chtenAA& (0+255),w,b
  5456  00259A  EC61  F018         	call	_putch
  5457                           
  5458                           ;main.c: 1496: putch(choneAA);
  5459  00259E  0100               	movlb	0	; () banked
  5460  0025A0  51A1               	movf	print_batteries@choneAA& (0+255),w,b
  5461  0025A2  EC61  F018         	call	_putch
  5462                           
  5463                           ;main.c: 1497: lcdInst(0b11000000);;
  5464  0025A6  0EC0               	movlw	192
  5465  0025A8  EC69  F018         	call	_lcdInst
  5466                           
  5467                           ;main.c: 1498: putch('D');putch('R');putch('N');putch(':');
  5468  0025AC  0E44               	movlw	68
  5469  0025AE  EC61  F018         	call	_putch
  5470  0025B2  0E52               	movlw	82
  5471  0025B4  EC61  F018         	call	_putch
  5472  0025B8  0E4E               	movlw	78
  5473  0025BA  EC61  F018         	call	_putch
  5474  0025BE  0E3A               	movlw	58
  5475  0025C0  EC61  F018         	call	_putch
  5476                           
  5477                           ;main.c: 1499: putch(chtenDrained);
  5478  0025C4  0100               	movlb	0	; () banked
  5479  0025C6  51A2               	movf	print_batteries@chtenDrained& (0+255),w,b
  5480  0025C8  EC61  F018         	call	_putch
  5481                           
  5482                           ;main.c: 1500: putch(choneDrained);
  5483  0025CC  0100               	movlb	0	; () banked
  5484  0025CE  51A3               	movf	print_batteries@choneDrained& (0+255),w,b
  5485  0025D0  EC61  F018         	call	_putch
  5486                           
  5487                           ;main.c: 1501: putch(' ');
  5488  0025D4  0E20               	movlw	32
  5489  0025D6  EC61  F018         	call	_putch
  5490                           
  5491                           ;main.c: 1502: putch('T');
  5492  0025DA  0E54               	movlw	84
  5493  0025DC  EC61  F018         	call	_putch
  5494                           
  5495                           ;main.c: 1503: putch(':'); putch(' ');
  5496  0025E0  0E3A               	movlw	58
  5497  0025E2  EC61  F018         	call	_putch
  5498  0025E6  0E20               	movlw	32
  5499  0025E8  EC61  F018         	call	_putch
  5500                           
  5501                           ;main.c: 1504: putch(minOpChar); putch(':'); putch(tenOpChar); putch(oneOpChar);
  5502  0025EC  0100               	movlb	0	; () banked
  5503  0025EE  5199               	movf	print_batteries@minOpChar& (0+255),w,b
  5504  0025F0  EC61  F018         	call	_putch
  5505  0025F4  0E3A               	movlw	58
  5506  0025F6  EC61  F018         	call	_putch
  5507  0025FA  0100               	movlb	0	; () banked
  5508  0025FC  519A               	movf	print_batteries@tenOpChar& (0+255),w,b
  5509  0025FE  EC61  F018         	call	_putch
  5510  002602  0100               	movlb	0	; () banked
  5511  002604  519B               	movf	print_batteries@oneOpChar& (0+255),w,b
  5512  002606  EC61  F018         	call	_putch
  5513                           
  5514                           ;main.c: 1505: _delay((unsigned long)((10)*(32000000/4000.0)));
  5515  00260A  0E68               	movlw	104
  5516  00260C  0100               	movlb	0	; () banked
  5517  00260E  6F88               	movwf	??_print_batteries& (0+255),b
  5518  002610  0EE4               	movlw	228
  5519  002612                     u3767:
  5520  002612  2EE8               	decfsz	wreg,f,c
  5521  002614  D7FE               	bra	u3767
  5522  002616  2F88               	decfsz	??_print_batteries& (0+255),f,b
  5523  002618  D7FC               	bra	u3767
  5524  00261A  F000               	nop	
  5525  00261C  0012               	return		;funcret
  5526  00261E                     __end_of_print_batteries:
  5527                           	opt stack 0
  5528                           tblptru	equ	0xFF8
  5529                           tblptrh	equ	0xFF7
  5530                           tblptrl	equ	0xFF6
  5531                           tablat	equ	0xFF5
  5532                           prodh	equ	0xFF4
  5533                           prodl	equ	0xFF3
  5534                           intcon	equ	0xFF2
  5535                           postinc0	equ	0xFEE
  5536                           wreg	equ	0xFE8
  5537                           postdec1	equ	0xFE5
  5538                           fsr1l	equ	0xFE1
  5539                           status	equ	0xFD8
  5540                           
  5541 ;; *************** function _putch *****************
  5542 ;; Defined at:
  5543 ;;		line 31 in file "lcd.c"
  5544 ;; Parameters:    Size  Location     Type
  5545 ;;  data            1    wreg     unsigned char 
  5546 ;; Auto vars:     Size  Location     Type
  5547 ;;  data            1    2[BANK0 ] unsigned char 
  5548 ;; Return value:  Size  Location     Type
  5549 ;;                  1    wreg      void 
  5550 ;; Registers used:
  5551 ;;		wreg, status,2, status,0, cstack
  5552 ;; Tracked objects:
  5553 ;;		On entry : 0/0
  5554 ;;		On exit  : 0/0
  5555 ;;		Unchanged: 0/0
  5556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5560 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5561 ;;Total ram usage:        1 bytes
  5562 ;; Hardware stack levels used:    1
  5563 ;; Hardware stack levels required when called:    2
  5564 ;; This function calls:
  5565 ;;		_lcdNibble
  5566 ;; This function is called by:
  5567 ;;		_keypad
  5568 ;;		_print_batteries
  5569 ;;		_print_simu
  5570 ;;		_intro
  5571 ;;		_running
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           	psect	text6
  5576  0030C2                     __ptext6:
  5577                           	opt stack 0
  5578  0030C2                     _putch:
  5579                           	opt stack 27
  5580                           
  5581                           ;incstack = 0
  5582                           ;putch@data stored from wreg
  5583  0030C2  0100               	movlb	0	; () banked
  5584  0030C4  6F82               	movwf	putch@data& (0+255),b
  5585                           
  5586                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  5587  0030C6  848C               	bsf	3980,2,c	;volatile
  5588                           
  5589                           ;lcd.c: 33: lcdNibble(data);
  5590  0030C8  0100               	movlb	0	; () banked
  5591  0030CA  5182               	movf	putch@data& (0+255),w,b
  5592  0030CC  EC67  F017         	call	_lcdNibble
  5593  0030D0  0012               	return		;funcret
  5594  0030D2                     __end_of_putch:
  5595                           	opt stack 0
  5596                           tblptru	equ	0xFF8
  5597                           tblptrh	equ	0xFF7
  5598                           tblptrl	equ	0xFF6
  5599                           tablat	equ	0xFF5
  5600                           prodh	equ	0xFF4
  5601                           prodl	equ	0xFF3
  5602                           intcon	equ	0xFF2
  5603                           postinc0	equ	0xFEE
  5604                           wreg	equ	0xFE8
  5605                           postdec1	equ	0xFE5
  5606                           fsr1l	equ	0xFE1
  5607                           status	equ	0xFD8
  5608                           
  5609 ;; *************** function _initLCD *****************
  5610 ;; Defined at:
  5611 ;;		line 14 in file "lcd.c"
  5612 ;; Parameters:    Size  Location     Type
  5613 ;;		None
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;		None
  5616 ;; Return value:  Size  Location     Type
  5617 ;;                  1    wreg      void 
  5618 ;; Registers used:
  5619 ;;		wreg, status,2, status,0, cstack
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5628 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5629 ;;Total ram usage:        1 bytes
  5630 ;; Hardware stack levels used:    1
  5631 ;; Hardware stack levels required when called:    3
  5632 ;; This function calls:
  5633 ;;		_lcdInst
  5634 ;; This function is called by:
  5635 ;;		_keypad
  5636 ;;		_print_batteries
  5637 ;;		_print_simu
  5638 ;;		_intro
  5639 ;;		_running
  5640 ;; This function uses a non-reentrant model
  5641 ;;
  5642                           
  5643                           	psect	text7
  5644  003046                     __ptext7:
  5645                           	opt stack 0
  5646  003046                     _initLCD:
  5647                           	opt stack 25
  5648                           
  5649                           ;lcd.c: 15: _delay((unsigned long)((15)*(32000000/4000.0)));
  5650                           
  5651                           ;incstack = 0
  5652  003046  0E9C               	movlw	156
  5653  003048  0100               	movlb	0	; () banked
  5654  00304A  6F83               	movwf	??_initLCD& (0+255),b
  5655  00304C  0ED7               	movlw	215
  5656  00304E                     u3777:
  5657  00304E  2EE8               	decfsz	wreg,f,c
  5658  003050  D7FE               	bra	u3777
  5659  003052  2F83               	decfsz	??_initLCD& (0+255),f,b
  5660  003054  D7FC               	bra	u3777
  5661                           
  5662                           ;lcd.c: 16: lcdInst(0b00110011);
  5663  003056  0E33               	movlw	51
  5664  003058  EC69  F018         	call	_lcdInst
  5665                           
  5666                           ;lcd.c: 17: lcdInst(0b00110010);
  5667  00305C  0E32               	movlw	50
  5668  00305E  EC69  F018         	call	_lcdInst
  5669                           
  5670                           ;lcd.c: 18: lcdInst(0b00101000);
  5671  003062  0E28               	movlw	40
  5672  003064  EC69  F018         	call	_lcdInst
  5673                           
  5674                           ;lcd.c: 19: lcdInst(0b00001111);
  5675  003068  0E0F               	movlw	15
  5676  00306A  EC69  F018         	call	_lcdInst
  5677                           
  5678                           ;lcd.c: 20: lcdInst(0b00000110);
  5679  00306E  0E06               	movlw	6
  5680  003070  EC69  F018         	call	_lcdInst
  5681                           
  5682                           ;lcd.c: 21: lcdInst(0b00000001);
  5683  003074  0E01               	movlw	1
  5684  003076  EC69  F018         	call	_lcdInst
  5685                           
  5686                           ;lcd.c: 22: _delay((unsigned long)((15)*(32000000/4000.0)));
  5687  00307A  0E9C               	movlw	156
  5688  00307C  0100               	movlb	0	; () banked
  5689  00307E  6F83               	movwf	??_initLCD& (0+255),b
  5690  003080  0ED7               	movlw	215
  5691  003082                     u3787:
  5692  003082  2EE8               	decfsz	wreg,f,c
  5693  003084  D7FE               	bra	u3787
  5694  003086  2F83               	decfsz	??_initLCD& (0+255),f,b
  5695  003088  D7FC               	bra	u3787
  5696  00308A  0012               	return		;funcret
  5697  00308C                     __end_of_initLCD:
  5698                           	opt stack 0
  5699                           tblptru	equ	0xFF8
  5700                           tblptrh	equ	0xFF7
  5701                           tblptrl	equ	0xFF6
  5702                           tablat	equ	0xFF5
  5703                           prodh	equ	0xFF4
  5704                           prodl	equ	0xFF3
  5705                           intcon	equ	0xFF2
  5706                           postinc0	equ	0xFEE
  5707                           wreg	equ	0xFE8
  5708                           postdec1	equ	0xFE5
  5709                           fsr1l	equ	0xFE1
  5710                           status	equ	0xFD8
  5711                           
  5712 ;; *************** function _lcdInst *****************
  5713 ;; Defined at:
  5714 ;;		line 26 in file "lcd.c"
  5715 ;; Parameters:    Size  Location     Type
  5716 ;;  data            1    wreg     unsigned char 
  5717 ;; Auto vars:     Size  Location     Type
  5718 ;;  data            1    2[BANK0 ] unsigned char 
  5719 ;; Return value:  Size  Location     Type
  5720 ;;                  1    wreg      void 
  5721 ;; Registers used:
  5722 ;;		wreg, status,2, status,0, cstack
  5723 ;; Tracked objects:
  5724 ;;		On entry : 0/0
  5725 ;;		On exit  : 0/0
  5726 ;;		Unchanged: 0/0
  5727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5731 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5732 ;;Total ram usage:        1 bytes
  5733 ;; Hardware stack levels used:    1
  5734 ;; Hardware stack levels required when called:    2
  5735 ;; This function calls:
  5736 ;;		_lcdNibble
  5737 ;; This function is called by:
  5738 ;;		_print_batteries
  5739 ;;		_initLCD
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           	psect	text8
  5744  0030D2                     __ptext8:
  5745                           	opt stack 0
  5746  0030D2                     _lcdInst:
  5747                           	opt stack 25
  5748                           
  5749                           ;incstack = 0
  5750                           ;lcdInst@data stored from wreg
  5751  0030D2  0100               	movlb	0	; () banked
  5752  0030D4  6F82               	movwf	lcdInst@data& (0+255),b
  5753                           
  5754                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  5755  0030D6  948C               	bcf	3980,2,c	;volatile
  5756                           
  5757                           ;lcd.c: 28: lcdNibble(data);
  5758  0030D8  0100               	movlb	0	; () banked
  5759  0030DA  5182               	movf	lcdInst@data& (0+255),w,b
  5760  0030DC  EC67  F017         	call	_lcdNibble
  5761  0030E0  0012               	return		;funcret
  5762  0030E2                     __end_of_lcdInst:
  5763                           	opt stack 0
  5764                           tblptru	equ	0xFF8
  5765                           tblptrh	equ	0xFF7
  5766                           tblptrl	equ	0xFF6
  5767                           tablat	equ	0xFF5
  5768                           prodh	equ	0xFF4
  5769                           prodl	equ	0xFF3
  5770                           intcon	equ	0xFF2
  5771                           postinc0	equ	0xFEE
  5772                           wreg	equ	0xFE8
  5773                           postdec1	equ	0xFE5
  5774                           fsr1l	equ	0xFE1
  5775                           status	equ	0xFD8
  5776                           
  5777 ;; *************** function _lcdNibble *****************
  5778 ;; Defined at:
  5779 ;;		line 36 in file "lcd.c"
  5780 ;; Parameters:    Size  Location     Type
  5781 ;;  data            1    wreg     unsigned char 
  5782 ;; Auto vars:     Size  Location     Type
  5783 ;;  data            1    1[BANK0 ] unsigned char 
  5784 ;;  temp            1    0[BANK0 ] unsigned char 
  5785 ;; Return value:  Size  Location     Type
  5786 ;;                  1    wreg      void 
  5787 ;; Registers used:
  5788 ;;		wreg, status,2, status,0
  5789 ;; Tracked objects:
  5790 ;;		On entry : 0/0
  5791 ;;		On exit  : 0/0
  5792 ;;		Unchanged: 0/0
  5793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5795 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5797 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5798 ;;Total ram usage:        2 bytes
  5799 ;; Hardware stack levels used:    1
  5800 ;; Hardware stack levels required when called:    1
  5801 ;; This function calls:
  5802 ;;		Nothing
  5803 ;; This function is called by:
  5804 ;;		_lcdInst
  5805 ;;		_putch
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           	psect	text9
  5810  002ECE                     __ptext9:
  5811                           	opt stack 0
  5812  002ECE                     _lcdNibble:
  5813                           	opt stack 27
  5814                           
  5815                           ;incstack = 0
  5816                           ;lcdNibble@data stored from wreg
  5817  002ECE  0100               	movlb	0	; () banked
  5818  002ED0  6F81               	movwf	lcdNibble@data& (0+255),b
  5819                           
  5820                           ;lcd.c: 38: char temp = data & 0xF0;
  5821  002ED2  0100               	movlb	0	; () banked
  5822  002ED4  5181               	movf	lcdNibble@data& (0+255),w,b
  5823  002ED6  0BF0               	andlw	240
  5824  002ED8  0100               	movlb	0	; () banked
  5825  002EDA  6F80               	movwf	lcdNibble@temp& (0+255),b
  5826                           
  5827                           ;lcd.c: 39: LATD = LATD & 0x0F;
  5828  002EDC  508C               	movf	3980,w,c	;volatile
  5829  002EDE  0B0F               	andlw	15
  5830  002EE0  6E8C               	movwf	3980,c	;volatile
  5831                           
  5832                           ;lcd.c: 40: LATD = temp | LATD;
  5833  002EE2  0100               	movlb	0	; () banked
  5834  002EE4  5180               	movf	lcdNibble@temp& (0+255),w,b
  5835  002EE6  108C               	iorwf	3980,w,c	;volatile
  5836  002EE8  6E8C               	movwf	3980,c	;volatile
  5837                           
  5838                           ; BSR set to: 0
  5839                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  5840  002EEA  968C               	bcf	3980,3,c	;volatile
  5841                           
  5842                           ; BSR set to: 0
  5843                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
  5844  002EEC  0E42               	movlw	66
  5845  002EEE                     u3797:
  5846  002EEE  2EE8               	decfsz	wreg,f,c
  5847  002EF0  D7FE               	bra	u3797
  5848  002EF2  D000               	nop2	
  5849                           
  5850                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  5851  002EF4  868C               	bsf	3980,3,c	;volatile
  5852                           
  5853                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
  5854  002EF6  0E42               	movlw	66
  5855  002EF8                     u3807:
  5856  002EF8  2EE8               	decfsz	wreg,f,c
  5857  002EFA  D7FE               	bra	u3807
  5858  002EFC  D000               	nop2	
  5859                           
  5860                           ;lcd.c: 47: data = data << 4;
  5861  002EFE  0100               	movlb	0	; () banked
  5862  002F00  3981               	swapf	lcdNibble@data& (0+255),w,b
  5863  002F02  0BF0               	andlw	240
  5864  002F04  0100               	movlb	0	; () banked
  5865  002F06  6F81               	movwf	lcdNibble@data& (0+255),b
  5866                           
  5867                           ;lcd.c: 49: temp = data & 0xF0;
  5868  002F08  0100               	movlb	0	; () banked
  5869  002F0A  5181               	movf	lcdNibble@data& (0+255),w,b
  5870  002F0C  0BF0               	andlw	240
  5871  002F0E  0100               	movlb	0	; () banked
  5872  002F10  6F80               	movwf	lcdNibble@temp& (0+255),b
  5873                           
  5874                           ;lcd.c: 50: LATD = LATD & 0x0F;
  5875  002F12  508C               	movf	3980,w,c	;volatile
  5876  002F14  0B0F               	andlw	15
  5877  002F16  6E8C               	movwf	3980,c	;volatile
  5878                           
  5879                           ;lcd.c: 51: LATD = temp | LATD;
  5880  002F18  0100               	movlb	0	; () banked
  5881  002F1A  5180               	movf	lcdNibble@temp& (0+255),w,b
  5882  002F1C  108C               	iorwf	3980,w,c	;volatile
  5883  002F1E  6E8C               	movwf	3980,c	;volatile
  5884                           
  5885                           ; BSR set to: 0
  5886                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  5887  002F20  968C               	bcf	3980,3,c	;volatile
  5888                           
  5889                           ; BSR set to: 0
  5890                           ;lcd.c: 54: _delay((unsigned long)((25)*(32000000/4000000.0)));
  5891  002F22  0E42               	movlw	66
  5892  002F24                     u3817:
  5893  002F24  2EE8               	decfsz	wreg,f,c
  5894  002F26  D7FE               	bra	u3817
  5895  002F28  D000               	nop2	
  5896                           
  5897                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  5898  002F2A  868C               	bsf	3980,3,c	;volatile
  5899                           
  5900                           ;lcd.c: 56: _delay((unsigned long)((25)*(32000000/4000000.0)));
  5901  002F2C  0E42               	movlw	66
  5902  002F2E                     u3827:
  5903  002F2E  2EE8               	decfsz	wreg,f,c
  5904  002F30  D7FE               	bra	u3827
  5905  002F32  D000               	nop2	
  5906  002F34  0012               	return		;funcret
  5907  002F36                     __end_of_lcdNibble:
  5908                           	opt stack 0
  5909                           tblptru	equ	0xFF8
  5910                           tblptrh	equ	0xFF7
  5911                           tblptrl	equ	0xFF6
  5912                           tablat	equ	0xFF5
  5913                           prodh	equ	0xFF4
  5914                           prodl	equ	0xFF3
  5915                           intcon	equ	0xFF2
  5916                           postinc0	equ	0xFEE
  5917                           wreg	equ	0xFE8
  5918                           postdec1	equ	0xFE5
  5919                           fsr1l	equ	0xFE1
  5920                           status	equ	0xFD8
  5921                           
  5922 ;; *************** function ___wmul *****************
  5923 ;; Defined at:
  5924 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  5925 ;; Parameters:    Size  Location     Type
  5926 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5927 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;  product         2    4[BANK0 ] unsigned int 
  5930 ;; Return value:  Size  Location     Type
  5931 ;;                  2    0[BANK0 ] unsigned int 
  5932 ;; Registers used:
  5933 ;;		wreg, status,2, status,0, prodl, prodh
  5934 ;; Tracked objects:
  5935 ;;		On entry : 0/0
  5936 ;;		On exit  : 0/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5939 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5940 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5942 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5943 ;;Total ram usage:        6 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; Hardware stack levels required when called:    1
  5946 ;; This function calls:
  5947 ;;		Nothing
  5948 ;; This function is called by:
  5949 ;;		_print_batteries
  5950 ;; This function uses a non-reentrant model
  5951 ;;
  5952                           
  5953                           	psect	text10
  5954  00308C                     __ptext10:
  5955                           	opt stack 0
  5956  00308C                     ___wmul:
  5957                           	opt stack 27
  5958                           
  5959                           ;incstack = 0
  5960  00308C  0100               	movlb	0	; () banked
  5961  00308E  5180               	movf	___wmul@multiplier& (0+255),w,b
  5962  003090  0100               	movlb	0	; () banked
  5963  003092  0382               	mulwf	___wmul@multiplicand& (0+255),b
  5964  003094  CFF3 F084          	movff	prodl,___wmul@product
  5965  003098  CFF4 F085          	movff	prodh,___wmul@product+1
  5966  00309C  0100               	movlb	0	; () banked
  5967  00309E  5180               	movf	___wmul@multiplier& (0+255),w,b
  5968  0030A0  0100               	movlb	0	; () banked
  5969  0030A2  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5970  0030A4  50F3               	movf	prodl,w,c
  5971  0030A6  0100               	movlb	0	; () banked
  5972  0030A8  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  5973  0030AA  0100               	movlb	0	; () banked
  5974  0030AC  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5975  0030AE  0100               	movlb	0	; () banked
  5976  0030B0  0382               	mulwf	___wmul@multiplicand& (0+255),b
  5977  0030B2  50F3               	movf	prodl,w,c
  5978  0030B4  0100               	movlb	0	; () banked
  5979  0030B6  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  5980                           
  5981                           ; BSR set to: 0
  5982  0030B8  C084  F080         	movff	___wmul@product,?___wmul
  5983  0030BC  C085  F081         	movff	___wmul@product+1,?___wmul+1
  5984  0030C0  0012               	return	
  5985  0030C2                     __end_of___wmul:
  5986                           	opt stack 0
  5987                           tblptru	equ	0xFF8
  5988                           tblptrh	equ	0xFF7
  5989                           tblptrl	equ	0xFF6
  5990                           tablat	equ	0xFF5
  5991                           prodh	equ	0xFF4
  5992                           prodl	equ	0xFF3
  5993                           intcon	equ	0xFF2
  5994                           postinc0	equ	0xFEE
  5995                           wreg	equ	0xFE8
  5996                           postdec1	equ	0xFE5
  5997                           fsr1l	equ	0xFE1
  5998                           status	equ	0xFD8
  5999                           
  6000 ;; *************** function ___lwmod *****************
  6001 ;; Defined at:
  6002 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6003 ;; Parameters:    Size  Location     Type
  6004 ;;  dividend        2    0[BANK0 ] unsigned int 
  6005 ;;  divisor         2    2[BANK0 ] unsigned int 
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;  counter         1    4[BANK0 ] unsigned char 
  6008 ;; Return value:  Size  Location     Type
  6009 ;;                  2    0[BANK0 ] unsigned int 
  6010 ;; Registers used:
  6011 ;;		wreg, status,2, status,0
  6012 ;; Tracked objects:
  6013 ;;		On entry : 0/0
  6014 ;;		On exit  : 0/0
  6015 ;;		Unchanged: 0/0
  6016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6017 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6018 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6020 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6021 ;;Total ram usage:        5 bytes
  6022 ;; Hardware stack levels used:    1
  6023 ;; Hardware stack levels required when called:    1
  6024 ;; This function calls:
  6025 ;;		Nothing
  6026 ;; This function is called by:
  6027 ;;		_print_batteries
  6028 ;; This function uses a non-reentrant model
  6029 ;;
  6030                           
  6031                           	psect	text11
  6032  002F9C                     __ptext11:
  6033                           	opt stack 0
  6034  002F9C                     ___lwmod:
  6035                           	opt stack 27
  6036                           
  6037                           ; BSR set to: 0
  6038                           ;incstack = 0
  6039  002F9C  0100               	movlb	0	; () banked
  6040  002F9E  5182               	movf	___lwmod@divisor& (0+255),w,b
  6041  002FA0  0100               	movlb	0	; () banked
  6042  002FA2  1183               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6043  002FA4  B4D8               	btfsc	status,2,c
  6044  002FA6  D026               	goto	l892
  6045                           
  6046                           ; BSR set to: 0
  6047  002FA8  0E01               	movlw	1
  6048  002FAA  0100               	movlb	0	; () banked
  6049  002FAC  6F84               	movwf	___lwmod@counter& (0+255),b
  6050  002FAE  D006               	goto	l3667
  6051  002FB0                     l3665:
  6052                           
  6053                           ; BSR set to: 0
  6054  002FB0  0100               	movlb	0	; () banked
  6055  002FB2  90D8               	bcf	status,0,c
  6056  002FB4  3782               	rlcf	___lwmod@divisor& (0+255),f,b
  6057  002FB6  3783               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6058  002FB8  0100               	movlb	0	; () banked
  6059  002FBA  2B84               	incf	___lwmod@counter& (0+255),f,b
  6060  002FBC                     l3667:
  6061                           
  6062                           ; BSR set to: 0
  6063  002FBC  0100               	movlb	0	; () banked
  6064  002FBE  AF83               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6065  002FC0  D7F7               	goto	l3665
  6066  002FC2                     l3669:
  6067                           
  6068                           ; BSR set to: 0
  6069  002FC2  0100               	movlb	0	; () banked
  6070  002FC4  5182               	movf	___lwmod@divisor& (0+255),w,b
  6071  002FC6  0100               	movlb	0	; () banked
  6072  002FC8  5D80               	subwf	___lwmod@dividend& (0+255),w,b
  6073  002FCA  0100               	movlb	0	; () banked
  6074  002FCC  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6075  002FCE  0100               	movlb	0	; () banked
  6076  002FD0  5981               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6077  002FD2  A0D8               	btfss	status,0,c
  6078  002FD4  D008               	goto	l3673
  6079                           
  6080                           ; BSR set to: 0
  6081  002FD6  0100               	movlb	0	; () banked
  6082  002FD8  5182               	movf	___lwmod@divisor& (0+255),w,b
  6083  002FDA  0100               	movlb	0	; () banked
  6084  002FDC  5F80               	subwf	___lwmod@dividend& (0+255),f,b
  6085  002FDE  0100               	movlb	0	; () banked
  6086  002FE0  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6087  002FE2  0100               	movlb	0	; () banked
  6088  002FE4  5B81               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6089  002FE6                     l3673:
  6090                           
  6091                           ; BSR set to: 0
  6092  002FE6  0100               	movlb	0	; () banked
  6093  002FE8  90D8               	bcf	status,0,c
  6094  002FEA  3383               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6095  002FEC  3382               	rrcf	___lwmod@divisor& (0+255),f,b
  6096                           
  6097                           ; BSR set to: 0
  6098  002FEE  0100               	movlb	0	; () banked
  6099  002FF0  2F84               	decfsz	___lwmod@counter& (0+255),f,b
  6100  002FF2  D7E7               	goto	l3669
  6101  002FF4                     l892:
  6102                           
  6103                           ; BSR set to: 0
  6104  002FF4  C080  F080         	movff	___lwmod@dividend,?___lwmod
  6105  002FF8  C081  F081         	movff	___lwmod@dividend+1,?___lwmod+1
  6106                           
  6107                           ; BSR set to: 0
  6108  002FFC  0012               	return		;funcret
  6109  002FFE                     __end_of___lwmod:
  6110                           	opt stack 0
  6111                           tblptru	equ	0xFF8
  6112                           tblptrh	equ	0xFF7
  6113                           tblptrl	equ	0xFF6
  6114                           tablat	equ	0xFF5
  6115                           prodh	equ	0xFF4
  6116                           prodl	equ	0xFF3
  6117                           intcon	equ	0xFF2
  6118                           postinc0	equ	0xFEE
  6119                           wreg	equ	0xFE8
  6120                           postdec1	equ	0xFE5
  6121                           fsr1l	equ	0xFE1
  6122                           status	equ	0xFD8
  6123                           
  6124 ;; *************** function ___lwdiv *****************
  6125 ;; Defined at:
  6126 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;  dividend        2    0[BANK0 ] unsigned int 
  6129 ;;  divisor         2    2[BANK0 ] unsigned int 
  6130 ;; Auto vars:     Size  Location     Type
  6131 ;;  quotient        2    5[BANK0 ] unsigned int 
  6132 ;;  counter         1    4[BANK0 ] unsigned char 
  6133 ;; Return value:  Size  Location     Type
  6134 ;;                  2    0[BANK0 ] unsigned int 
  6135 ;; Registers used:
  6136 ;;		wreg, status,2, status,0
  6137 ;; Tracked objects:
  6138 ;;		On entry : 0/0
  6139 ;;		On exit  : 0/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6142 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6143 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6145 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6146 ;;Total ram usage:        7 bytes
  6147 ;; Hardware stack levels used:    1
  6148 ;; Hardware stack levels required when called:    1
  6149 ;; This function calls:
  6150 ;;		Nothing
  6151 ;; This function is called by:
  6152 ;;		_print_batteries
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           	psect	text12
  6157  002E56                     __ptext12:
  6158                           	opt stack 0
  6159  002E56                     ___lwdiv:
  6160                           	opt stack 27
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;incstack = 0
  6164  002E56  0E00               	movlw	0
  6165  002E58  0100               	movlb	0	; () banked
  6166  002E5A  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6167  002E5C  0E00               	movlw	0
  6168  002E5E  6F85               	movwf	___lwdiv@quotient& (0+255),b
  6169                           
  6170                           ; BSR set to: 0
  6171  002E60  0100               	movlb	0	; () banked
  6172  002E62  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6173  002E64  0100               	movlb	0	; () banked
  6174  002E66  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6175  002E68  B4D8               	btfsc	status,2,c
  6176  002E6A  D02C               	goto	l882
  6177                           
  6178                           ; BSR set to: 0
  6179  002E6C  0E01               	movlw	1
  6180  002E6E  0100               	movlb	0	; () banked
  6181  002E70  6F84               	movwf	___lwdiv@counter& (0+255),b
  6182  002E72  D006               	goto	l3647
  6183  002E74                     l3645:
  6184                           
  6185                           ; BSR set to: 0
  6186  002E74  0100               	movlb	0	; () banked
  6187  002E76  90D8               	bcf	status,0,c
  6188  002E78  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  6189  002E7A  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6190  002E7C  0100               	movlb	0	; () banked
  6191  002E7E  2B84               	incf	___lwdiv@counter& (0+255),f,b
  6192  002E80                     l3647:
  6193                           
  6194                           ; BSR set to: 0
  6195  002E80  0100               	movlb	0	; () banked
  6196  002E82  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6197  002E84  D7F7               	goto	l3645
  6198  002E86                     l3649:
  6199                           
  6200                           ; BSR set to: 0
  6201  002E86  0100               	movlb	0	; () banked
  6202  002E88  90D8               	bcf	status,0,c
  6203  002E8A  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
  6204  002E8C  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6205                           
  6206                           ; BSR set to: 0
  6207  002E8E  0100               	movlb	0	; () banked
  6208  002E90  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6209  002E92  0100               	movlb	0	; () banked
  6210  002E94  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  6211  002E96  0100               	movlb	0	; () banked
  6212  002E98  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6213  002E9A  0100               	movlb	0	; () banked
  6214  002E9C  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6215  002E9E  A0D8               	btfss	status,0,c
  6216  002EA0  D00A               	goto	l3657
  6217                           
  6218                           ; BSR set to: 0
  6219  002EA2  0100               	movlb	0	; () banked
  6220  002EA4  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6221  002EA6  0100               	movlb	0	; () banked
  6222  002EA8  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  6223  002EAA  0100               	movlb	0	; () banked
  6224  002EAC  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6225  002EAE  0100               	movlb	0	; () banked
  6226  002EB0  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6227                           
  6228                           ; BSR set to: 0
  6229  002EB2  0100               	movlb	0	; () banked
  6230  002EB4  8185               	bsf	___lwdiv@quotient& (0+255),0,b
  6231  002EB6                     l3657:
  6232                           
  6233                           ; BSR set to: 0
  6234  002EB6  0100               	movlb	0	; () banked
  6235  002EB8  90D8               	bcf	status,0,c
  6236  002EBA  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6237  002EBC  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  6238                           
  6239                           ; BSR set to: 0
  6240  002EBE  0100               	movlb	0	; () banked
  6241  002EC0  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
  6242  002EC2  D7E1               	goto	l3649
  6243  002EC4                     l882:
  6244                           
  6245                           ; BSR set to: 0
  6246  002EC4  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
  6247  002EC8  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6248                           
  6249                           ; BSR set to: 0
  6250  002ECC  0012               	return		;funcret
  6251  002ECE                     __end_of___lwdiv:
  6252                           	opt stack 0
  6253                           tblptru	equ	0xFF8
  6254                           tblptrh	equ	0xFF7
  6255                           tblptrl	equ	0xFF6
  6256                           tablat	equ	0xFF5
  6257                           prodh	equ	0xFF4
  6258                           prodl	equ	0xFF3
  6259                           intcon	equ	0xFF2
  6260                           postinc0	equ	0xFEE
  6261                           wreg	equ	0xFE8
  6262                           postdec1	equ	0xFE5
  6263                           fsr1l	equ	0xFE1
  6264                           status	equ	0xFD8
  6265                           
  6266 ;; *************** function ___awmod *****************
  6267 ;; Defined at:
  6268 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;  dividend        2    0[BANK0 ] int 
  6271 ;;  divisor         2    2[BANK0 ] int 
  6272 ;; Auto vars:     Size  Location     Type
  6273 ;;  sign            1    5[BANK0 ] unsigned char 
  6274 ;;  counter         1    4[BANK0 ] unsigned char 
  6275 ;; Return value:  Size  Location     Type
  6276 ;;                  2    0[BANK0 ] int 
  6277 ;; Registers used:
  6278 ;;		wreg, status,2, status,0
  6279 ;; Tracked objects:
  6280 ;;		On entry : 0/0
  6281 ;;		On exit  : 0/0
  6282 ;;		Unchanged: 0/0
  6283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6284 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6285 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6287 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6288 ;;Total ram usage:        6 bytes
  6289 ;; Hardware stack levels used:    1
  6290 ;; Hardware stack levels required when called:    1
  6291 ;; This function calls:
  6292 ;;		Nothing
  6293 ;; This function is called by:
  6294 ;;		_keypad
  6295 ;;		_print_batteries
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299                           	psect	text13
  6300  002DB4                     __ptext13:
  6301                           	opt stack 0
  6302  002DB4                     ___awmod:
  6303                           	opt stack 28
  6304                           
  6305                           ; BSR set to: 0
  6306                           ;incstack = 0
  6307  002DB4  0E00               	movlw	0
  6308  002DB6  0100               	movlb	0	; () banked
  6309  002DB8  6F85               	movwf	___awmod@sign& (0+255),b
  6310                           
  6311                           ; BSR set to: 0
  6312  002DBA  0100               	movlb	0	; () banked
  6313  002DBC  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6314  002DBE  D008               	goto	l3611
  6315                           
  6316                           ; BSR set to: 0
  6317  002DC0  0100               	movlb	0	; () banked
  6318  002DC2  6D80               	negf	___awmod@dividend& (0+255),b
  6319  002DC4  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  6320  002DC6  B0D8               	btfsc	status,0,c
  6321  002DC8  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  6322                           
  6323                           ; BSR set to: 0
  6324  002DCA  0E01               	movlw	1
  6325  002DCC  0100               	movlb	0	; () banked
  6326  002DCE  6F85               	movwf	___awmod@sign& (0+255),b
  6327  002DD0                     l3611:
  6328                           
  6329                           ; BSR set to: 0
  6330  002DD0  0100               	movlb	0	; () banked
  6331  002DD2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6332  002DD4  D005               	goto	l3615
  6333                           
  6334                           ; BSR set to: 0
  6335  002DD6  0100               	movlb	0	; () banked
  6336  002DD8  6D82               	negf	___awmod@divisor& (0+255),b
  6337  002DDA  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  6338  002DDC  B0D8               	btfsc	status,0,c
  6339  002DDE  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  6340  002DE0                     l3615:
  6341                           
  6342                           ; BSR set to: 0
  6343  002DE0  0100               	movlb	0	; () banked
  6344  002DE2  5182               	movf	___awmod@divisor& (0+255),w,b
  6345  002DE4  0100               	movlb	0	; () banked
  6346  002DE6  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6347  002DE8  B4D8               	btfsc	status,2,c
  6348  002DEA  D026               	goto	l3631
  6349                           
  6350                           ; BSR set to: 0
  6351  002DEC  0E01               	movlw	1
  6352  002DEE  0100               	movlb	0	; () banked
  6353  002DF0  6F84               	movwf	___awmod@counter& (0+255),b
  6354  002DF2  D006               	goto	l3621
  6355  002DF4                     l3619:
  6356                           
  6357                           ; BSR set to: 0
  6358  002DF4  0100               	movlb	0	; () banked
  6359  002DF6  90D8               	bcf	status,0,c
  6360  002DF8  3782               	rlcf	___awmod@divisor& (0+255),f,b
  6361  002DFA  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6362  002DFC  0100               	movlb	0	; () banked
  6363  002DFE  2B84               	incf	___awmod@counter& (0+255),f,b
  6364  002E00                     l3621:
  6365                           
  6366                           ; BSR set to: 0
  6367  002E00  0100               	movlb	0	; () banked
  6368  002E02  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6369  002E04  D7F7               	goto	l3619
  6370  002E06                     l3623:
  6371                           
  6372                           ; BSR set to: 0
  6373  002E06  0100               	movlb	0	; () banked
  6374  002E08  5182               	movf	___awmod@divisor& (0+255),w,b
  6375  002E0A  0100               	movlb	0	; () banked
  6376  002E0C  5D80               	subwf	___awmod@dividend& (0+255),w,b
  6377  002E0E  0100               	movlb	0	; () banked
  6378  002E10  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  6379  002E12  0100               	movlb	0	; () banked
  6380  002E14  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6381  002E16  A0D8               	btfss	status,0,c
  6382  002E18  D008               	goto	l3627
  6383                           
  6384                           ; BSR set to: 0
  6385  002E1A  0100               	movlb	0	; () banked
  6386  002E1C  5182               	movf	___awmod@divisor& (0+255),w,b
  6387  002E1E  0100               	movlb	0	; () banked
  6388  002E20  5F80               	subwf	___awmod@dividend& (0+255),f,b
  6389  002E22  0100               	movlb	0	; () banked
  6390  002E24  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  6391  002E26  0100               	movlb	0	; () banked
  6392  002E28  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6393  002E2A                     l3627:
  6394                           
  6395                           ; BSR set to: 0
  6396  002E2A  0100               	movlb	0	; () banked
  6397  002E2C  90D8               	bcf	status,0,c
  6398  002E2E  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6399  002E30  3382               	rrcf	___awmod@divisor& (0+255),f,b
  6400                           
  6401                           ; BSR set to: 0
  6402  002E32  0100               	movlb	0	; () banked
  6403  002E34  2F84               	decfsz	___awmod@counter& (0+255),f,b
  6404  002E36  D7E7               	goto	l3623
  6405  002E38                     l3631:
  6406                           
  6407                           ; BSR set to: 0
  6408  002E38  0100               	movlb	0	; () banked
  6409  002E3A  5185               	movf	___awmod@sign& (0+255),w,b
  6410  002E3C  0100               	movlb	0	; () banked
  6411  002E3E  B4D8               	btfsc	status,2,c
  6412  002E40  D005               	goto	l3635
  6413                           
  6414                           ; BSR set to: 0
  6415  002E42  0100               	movlb	0	; () banked
  6416  002E44  6D80               	negf	___awmod@dividend& (0+255),b
  6417  002E46  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  6418  002E48  B0D8               	btfsc	status,0,c
  6419  002E4A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  6420  002E4C                     l3635:
  6421                           
  6422                           ; BSR set to: 0
  6423  002E4C  C080  F080         	movff	___awmod@dividend,?___awmod
  6424  002E50  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  6425  002E54  0012               	return	
  6426  002E56                     __end_of___awmod:
  6427                           	opt stack 0
  6428                           tblptru	equ	0xFF8
  6429                           tblptrh	equ	0xFF7
  6430                           tblptrl	equ	0xFF6
  6431                           tablat	equ	0xFF5
  6432                           prodh	equ	0xFF4
  6433                           prodl	equ	0xFF3
  6434                           intcon	equ	0xFF2
  6435                           postinc0	equ	0xFEE
  6436                           wreg	equ	0xFE8
  6437                           postdec1	equ	0xFE5
  6438                           fsr1l	equ	0xFE1
  6439                           status	equ	0xFD8
  6440                           
  6441 ;; *************** function ___awdiv *****************
  6442 ;; Defined at:
  6443 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;  dividend        2    0[BANK0 ] int 
  6446 ;;  divisor         2    2[BANK0 ] int 
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;  quotient        2    6[BANK0 ] int 
  6449 ;;  sign            1    5[BANK0 ] unsigned char 
  6450 ;;  counter         1    4[BANK0 ] unsigned char 
  6451 ;; Return value:  Size  Location     Type
  6452 ;;                  2    0[BANK0 ] int 
  6453 ;; Registers used:
  6454 ;;		wreg, status,2, status,0
  6455 ;; Tracked objects:
  6456 ;;		On entry : 0/0
  6457 ;;		On exit  : 0/0
  6458 ;;		Unchanged: 0/0
  6459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6460 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6461 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6463 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6464 ;;Total ram usage:        8 bytes
  6465 ;; Hardware stack levels used:    1
  6466 ;; Hardware stack levels required when called:    1
  6467 ;; This function calls:
  6468 ;;		Nothing
  6469 ;; This function is called by:
  6470 ;;		_FSM
  6471 ;;		_keypad
  6472 ;;		_print_batteries
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476                           	psect	text14
  6477  002CF6                     __ptext14:
  6478                           	opt stack 0
  6479  002CF6                     ___awdiv:
  6480                           	opt stack 28
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;incstack = 0
  6484  002CF6  0E00               	movlw	0
  6485  002CF8  0100               	movlb	0	; () banked
  6486  002CFA  6F85               	movwf	___awdiv@sign& (0+255),b
  6487                           
  6488                           ; BSR set to: 0
  6489  002CFC  0100               	movlb	0	; () banked
  6490  002CFE  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6491  002D00  D008               	goto	l3567
  6492                           
  6493                           ; BSR set to: 0
  6494  002D02  0100               	movlb	0	; () banked
  6495  002D04  6D82               	negf	___awdiv@divisor& (0+255),b
  6496  002D06  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6497  002D08  B0D8               	btfsc	status,0,c
  6498  002D0A  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6499                           
  6500                           ; BSR set to: 0
  6501  002D0C  0E01               	movlw	1
  6502  002D0E  0100               	movlb	0	; () banked
  6503  002D10  6F85               	movwf	___awdiv@sign& (0+255),b
  6504  002D12                     l3567:
  6505                           
  6506                           ; BSR set to: 0
  6507  002D12  0100               	movlb	0	; () banked
  6508  002D14  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6509  002D16  D008               	goto	l3573
  6510                           
  6511                           ; BSR set to: 0
  6512  002D18  0100               	movlb	0	; () banked
  6513  002D1A  6D80               	negf	___awdiv@dividend& (0+255),b
  6514  002D1C  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6515  002D1E  B0D8               	btfsc	status,0,c
  6516  002D20  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6517                           
  6518                           ; BSR set to: 0
  6519  002D22  0E01               	movlw	1
  6520  002D24  0100               	movlb	0	; () banked
  6521  002D26  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  6522  002D28                     l3573:
  6523                           
  6524                           ; BSR set to: 0
  6525  002D28  0E00               	movlw	0
  6526  002D2A  0100               	movlb	0	; () banked
  6527  002D2C  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  6528  002D2E  0E00               	movlw	0
  6529  002D30  6F86               	movwf	___awdiv@quotient& (0+255),b
  6530                           
  6531                           ; BSR set to: 0
  6532  002D32  0100               	movlb	0	; () banked
  6533  002D34  5182               	movf	___awdiv@divisor& (0+255),w,b
  6534  002D36  0100               	movlb	0	; () banked
  6535  002D38  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6536  002D3A  B4D8               	btfsc	status,2,c
  6537  002D3C  D02C               	goto	l3595
  6538                           
  6539                           ; BSR set to: 0
  6540  002D3E  0E01               	movlw	1
  6541  002D40  0100               	movlb	0	; () banked
  6542  002D42  6F84               	movwf	___awdiv@counter& (0+255),b
  6543  002D44  D006               	goto	l3581
  6544  002D46                     l3579:
  6545                           
  6546                           ; BSR set to: 0
  6547  002D46  0100               	movlb	0	; () banked
  6548  002D48  90D8               	bcf	status,0,c
  6549  002D4A  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  6550  002D4C  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6551  002D4E  0100               	movlb	0	; () banked
  6552  002D50  2B84               	incf	___awdiv@counter& (0+255),f,b
  6553  002D52                     l3581:
  6554                           
  6555                           ; BSR set to: 0
  6556  002D52  0100               	movlb	0	; () banked
  6557  002D54  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6558  002D56  D7F7               	goto	l3579
  6559  002D58                     l3583:
  6560                           
  6561                           ; BSR set to: 0
  6562  002D58  0100               	movlb	0	; () banked
  6563  002D5A  90D8               	bcf	status,0,c
  6564  002D5C  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  6565  002D5E  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6566                           
  6567                           ; BSR set to: 0
  6568  002D60  0100               	movlb	0	; () banked
  6569  002D62  5182               	movf	___awdiv@divisor& (0+255),w,b
  6570  002D64  0100               	movlb	0	; () banked
  6571  002D66  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  6572  002D68  0100               	movlb	0	; () banked
  6573  002D6A  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6574  002D6C  0100               	movlb	0	; () banked
  6575  002D6E  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6576  002D70  A0D8               	btfss	status,0,c
  6577  002D72  D00A               	goto	l3591
  6578                           
  6579                           ; BSR set to: 0
  6580  002D74  0100               	movlb	0	; () banked
  6581  002D76  5182               	movf	___awdiv@divisor& (0+255),w,b
  6582  002D78  0100               	movlb	0	; () banked
  6583  002D7A  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  6584  002D7C  0100               	movlb	0	; () banked
  6585  002D7E  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6586  002D80  0100               	movlb	0	; () banked
  6587  002D82  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6588                           
  6589                           ; BSR set to: 0
  6590  002D84  0100               	movlb	0	; () banked
  6591  002D86  8186               	bsf	___awdiv@quotient& (0+255),0,b
  6592  002D88                     l3591:
  6593                           
  6594                           ; BSR set to: 0
  6595  002D88  0100               	movlb	0	; () banked
  6596  002D8A  90D8               	bcf	status,0,c
  6597  002D8C  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6598  002D8E  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  6599                           
  6600                           ; BSR set to: 0
  6601  002D90  0100               	movlb	0	; () banked
  6602  002D92  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  6603  002D94  D7E1               	goto	l3583
  6604  002D96                     l3595:
  6605                           
  6606                           ; BSR set to: 0
  6607  002D96  0100               	movlb	0	; () banked
  6608  002D98  5185               	movf	___awdiv@sign& (0+255),w,b
  6609  002D9A  0100               	movlb	0	; () banked
  6610  002D9C  B4D8               	btfsc	status,2,c
  6611  002D9E  D005               	goto	l3599
  6612                           
  6613                           ; BSR set to: 0
  6614  002DA0  0100               	movlb	0	; () banked
  6615  002DA2  6D86               	negf	___awdiv@quotient& (0+255),b
  6616  002DA4  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6617  002DA6  B0D8               	btfsc	status,0,c
  6618  002DA8  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6619  002DAA                     l3599:
  6620                           
  6621                           ; BSR set to: 0
  6622  002DAA  C086  F080         	movff	___awdiv@quotient,?___awdiv
  6623  002DAE  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  6624  002DB2  0012               	return	
  6625  002DB4                     __end_of___awdiv:
  6626                           	opt stack 0
  6627                           tblptru	equ	0xFF8
  6628                           tblptrh	equ	0xFF7
  6629                           tblptrl	equ	0xFF6
  6630                           tablat	equ	0xFF5
  6631                           prodh	equ	0xFF4
  6632                           prodl	equ	0xFF3
  6633                           intcon	equ	0xFF2
  6634                           postinc0	equ	0xFEE
  6635                           wreg	equ	0xFE8
  6636                           postdec1	equ	0xFE5
  6637                           fsr1l	equ	0xFE1
  6638                           status	equ	0xFD8
  6639                           
  6640 ;; *************** function _handler *****************
  6641 ;; Defined at:
  6642 ;;		line 191 in file "main.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;		None
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;  z               2   37[COMRAM] int 
  6647 ;;  L               2   35[COMRAM] int 
  6648 ;;  w               2   33[COMRAM] int 
  6649 ;;  y               2   31[COMRAM] int 
  6650 ;;  x               2   29[COMRAM] int 
  6651 ;;  z               2   27[COMRAM] int 
  6652 ;;  L               2   25[COMRAM] int 
  6653 ;;  w               2   23[COMRAM] int 
  6654 ;;  y               2   21[COMRAM] int 
  6655 ;;  x               2   19[COMRAM] int 
  6656 ;;  z               2   57[COMRAM] int 
  6657 ;;  L               2   55[COMRAM] int 
  6658 ;;  w               2   53[COMRAM] int 
  6659 ;;  y               2   51[COMRAM] int 
  6660 ;;  x               2   49[COMRAM] int 
  6661 ;;  z               2   47[COMRAM] int 
  6662 ;;  L               2   45[COMRAM] int 
  6663 ;;  w               2   43[COMRAM] int 
  6664 ;;  y               2   41[COMRAM] int 
  6665 ;;  x               2   39[COMRAM] int 
  6666 ;; Return value:  Size  Location     Type
  6667 ;;                  1    wreg      void 
  6668 ;; Registers used:
  6669 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  6670 ;; Tracked objects:
  6671 ;;		On entry : 0/0
  6672 ;;		On exit  : 0/0
  6673 ;;		Unchanged: 0/0
  6674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6676 ;;      Locals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6677 ;;      Temps:         19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6678 ;;      Totals:        59       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6679 ;;Total ram usage:       59 bytes
  6680 ;; Hardware stack levels used:    1
  6681 ;; This function calls:
  6682 ;;		Nothing
  6683 ;; This function is called by:
  6684 ;;		Interrupt level 2
  6685 ;; This function uses a non-reentrant model
  6686 ;;
  6687                           
  6688                           	psect	intcode
  6689  000008                     __pintcode:
  6690                           	opt stack 0
  6691  000008                     _handler:
  6692                           	opt stack 25
  6693                           
  6694                           ; BSR set to: 0
  6695                           ;incstack = 0
  6696  000008  8276               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6697  00000A  EDAF  F00E         	call	int_func,f	;refresh shadow registers
  6698                           tblptru	equ	0xFF8
  6699                           tblptrh	equ	0xFF7
  6700                           tblptrl	equ	0xFF6
  6701                           tablat	equ	0xFF5
  6702                           prodh	equ	0xFF4
  6703                           prodl	equ	0xFF3
  6704                           intcon	equ	0xFF2
  6705                           postinc0	equ	0xFEE
  6706                           wreg	equ	0xFE8
  6707                           postdec1	equ	0xFE5
  6708                           fsr1l	equ	0xFE1
  6709                           status	equ	0xFD8
  6710                           
  6711                           	psect	intcode_body
  6712  001D5E                     __pintcode_body:
  6713                           	opt stack 25
  6714  001D5E                     int_func:
  6715                           	opt stack 25
  6716  001D5E  0006               	pop		; remove dummy address from shadow register refresh
  6717  001D60  CFFA F006          	movff	pclath,??_handler+5
  6718  001D64  CFFB F007          	movff	pclatu,??_handler+6
  6719  001D68  CFE9 F008          	movff	fsr0l,??_handler+7
  6720  001D6C  CFEA F009          	movff	fsr0h,??_handler+8
  6721  001D70  CFE1 F00A          	movff	fsr1l,??_handler+9
  6722  001D74  CFE2 F00B          	movff	fsr1h,??_handler+10
  6723  001D78  CFD9 F00C          	movff	fsr2l,??_handler+11
  6724  001D7C  CFDA F00D          	movff	fsr2h,??_handler+12
  6725  001D80  CFF3 F00E          	movff	prodl,??_handler+13
  6726  001D84  CFF4 F00F          	movff	prodh,??_handler+14
  6727  001D88  CFF6 F010          	movff	tblptrl,??_handler+15
  6728  001D8C  CFF7 F011          	movff	tblptrh,??_handler+16
  6729  001D90  CFF8 F012          	movff	tblptru,??_handler+17
  6730  001D94  CFF5 F013          	movff	tablat,??_handler+18
  6731                           
  6732                           ;main.c: 192: (INTCONbits.GIE = 0);
  6733  001D98  9EF2               	bcf	intcon,7,c	;volatile
  6734                           
  6735                           ;main.c: 193: if(TMR1IF){
  6736  001D9A  A09E               	btfss	3998,0,c	;volatile
  6737  001D9C  D26B               	goto	i2l207
  6738                           
  6739                           ;main.c: 194: TMR1IF = 0;
  6740  001D9E  909E               	bcf	3998,0,c	;volatile
  6741                           
  6742                           ;main.c: 196: TMR1ON = 0;
  6743  001DA0  90CD               	bcf	4045,0,c	;volatile
  6744                           
  6745                           ;main.c: 200: T1CON = 0b10000000;
  6746  001DA2  0E80               	movlw	128
  6747  001DA4  6ECD               	movwf	4045,c	;volatile
  6748                           
  6749                           ;main.c: 201: TMR1H = 0b11111111;
  6750  001DA6  68CF               	setf	4047,c	;volatile
  6751                           
  6752                           ;main.c: 202: TMR1L = 0b01011111;
  6753  001DA8  0E5F               	movlw	95
  6754  001DAA  6ECE               	movwf	4046,c	;volatile
  6755                           
  6756                           ;main.c: 205: if (timer_on == 1) {
  6757  001DAC  0474               	decf	_timer_on,w,c
  6758  001DAE  1075               	iorwf	_timer_on+1,w,c
  6759  001DB0  A4D8               	btfss	status,2,c
  6760  001DB2  D260               	goto	i2l207
  6761                           
  6762                           ;main.c: 210: if (state != EMERGENCY) {
  6763  001DB4  0E64               	movlw	100
  6764  001DB6  1854               	xorwf	_state,w,c
  6765  001DB8  1055               	iorwf	_state+1,w,c
  6766  001DBA  B4D8               	btfsc	status,2,c
  6767  001DBC  D04F               	goto	i2l3117
  6768                           
  6769                           ;main.c: 211: timer_counter++;
  6770  001DBE  4A5C               	infsnz	_timer_counter,f,c
  6771  001DC0  2A5D               	incf	_timer_counter+1,f,c
  6772                           
  6773                           ;main.c: 213: if (timer_counter >= servo_duties[SERVO_9V]) {
  6774  001DC2  503C               	movf	_servo_duties,w,c
  6775  001DC4  5C5C               	subwf	_timer_counter,w,c
  6776  001DC6  505D               	movf	_timer_counter+1,w,c
  6777  001DC8  0A80               	xorlw	128
  6778  001DCA  6E01               	movwf	??_handler& (0+255),c
  6779  001DCC  503D               	movf	_servo_duties+1,w,c
  6780  001DCE  0A80               	xorlw	128
  6781  001DD0  5801               	subwfb	??_handler& (0+255),w,c
  6782  001DD2  B0D8               	btfsc	status,0,c
  6783                           
  6784                           ;main.c: 214: if (LATCbits.LATC0 != 0)
  6785  001DD4  A08B               	btfss	3979,0,c	;volatile
  6786  001DD6  D001               	goto	i2l3079
  6787                           
  6788                           ;main.c: 215: LATCbits.LATC0 = 0;
  6789  001DD8  908B               	bcf	3979,0,c	;volatile
  6790  001DDA                     i2l3079:
  6791                           
  6792                           ;main.c: 216: }
  6793                           ;main.c: 218: if (timer_counter >= servo_duties[SERVO_C]) {
  6794  001DDA  503E               	movf	_servo_duties+2,w,c
  6795  001DDC  5C5C               	subwf	_timer_counter,w,c
  6796  001DDE  505D               	movf	_timer_counter+1,w,c
  6797  001DE0  0A80               	xorlw	128
  6798  001DE2  6E01               	movwf	??_handler& (0+255),c
  6799  001DE4  503F               	movf	_servo_duties+3,w,c
  6800  001DE6  0A80               	xorlw	128
  6801  001DE8  5801               	subwfb	??_handler& (0+255),w,c
  6802  001DEA  B0D8               	btfsc	status,0,c
  6803                           
  6804                           ;main.c: 219: if (LATCbits.LATC1 != 0)
  6805  001DEC  A28B               	btfss	3979,1,c	;volatile
  6806  001DEE  D001               	goto	i2l3085
  6807                           
  6808                           ;main.c: 220: LATCbits.LATC1 = 0;
  6809  001DF0  928B               	bcf	3979,1,c	;volatile
  6810  001DF2                     i2l3085:
  6811                           
  6812                           ;main.c: 221: }
  6813                           ;main.c: 224: if (timer_counter >= servo_duties[SERVO_AA]) {
  6814  001DF2  5040               	movf	_servo_duties+4,w,c
  6815  001DF4  5C5C               	subwf	_timer_counter,w,c
  6816  001DF6  505D               	movf	_timer_counter+1,w,c
  6817  001DF8  0A80               	xorlw	128
  6818  001DFA  6E01               	movwf	??_handler& (0+255),c
  6819  001DFC  5041               	movf	_servo_duties+5,w,c
  6820  001DFE  0A80               	xorlw	128
  6821  001E00  5801               	subwfb	??_handler& (0+255),w,c
  6822  001E02  B0D8               	btfsc	status,0,c
  6823                           
  6824                           ;main.c: 225: if (LATCbits.LATC2 != 0)
  6825  001E04  A48B               	btfss	3979,2,c	;volatile
  6826  001E06  D001               	goto	i2l3091
  6827                           
  6828                           ;main.c: 226: LATCbits.LATC2 = 0;
  6829  001E08  948B               	bcf	3979,2,c	;volatile
  6830  001E0A                     i2l3091:
  6831                           
  6832                           ;main.c: 227: }
  6833                           ;main.c: 230: if (timer_counter >= servo_duties[SERVO_ELEC]) {
  6834  001E0A  5042               	movf	_servo_duties+6,w,c
  6835  001E0C  5C5C               	subwf	_timer_counter,w,c
  6836  001E0E  505D               	movf	_timer_counter+1,w,c
  6837  001E10  0A80               	xorlw	128
  6838  001E12  6E01               	movwf	??_handler& (0+255),c
  6839  001E14  5043               	movf	_servo_duties+7,w,c
  6840  001E16  0A80               	xorlw	128
  6841  001E18  5801               	subwfb	??_handler& (0+255),w,c
  6842  001E1A  B0D8               	btfsc	status,0,c
  6843                           
  6844                           ;main.c: 231: if (LATCbits.LATC3 != 0)
  6845  001E1C  A68B               	btfss	3979,3,c	;volatile
  6846  001E1E  D001               	goto	i2l3097
  6847                           
  6848                           ;main.c: 232: LATCbits.LATC3 = 0;
  6849  001E20  968B               	bcf	3979,3,c	;volatile
  6850  001E22                     i2l3097:
  6851                           
  6852                           ;main.c: 233: }
  6853                           ;main.c: 236: if (timer_counter >= servo_duties[SERVO_RAMP]) {
  6854  001E22  5044               	movf	_servo_duties+8,w,c
  6855  001E24  5C5C               	subwf	_timer_counter,w,c
  6856  001E26  505D               	movf	_timer_counter+1,w,c
  6857  001E28  0A80               	xorlw	128
  6858  001E2A  6E01               	movwf	??_handler& (0+255),c
  6859  001E2C  5045               	movf	_servo_duties+9,w,c
  6860  001E2E  0A80               	xorlw	128
  6861  001E30  5801               	subwfb	??_handler& (0+255),w,c
  6862  001E32  B0D8               	btfsc	status,0,c
  6863                           
  6864                           ;main.c: 237: if (LATCbits.LATC4 != 0)
  6865  001E34  A88B               	btfss	3979,4,c	;volatile
  6866  001E36  D001               	goto	i2l3103
  6867                           
  6868                           ;main.c: 238: LATCbits.LATC4 = 0;
  6869  001E38  988B               	bcf	3979,4,c	;volatile
  6870  001E3A                     i2l3103:
  6871                           
  6872                           ;main.c: 239: }
  6873                           ;main.c: 242: if (timer_counter >= 500) {
  6874  001E3A  BE5D               	btfsc	_timer_counter+1,7,c
  6875  001E3C  D00F               	goto	i2l3117
  6876  001E3E  0EF4               	movlw	244
  6877  001E40  5C5C               	subwf	_timer_counter,w,c
  6878  001E42  0E01               	movlw	1
  6879  001E44  585D               	subwfb	_timer_counter+1,w,c
  6880  001E46  A0D8               	btfss	status,0,c
  6881  001E48  D009               	goto	i2l3117
  6882                           
  6883                           ;main.c: 243: timer_counter = 0;
  6884  001E4A  0E00               	movlw	0
  6885  001E4C  6E5D               	movwf	_timer_counter+1,c
  6886  001E4E  0E00               	movlw	0
  6887  001E50  6E5C               	movwf	_timer_counter,c
  6888                           
  6889                           ;main.c: 246: LATCbits.LATC0 = 1;
  6890  001E52  808B               	bsf	3979,0,c	;volatile
  6891                           
  6892                           ;main.c: 247: LATCbits.LATC1 = 1;
  6893  001E54  828B               	bsf	3979,1,c	;volatile
  6894                           
  6895                           ;main.c: 248: LATCbits.LATC2 = 1;
  6896  001E56  848B               	bsf	3979,2,c	;volatile
  6897                           
  6898                           ;main.c: 249: LATCbits.LATC3 = 1;
  6899  001E58  868B               	bsf	3979,3,c	;volatile
  6900                           
  6901                           ;main.c: 250: LATCbits.LATC4 = 1;
  6902  001E5A  888B               	bsf	3979,4,c	;volatile
  6903  001E5C                     i2l3117:
  6904                           
  6905                           ;main.c: 252: }
  6906                           ;main.c: 253: }
  6907                           ;main.c: 350: if (timer_counter2 < 50000)
  6908  001E5C  0E50               	movlw	80
  6909  001E5E  5C5E               	subwf	_timer_counter2,w,c
  6910  001E60  0EC3               	movlw	195
  6911  001E62  585F               	subwfb	_timer_counter2+1,w,c
  6912  001E64  B0D8               	btfsc	status,0,c
  6913  001E66  D1EF               	goto	i2l3283
  6914                           
  6915                           ;main.c: 351: timer_counter2++;
  6916  001E68  4A5E               	infsnz	_timer_counter2,f,c
  6917  001E6A  2A5F               	incf	_timer_counter2+1,f,c
  6918                           
  6919                           ;main.c: 358: switch(state) {
  6920  001E6C  D1EC               	goto	i2l3283
  6921  001E6E                     i2l3121:
  6922                           
  6923                           ;main.c: 363: if (timer_counter4 < 50000)
  6924  001E6E  0E36               	movlw	low _RAMP_DEAD
  6925  001E70  6EF6               	movwf	tblptrl,c
  6926  001E72                     	if	1	;There is more than 1 active tblptr byte
  6927  001E72  0E10               	movlw	high _RAMP_DEAD
  6928  001E74  6EF7               	movwf	tblptrh,c
  6929  001E76                     	endif
  6930  001E76                     	if	0	;There are less than 3 active tblptr bytes
  6931  001E76                     	endif
  6932  001E76  0009               	tblrd		*+
  6933  001E78  CFF5 F044          	movff	tablat,_servo_duties+8
  6934  001E7C  000A               	tblrd		*-
  6935  001E7E  CFF5 F045          	movff	tablat,_servo_duties+9
  6936                           
  6937                           ;main.c: 364: timer_counter4++;
  6938  001E82  0100               	movlb	0	; () banked
  6939  001E84  4BBD               	infsnz	_timer_counter4& (0+255),f,b
  6940  001E86  2BBE               	incf	(_timer_counter4+1)& (0+255),f,b
  6941                           
  6942                           ; BSR set to: 0
  6943                           ;main.c: 366: switch(sensor_state) {
  6944  001E88  D0EE               	goto	i2l3211
  6945  001E8A                     i2l226:
  6946                           
  6947                           ;main.c: 368: if (PORTAbits.RA0 == 1) {
  6948  001E8A  A080               	btfss	3968,0,c	;volatile
  6949  001E8C  D01F               	goto	i2l3129
  6950                           
  6951                           ;main.c: 369: if (sensor9V < SENSOR_WAIT + 1000) {
  6952  001E8E  0EE8               	movlw	232
  6953  001E90  6E01               	movwf	??_handler& (0+255),c
  6954  001E92  0E03               	movlw	3
  6955  001E94  6E02               	movwf	(??_handler+1)& (0+255),c
  6956  001E96  0E40               	movlw	low _SENSOR_WAIT
  6957  001E98  6EF6               	movwf	tblptrl,c
  6958  001E9A                     	if	1	;There is more than 1 active tblptr byte
  6959  001E9A  0E10               	movlw	high _SENSOR_WAIT
  6960  001E9C  6EF7               	movwf	tblptrh,c
  6961  001E9E                     	endif
  6962  001E9E                     	if	0	;There are less than 3 active tblptr bytes
  6963  001E9E                     	endif
  6964  001E9E  0009               	tblrd		*+
  6965  001EA0  CFF5 F003          	movff	tablat,??_handler+2
  6966  001EA4  0009               	tblrd		*+
  6967  001EA6  CFF5 F004          	movff	tablat,??_handler+3
  6968  001EAA  5001               	movf	??_handler,w,c
  6969  001EAC  2603               	addwf	??_handler+2,f,c
  6970  001EAE  5002               	movf	??_handler+1,w,c
  6971  001EB0  2204               	addwfc	??_handler+3,f,c
  6972  001EB2  5003               	movf	??_handler+2,w,c
  6973  001EB4  5C4A               	subwf	_sensor9V,w,c
  6974  001EB6  504B               	movf	_sensor9V+1,w,c
  6975  001EB8  0A80               	xorlw	128
  6976  001EBA  6E05               	movwf	(??_handler+4)& (0+255),c
  6977  001EBC  5004               	movf	??_handler+3,w,c
  6978  001EBE  0A80               	xorlw	128
  6979  001EC0  5805               	subwfb	(??_handler+4)& (0+255),w,c
  6980  001EC2  B0D8               	btfsc	status,0,c
  6981  001EC4  D00D               	goto	i2l3133
  6982                           
  6983                           ;main.c: 370: sensor9V++;
  6984  001EC6  4A4A               	infsnz	_sensor9V,f,c
  6985  001EC8  2A4B               	incf	_sensor9V+1,f,c
  6986                           
  6987                           ;main.c: 371: }
  6988                           ;main.c: 372: } else {
  6989  001ECA  D00A               	goto	i2l3133
  6990  001ECC                     i2l3129:
  6991                           
  6992                           ;main.c: 373: if (sensor9V > 0)
  6993  001ECC  BE4B               	btfsc	_sensor9V+1,7,c
  6994  001ECE  D008               	goto	i2l3133
  6995  001ED0  504B               	movf	_sensor9V+1,w,c
  6996  001ED2  E103               	bnz	i2u243_40
  6997  001ED4  044A               	decf	_sensor9V,w,c
  6998  001ED6  A0D8               	btfss	status,0,c
  6999  001ED8  D003               	goto	i2l3133
  7000  001EDA                     i2u243_40:
  7001                           
  7002                           ;main.c: 374: sensor9V--;
  7003  001EDA  064A               	decf	_sensor9V,f,c
  7004  001EDC  A0D8               	btfss	status,0,c
  7005  001EDE  064B               	decf	_sensor9V+1,f,c
  7006  001EE0                     i2l3133:
  7007                           
  7008                           ;main.c: 375: }
  7009                           ;main.c: 376: if (PORTAbits.RA1 == 1) {
  7010  001EE0  A280               	btfss	3968,1,c	;volatile
  7011  001EE2  D01F               	goto	i2l3139
  7012                           
  7013                           ;main.c: 377: if (sensorC < SENSOR_WAIT + 1000) {
  7014  001EE4  0EE8               	movlw	232
  7015  001EE6  6E01               	movwf	??_handler& (0+255),c
  7016  001EE8  0E03               	movlw	3
  7017  001EEA  6E02               	movwf	(??_handler+1)& (0+255),c
  7018  001EEC  0E40               	movlw	low _SENSOR_WAIT
  7019  001EEE  6EF6               	movwf	tblptrl,c
  7020  001EF0                     	if	1	;There is more than 1 active tblptr byte
  7021  001EF0  0E10               	movlw	high _SENSOR_WAIT
  7022  001EF2  6EF7               	movwf	tblptrh,c
  7023  001EF4                     	endif
  7024  001EF4                     	if	0	;There are less than 3 active tblptr bytes
  7025  001EF4                     	endif
  7026  001EF4  0009               	tblrd		*+
  7027  001EF6  CFF5 F003          	movff	tablat,??_handler+2
  7028  001EFA  0009               	tblrd		*+
  7029  001EFC  CFF5 F004          	movff	tablat,??_handler+3
  7030  001F00  5001               	movf	??_handler,w,c
  7031  001F02  2603               	addwf	??_handler+2,f,c
  7032  001F04  5002               	movf	??_handler+1,w,c
  7033  001F06  2204               	addwfc	??_handler+3,f,c
  7034  001F08  5003               	movf	??_handler+2,w,c
  7035  001F0A  5C4E               	subwf	_sensorC,w,c
  7036  001F0C  504F               	movf	_sensorC+1,w,c
  7037  001F0E  0A80               	xorlw	128
  7038  001F10  6E05               	movwf	(??_handler+4)& (0+255),c
  7039  001F12  5004               	movf	??_handler+3,w,c
  7040  001F14  0A80               	xorlw	128
  7041  001F16  5805               	subwfb	(??_handler+4)& (0+255),w,c
  7042  001F18  B0D8               	btfsc	status,0,c
  7043  001F1A  D00D               	goto	i2l3143
  7044                           
  7045                           ;main.c: 378: sensorC++;
  7046  001F1C  4A4E               	infsnz	_sensorC,f,c
  7047  001F1E  2A4F               	incf	_sensorC+1,f,c
  7048                           
  7049                           ;main.c: 379: }
  7050                           ;main.c: 380: } else {
  7051  001F20  D00A               	goto	i2l3143
  7052  001F22                     i2l3139:
  7053                           
  7054                           ;main.c: 381: if (sensorC > 0)
  7055  001F22  BE4F               	btfsc	_sensorC+1,7,c
  7056  001F24  D008               	goto	i2l3143
  7057  001F26  504F               	movf	_sensorC+1,w,c
  7058  001F28  E103               	bnz	i2u246_40
  7059  001F2A  044E               	decf	_sensorC,w,c
  7060  001F2C  A0D8               	btfss	status,0,c
  7061  001F2E  D003               	goto	i2l3143
  7062  001F30                     i2u246_40:
  7063                           
  7064                           ;main.c: 382: sensorC--;
  7065  001F30  064E               	decf	_sensorC,f,c
  7066  001F32  A0D8               	btfss	status,0,c
  7067  001F34  064F               	decf	_sensorC+1,f,c
  7068  001F36                     i2l3143:
  7069                           
  7070                           ;main.c: 383: }
  7071                           ;main.c: 384: if (PORTEbits.RE0 == 1) {
  7072  001F36  A084               	btfss	3972,0,c	;volatile
  7073  001F38  D01F               	goto	i2l3149
  7074  001F3A                     i2l3145:
  7075                           
  7076                           ;main.c: 385: if (sensorAA < SENSOR_WAIT + 1000) {
  7077  001F3A  0EE8               	movlw	232
  7078  001F3C  6E01               	movwf	??_handler& (0+255),c
  7079  001F3E  0E03               	movlw	3
  7080  001F40  6E02               	movwf	(??_handler+1)& (0+255),c
  7081  001F42  0E40               	movlw	low _SENSOR_WAIT
  7082  001F44  6EF6               	movwf	tblptrl,c
  7083  001F46                     	if	1	;There is more than 1 active tblptr byte
  7084  001F46  0E10               	movlw	high _SENSOR_WAIT
  7085  001F48  6EF7               	movwf	tblptrh,c
  7086  001F4A                     	endif
  7087  001F4A                     	if	0	;There are less than 3 active tblptr bytes
  7088  001F4A                     	endif
  7089  001F4A  0009               	tblrd		*+
  7090  001F4C  CFF5 F003          	movff	tablat,??_handler+2
  7091  001F50  0009               	tblrd		*+
  7092  001F52  CFF5 F004          	movff	tablat,??_handler+3
  7093  001F56  5001               	movf	??_handler,w,c
  7094  001F58  2603               	addwf	??_handler+2,f,c
  7095  001F5A  5002               	movf	??_handler+1,w,c
  7096  001F5C  2204               	addwfc	??_handler+3,f,c
  7097  001F5E  5003               	movf	??_handler+2,w,c
  7098  001F60  5C4C               	subwf	_sensorAA,w,c
  7099  001F62  504D               	movf	_sensorAA+1,w,c
  7100  001F64  0A80               	xorlw	128
  7101  001F66  6E05               	movwf	(??_handler+4)& (0+255),c
  7102  001F68  5004               	movf	??_handler+3,w,c
  7103  001F6A  0A80               	xorlw	128
  7104  001F6C  5805               	subwfb	(??_handler+4)& (0+255),w,c
  7105  001F6E  B0D8               	btfsc	status,0,c
  7106  001F70  D180               	goto	i2l260
  7107                           
  7108                           ;main.c: 386: sensorAA++;
  7109  001F72  4A4C               	infsnz	_sensorAA,f,c
  7110  001F74  2A4D               	incf	_sensorAA+1,f,c
  7111                           
  7112                           ;main.c: 387: }
  7113                           ;main.c: 388: } else {
  7114  001F76  D17D               	goto	i2l260
  7115  001F78                     i2l3149:
  7116                           
  7117                           ;main.c: 389: if (sensorAA > 0)
  7118  001F78  BE4D               	btfsc	_sensorAA+1,7,c
  7119  001F7A  D17B               	goto	i2l260
  7120  001F7C  504D               	movf	_sensorAA+1,w,c
  7121  001F7E  E132               	bnz	i2u255_40
  7122  001F80  044C               	decf	_sensorAA,w,c
  7123  001F82  A0D8               	btfss	status,0,c
  7124  001F84  D176               	goto	i2l260
  7125  001F86  D02E               	goto	i2u255_40
  7126  001F88                     i2l240:
  7127                           
  7128                           ;main.c: 405: if (PORTAbits.RA1 == 1) {
  7129  001F88  A280               	btfss	3968,1,c	;volatile
  7130  001F8A  D01F               	goto	i2l3157
  7131                           
  7132                           ;main.c: 406: if (sensorC < SENSOR_WAIT + 1000) {
  7133  001F8C  0EE8               	movlw	232
  7134  001F8E  6E01               	movwf	??_handler& (0+255),c
  7135  001F90  0E03               	movlw	3
  7136  001F92  6E02               	movwf	(??_handler+1)& (0+255),c
  7137  001F94  0E40               	movlw	low _SENSOR_WAIT
  7138  001F96  6EF6               	movwf	tblptrl,c
  7139  001F98                     	if	1	;There is more than 1 active tblptr byte
  7140  001F98  0E10               	movlw	high _SENSOR_WAIT
  7141  001F9A  6EF7               	movwf	tblptrh,c
  7142  001F9C                     	endif
  7143  001F9C                     	if	0	;There are less than 3 active tblptr bytes
  7144  001F9C                     	endif
  7145  001F9C  0009               	tblrd		*+
  7146  001F9E  CFF5 F003          	movff	tablat,??_handler+2
  7147  001FA2  0009               	tblrd		*+
  7148  001FA4  CFF5 F004          	movff	tablat,??_handler+3
  7149  001FA8  5001               	movf	??_handler,w,c
  7150  001FAA  2603               	addwf	??_handler+2,f,c
  7151  001FAC  5002               	movf	??_handler+1,w,c
  7152  001FAE  2204               	addwfc	??_handler+3,f,c
  7153  001FB0  5003               	movf	??_handler+2,w,c
  7154  001FB2  5C4E               	subwf	_sensorC,w,c
  7155  001FB4  504F               	movf	_sensorC+1,w,c
  7156  001FB6  0A80               	xorlw	128
  7157  001FB8  6E05               	movwf	(??_handler+4)& (0+255),c
  7158  001FBA  5004               	movf	??_handler+3,w,c
  7159  001FBC  0A80               	xorlw	128
  7160  001FBE  5805               	subwfb	(??_handler+4)& (0+255),w,c
  7161  001FC0  B0D8               	btfsc	status,0,c
  7162  001FC2  D00D               	goto	i2l3161
  7163                           
  7164                           ;main.c: 407: sensorC++;
  7165  001FC4  4A4E               	infsnz	_sensorC,f,c
  7166  001FC6  2A4F               	incf	_sensorC+1,f,c
  7167                           
  7168                           ;main.c: 408: }
  7169                           ;main.c: 409: } else {
  7170  001FC8  D00A               	goto	i2l3161
  7171  001FCA                     i2l3157:
  7172                           
  7173                           ;main.c: 410: if (sensorC > 0)
  7174  001FCA  BE4F               	btfsc	_sensorC+1,7,c
  7175  001FCC  D008               	goto	i2l3161
  7176  001FCE  504F               	movf	_sensorC+1,w,c
  7177  001FD0  E103               	bnz	i2u252_40
  7178  001FD2  044E               	decf	_sensorC,w,c
  7179  001FD4  A0D8               	btfss	status,0,c
  7180  001FD6  D003               	goto	i2l3161
  7181  001FD8                     i2u252_40:
  7182                           
  7183                           ;main.c: 411: sensorC--;
  7184  001FD8  064E               	decf	_sensorC,f,c
  7185  001FDA  A0D8               	btfss	status,0,c
  7186  001FDC  064F               	decf	_sensorC+1,f,c
  7187  001FDE                     i2l3161:
  7188                           
  7189                           ;main.c: 412: }
  7190                           ;main.c: 413: if (PORTEbits.RE0 == 1) {
  7191  001FDE  B084               	btfsc	3972,0,c	;volatile
  7192  001FE0  D7AC               	goto	i2l3145
  7193                           
  7194                           ;main.c: 416: }
  7195                           ;main.c: 417: } else {
  7196                           
  7197                           ;main.c: 415: sensorAA++;
  7198                           
  7199                           ;main.c: 414: if (sensorAA < SENSOR_WAIT + 1000) {
  7200  001FE2  D7CA               	goto	i2l3149
  7201  001FE4                     i2u255_40:
  7202                           
  7203                           ;main.c: 419: sensorAA--;
  7204  001FE4  064C               	decf	_sensorAA,f,c
  7205  001FE6  A0D8               	btfss	status,0,c
  7206  001FE8  064D               	decf	_sensorAA+1,f,c
  7207                           
  7208                           ;main.c: 420: }
  7209                           ;main.c: 422: break;
  7210  001FEA  D143               	goto	i2l260
  7211  001FEC                     i2l249:
  7212                           
  7213                           ;main.c: 424: if (PORTAbits.RA0 == 1) {
  7214  001FEC  A080               	btfss	3968,0,c	;volatile
  7215  001FEE  D004               	goto	i2l3173
  7216                           
  7217                           ;main.c: 425: int x = 5 + 5;
  7218  001FF0  0E00               	movlw	0
  7219  001FF2  6E15               	movwf	handler@x+1,c
  7220  001FF4  0E0A               	movlw	10
  7221  001FF6  6E14               	movwf	handler@x,c
  7222  001FF8                     i2l3173:
  7223                           
  7224                           ;main.c: 426: }
  7225                           ;main.c: 427: if (PORTAbits.RA1 == 1) {
  7226  001FF8  A280               	btfss	3968,1,c	;volatile
  7227  001FFA  D004               	goto	i2l3177
  7228                           
  7229                           ;main.c: 428: int y = 6 + 4;
  7230  001FFC  0E00               	movlw	0
  7231  001FFE  6E17               	movwf	handler@y+1,c
  7232  002000  0E0A               	movlw	10
  7233  002002  6E16               	movwf	handler@y,c
  7234  002004                     i2l3177:
  7235                           
  7236                           ;main.c: 429: }
  7237                           ;main.c: 430: if (PORTEbits.RE0 == 1) {
  7238  002004  A084               	btfss	3972,0,c	;volatile
  7239  002006  D004               	goto	i2l3181
  7240                           
  7241                           ;main.c: 431: int w = 3 * 3;
  7242  002008  0E00               	movlw	0
  7243  00200A  6E19               	movwf	handler@w+1,c
  7244  00200C  0E09               	movlw	9
  7245  00200E  6E18               	movwf	handler@w,c
  7246  002010                     i2l3181:
  7247                           
  7248                           ;main.c: 432: }
  7249                           ;main.c: 433: if (PORTAbits.RA0 == 1) {
  7250  002010  A080               	btfss	3968,0,c	;volatile
  7251  002012  D004               	goto	i2l3185
  7252                           
  7253                           ;main.c: 434: int L = 123;
  7254  002014  0E00               	movlw	0
  7255  002016  6E1B               	movwf	handler@L+1,c
  7256  002018  0E7B               	movlw	123
  7257  00201A  6E1A               	movwf	handler@L,c
  7258  00201C                     i2l3185:
  7259                           
  7260                           ;main.c: 435: }
  7261                           ;main.c: 436: if (PORTEbits.RE0 == 1) {
  7262  00201C  A084               	btfss	3972,0,c	;volatile
  7263  00201E  D004               	goto	i2l3189
  7264                           
  7265                           ;main.c: 437: int z = 43 * 2;
  7266  002020  0E00               	movlw	0
  7267  002022  6E1D               	movwf	handler@z+1,c
  7268  002024  0E56               	movlw	86
  7269  002026  6E1C               	movwf	handler@z,c
  7270  002028                     i2l3189:
  7271                           
  7272                           ;main.c: 438: }
  7273                           ;main.c: 439: if (PORTAbits.RA0 == 1) {
  7274  002028  A080               	btfss	3968,0,c	;volatile
  7275  00202A  D004               	goto	i2l3193
  7276                           
  7277                           ;main.c: 440: int x = 5 + 5;
  7278  00202C  0E00               	movlw	0
  7279  00202E  6E1F               	movwf	handler@x_669+1,c
  7280  002030  0E0A               	movlw	10
  7281  002032  6E1E               	movwf	handler@x_669,c
  7282  002034                     i2l3193:
  7283                           
  7284                           ;main.c: 441: }
  7285                           ;main.c: 442: if (PORTAbits.RA1 == 1) {
  7286  002034  A280               	btfss	3968,1,c	;volatile
  7287  002036  D004               	goto	i2l3197
  7288                           
  7289                           ;main.c: 443: int y = 6 + 4;
  7290  002038  0E00               	movlw	0
  7291  00203A  6E21               	movwf	handler@y_670+1,c
  7292  00203C  0E0A               	movlw	10
  7293  00203E  6E20               	movwf	handler@y_670,c
  7294  002040                     i2l3197:
  7295                           
  7296                           ;main.c: 444: }
  7297                           ;main.c: 445: if (PORTEbits.RE0 == 1) {
  7298  002040  A084               	btfss	3972,0,c	;volatile
  7299  002042  D004               	goto	i2l3201
  7300                           
  7301                           ;main.c: 446: int w = 3 * 3;
  7302  002044  0E00               	movlw	0
  7303  002046  6E23               	movwf	handler@w_671+1,c
  7304  002048  0E09               	movlw	9
  7305  00204A  6E22               	movwf	handler@w_671,c
  7306  00204C                     i2l3201:
  7307                           
  7308                           ;main.c: 447: }
  7309                           ;main.c: 448: if (PORTAbits.RA0 == 1) {
  7310  00204C  A080               	btfss	3968,0,c	;volatile
  7311  00204E  D004               	goto	i2l3205
  7312                           
  7313                           ;main.c: 449: int L = 123;
  7314  002050  0E00               	movlw	0
  7315  002052  6E25               	movwf	handler@L_672+1,c
  7316  002054  0E7B               	movlw	123
  7317  002056  6E24               	movwf	handler@L_672,c
  7318  002058                     i2l3205:
  7319                           
  7320                           ;main.c: 450: }
  7321                           ;main.c: 451: if (PORTEbits.RE0 == 1) {
  7322  002058  A084               	btfss	3972,0,c	;volatile
  7323  00205A  D10B               	goto	i2l260
  7324                           
  7325                           ;main.c: 452: int z = 43 * 2;
  7326  00205C  0E00               	movlw	0
  7327  00205E  6E27               	movwf	handler@z_673+1,c
  7328  002060  0E56               	movlw	86
  7329  002062  6E26               	movwf	handler@z_673,c
  7330                           
  7331                           ;main.c: 455: }
  7332                           
  7333                           ;main.c: 453: }
  7334                           ;main.c: 454: break;
  7335  002064  D106               	goto	i2l260
  7336  002066                     i2l3211:
  7337  002066  C052  F001         	movff	_sensor_state,??_handler
  7338  00206A  C053  F002         	movff	_sensor_state+1,??_handler+1
  7339                           
  7340                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7341                           ; Switch size 1, requested type "space"
  7342                           ; Number of cases is 1, Range of values is 0 to 0
  7343                           ; switch strategies available:
  7344                           ; Name         Instructions Cycles
  7345                           ; simple_byte            4     3 (average)
  7346                           ;	Chosen strategy is simple_byte
  7347  00206E  5002               	movf	??_handler+1,w,c
  7348  002070  0A00               	xorlw	0	; case 0
  7349  002072  A4D8               	btfss	status,2,c
  7350  002074  D7BB               	goto	i2l249
  7351                           
  7352                           ; Switch size 1, requested type "space"
  7353                           ; Number of cases is 2, Range of values is 1 to 2
  7354                           ; switch strategies available:
  7355                           ; Name         Instructions Cycles
  7356                           ; simple_byte            7     4 (average)
  7357                           ;	Chosen strategy is simple_byte
  7358  002076  5001               	movf	??_handler,w,c
  7359  002078  0A01               	xorlw	1	; case 1
  7360  00207A  B4D8               	btfsc	status,2,c
  7361  00207C  D706               	goto	i2l226
  7362  00207E  0A03               	xorlw	3	; case 2
  7363  002080  B4D8               	btfsc	status,2,c
  7364  002082  D782               	goto	i2l240
  7365  002084  D7B3               	goto	i2l249
  7366  002086                     i2l3213:
  7367                           
  7368                           ;main.c: 459: voltcheck_1 = PORTEbits.RE1;
  7369  002086  A284               	btfss	3972,1,c	;volatile
  7370  002088  D003               	goto	i2u266_40
  7371  00208A  6A01               	clrf	??_handler& (0+255),c
  7372  00208C  2A01               	incf	??_handler& (0+255),f,c
  7373  00208E  D001               	goto	i2u266_48
  7374  002090                     i2u266_40:
  7375  002090  6A01               	clrf	??_handler& (0+255),c
  7376  002092                     i2u266_48:
  7377  002092  5001               	movf	??_handler,w,c
  7378  002094  6E68               	movwf	_voltcheck_1,c
  7379  002096  6A69               	clrf	_voltcheck_1+1,c
  7380                           
  7381                           ;main.c: 460: voltcheck_2 = PORTAbits.RA4;
  7382  002098  A880               	btfss	3968,4,c	;volatile
  7383  00209A  D003               	goto	i2u267_40
  7384  00209C  6A01               	clrf	??_handler& (0+255),c
  7385  00209E  2A01               	incf	??_handler& (0+255),f,c
  7386  0020A0  D001               	goto	i2u267_48
  7387  0020A2                     i2u267_40:
  7388  0020A2  6A01               	clrf	??_handler& (0+255),c
  7389  0020A4                     i2u267_48:
  7390  0020A4  5001               	movf	??_handler,w,c
  7391  0020A6  6E6A               	movwf	_voltcheck_2,c
  7392  0020A8  6A6B               	clrf	_voltcheck_2+1,c
  7393                           
  7394                           ;main.c: 461: voltcheck_3 = PORTAbits.RA5;
  7395  0020AA  AA80               	btfss	3968,5,c	;volatile
  7396  0020AC  D003               	goto	i2u268_40
  7397  0020AE  6A01               	clrf	??_handler& (0+255),c
  7398  0020B0  2A01               	incf	??_handler& (0+255),f,c
  7399  0020B2  D001               	goto	i2u268_48
  7400  0020B4                     i2u268_40:
  7401  0020B4  6A01               	clrf	??_handler& (0+255),c
  7402  0020B6                     i2u268_48:
  7403  0020B6  5001               	movf	??_handler,w,c
  7404  0020B8  6E6C               	movwf	_voltcheck_3,c
  7405  0020BA  6A6D               	clrf	_voltcheck_3+1,c
  7406                           
  7407                           ;main.c: 462: if ((voltcheck_1 == 1) || (voltcheck_2 == 1) || (voltcheck_3 == 1)) {
  7408  0020BC  0468               	decf	_voltcheck_1,w,c
  7409  0020BE  1069               	iorwf	_voltcheck_1+1,w,c
  7410  0020C0  B4D8               	btfsc	status,2,c
  7411  0020C2  D008               	goto	i2l3221
  7412  0020C4  046A               	decf	_voltcheck_2,w,c
  7413  0020C6  106B               	iorwf	_voltcheck_2+1,w,c
  7414  0020C8  B4D8               	btfsc	status,2,c
  7415  0020CA  D004               	goto	i2l3221
  7416  0020CC  046C               	decf	_voltcheck_3,w,c
  7417  0020CE  106D               	iorwf	_voltcheck_3+1,w,c
  7418  0020D0  A4D8               	btfss	status,2,c
  7419  0020D2  D020               	goto	i2l268
  7420  0020D4                     i2l3221:
  7421                           
  7422                           ;main.c: 463: if (volt9V < VOLT_WAIT + 1000)
  7423  0020D4  0EE8               	movlw	232
  7424  0020D6  6E01               	movwf	??_handler& (0+255),c
  7425  0020D8  0E03               	movlw	3
  7426  0020DA  6E02               	movwf	(??_handler+1)& (0+255),c
  7427  0020DC  0E46               	movlw	low _VOLT_WAIT
  7428  0020DE  6EF6               	movwf	tblptrl,c
  7429  0020E0                     	if	1	;There is more than 1 active tblptr byte
  7430  0020E0  0E10               	movlw	high _VOLT_WAIT
  7431  0020E2  6EF7               	movwf	tblptrh,c
  7432  0020E4                     	endif
  7433  0020E4                     	if	0	;There are less than 3 active tblptr bytes
  7434  0020E4                     	endif
  7435  0020E4  0009               	tblrd		*+
  7436  0020E6  CFF5 F003          	movff	tablat,??_handler+2
  7437  0020EA  0009               	tblrd		*+
  7438  0020EC  CFF5 F004          	movff	tablat,??_handler+3
  7439  0020F0  5001               	movf	??_handler,w,c
  7440  0020F2  2603               	addwf	??_handler+2,f,c
  7441  0020F4  5002               	movf	??_handler+1,w,c
  7442  0020F6  2204               	addwfc	??_handler+3,f,c
  7443  0020F8  5003               	movf	??_handler+2,w,c
  7444  0020FA  5C62               	subwf	_volt9V,w,c
  7445  0020FC  5063               	movf	_volt9V+1,w,c
  7446  0020FE  0A80               	xorlw	128
  7447  002100  6E05               	movwf	(??_handler+4)& (0+255),c
  7448  002102  5004               	movf	??_handler+3,w,c
  7449  002104  0A80               	xorlw	128
  7450  002106  5805               	subwfb	(??_handler+4)& (0+255),w,c
  7451  002108  B0D8               	btfsc	status,0,c
  7452  00210A  D004               	goto	i2l268
  7453                           
  7454                           ;main.c: 465: volt9V += 100;
  7455  00210C  0E64               	movlw	100
  7456  00210E  2662               	addwf	_volt9V,f,c
  7457  002110  0E00               	movlw	0
  7458  002112  2263               	addwfc	_volt9V+1,f,c
  7459  002114                     i2l268:
  7460                           
  7461                           ;main.c: 471: if (PORTEbits.RE2 == 1) {
  7462  002114  A484               	btfss	3972,2,c	;volatile
  7463  002116  D021               	goto	i2l3231
  7464                           
  7465                           ;main.c: 472: if (voltC < VOLT_WAIT + 1000)
  7466  002118  0EE8               	movlw	232
  7467  00211A  6E01               	movwf	??_handler& (0+255),c
  7468  00211C  0E03               	movlw	3
  7469  00211E  6E02               	movwf	(??_handler+1)& (0+255),c
  7470  002120  0E46               	movlw	low _VOLT_WAIT
  7471  002122  6EF6               	movwf	tblptrl,c
  7472  002124                     	if	1	;There is more than 1 active tblptr byte
  7473  002124  0E10               	movlw	high _VOLT_WAIT
  7474  002126  6EF7               	movwf	tblptrh,c
  7475  002128                     	endif
  7476  002128                     	if	0	;There are less than 3 active tblptr bytes
  7477  002128                     	endif
  7478  002128  0009               	tblrd		*+
  7479  00212A  CFF5 F003          	movff	tablat,??_handler+2
  7480  00212E  0009               	tblrd		*+
  7481  002130  CFF5 F004          	movff	tablat,??_handler+3
  7482  002134  5001               	movf	??_handler,w,c
  7483  002136  2603               	addwf	??_handler+2,f,c
  7484  002138  5002               	movf	??_handler+1,w,c
  7485  00213A  2204               	addwfc	??_handler+3,f,c
  7486  00213C  5003               	movf	??_handler+2,w,c
  7487  00213E  5C66               	subwf	_voltC,w,c
  7488  002140  5067               	movf	_voltC+1,w,c
  7489  002142  0A80               	xorlw	128
  7490  002144  6E05               	movwf	(??_handler+4)& (0+255),c
  7491  002146  5004               	movf	??_handler+3,w,c
  7492  002148  0A80               	xorlw	128
  7493  00214A  5805               	subwfb	(??_handler+4)& (0+255),w,c
  7494  00214C  B0D8               	btfsc	status,0,c
  7495  00214E  D091               	goto	i2l260
  7496                           
  7497                           ;main.c: 473: voltC += 10;
  7498  002150  0E0A               	movlw	10
  7499  002152  2666               	addwf	_voltC,f,c
  7500  002154  0E00               	movlw	0
  7501  002156  2267               	addwfc	_voltC+1,f,c
  7502                           
  7503                           ;main.c: 474: } else {
  7504  002158  D08C               	goto	i2l260
  7505  00215A                     i2l3231:
  7506                           
  7507                           ;main.c: 475: if (voltC > 0)
  7508  00215A  BE67               	btfsc	_voltC+1,7,c
  7509  00215C  D08A               	goto	i2l260
  7510  00215E  5067               	movf	_voltC+1,w,c
  7511  002160  E103               	bnz	i2u275_40
  7512  002162  0466               	decf	_voltC,w,c
  7513  002164  A0D8               	btfss	status,0,c
  7514  002166  D085               	goto	i2l260
  7515  002168                     i2u275_40:
  7516                           
  7517                           ;main.c: 476: voltC--;
  7518  002168  0666               	decf	_voltC,f,c
  7519  00216A  A0D8               	btfss	status,0,c
  7520  00216C  0667               	decf	_voltC+1,f,c
  7521                           
  7522                           ;main.c: 477: }
  7523                           ;main.c: 478: break;
  7524  00216E  D081               	goto	i2l260
  7525  002170                     i2l273:
  7526                           
  7527                           ;main.c: 480: if (PORTCbits.RC7 == 1) {
  7528  002170  AE82               	btfss	3970,7,c	;volatile
  7529  002172  D021               	goto	i2l3239
  7530                           
  7531                           ;main.c: 481: if (voltAA < VOLT_WAIT + 1000)
  7532  002174  0EE8               	movlw	232
  7533  002176  6E01               	movwf	??_handler& (0+255),c
  7534  002178  0E03               	movlw	3
  7535  00217A  6E02               	movwf	(??_handler+1)& (0+255),c
  7536  00217C  0E46               	movlw	low _VOLT_WAIT
  7537  00217E  6EF6               	movwf	tblptrl,c
  7538  002180                     	if	1	;There is more than 1 active tblptr byte
  7539  002180  0E10               	movlw	high _VOLT_WAIT
  7540  002182  6EF7               	movwf	tblptrh,c
  7541  002184                     	endif
  7542  002184                     	if	0	;There are less than 3 active tblptr bytes
  7543  002184                     	endif
  7544  002184  0009               	tblrd		*+
  7545  002186  CFF5 F003          	movff	tablat,??_handler+2
  7546  00218A  0009               	tblrd		*+
  7547  00218C  CFF5 F004          	movff	tablat,??_handler+3
  7548  002190  5001               	movf	??_handler,w,c
  7549  002192  2603               	addwf	??_handler+2,f,c
  7550  002194  5002               	movf	??_handler+1,w,c
  7551  002196  2204               	addwfc	??_handler+3,f,c
  7552  002198  5003               	movf	??_handler+2,w,c
  7553  00219A  5C64               	subwf	_voltAA,w,c
  7554  00219C  5065               	movf	_voltAA+1,w,c
  7555  00219E  0A80               	xorlw	128
  7556  0021A0  6E05               	movwf	(??_handler+4)& (0+255),c
  7557  0021A2  5004               	movf	??_handler+3,w,c
  7558  0021A4  0A80               	xorlw	128
  7559  0021A6  5805               	subwfb	(??_handler+4)& (0+255),w,c
  7560  0021A8  B0D8               	btfsc	status,0,c
  7561  0021AA  D063               	goto	i2l260
  7562                           
  7563                           ;main.c: 482: voltAA += 10;
  7564  0021AC  0E0A               	movlw	10
  7565  0021AE  2664               	addwf	_voltAA,f,c
  7566  0021B0  0E00               	movlw	0
  7567  0021B2  2265               	addwfc	_voltAA+1,f,c
  7568                           
  7569                           ;main.c: 483: } else {
  7570  0021B4  D05E               	goto	i2l260
  7571  0021B6                     i2l3239:
  7572                           
  7573                           ;main.c: 484: if (voltAA > 0)
  7574  0021B6  BE65               	btfsc	_voltAA+1,7,c
  7575  0021B8  D05C               	goto	i2l260
  7576  0021BA  5065               	movf	_voltAA+1,w,c
  7577  0021BC  E103               	bnz	i2u278_40
  7578  0021BE  0464               	decf	_voltAA,w,c
  7579  0021C0  A0D8               	btfss	status,0,c
  7580  0021C2  D057               	goto	i2l260
  7581  0021C4                     i2u278_40:
  7582                           
  7583                           ;main.c: 485: voltAA--;
  7584  0021C4  0664               	decf	_voltAA,f,c
  7585  0021C6  A0D8               	btfss	status,0,c
  7586  0021C8  0665               	decf	_voltAA+1,f,c
  7587                           
  7588                           ;main.c: 486: }
  7589                           ;main.c: 487: break;
  7590  0021CA  D053               	goto	i2l260
  7591  0021CC                     i2l278:
  7592                           
  7593                           ;main.c: 489: if (PORTAbits.RA0 == 1) {
  7594  0021CC  A080               	btfss	3968,0,c	;volatile
  7595  0021CE  D004               	goto	i2l3245
  7596                           
  7597                           ;main.c: 490: int x = 5 + 5;
  7598  0021D0  0E00               	movlw	0
  7599  0021D2  6E29               	movwf	handler@x_682+1,c
  7600  0021D4  0E0A               	movlw	10
  7601  0021D6  6E28               	movwf	handler@x_682,c
  7602  0021D8                     i2l3245:
  7603                           
  7604                           ;main.c: 491: }
  7605                           ;main.c: 492: if (PORTAbits.RA1 == 1) {
  7606  0021D8  A280               	btfss	3968,1,c	;volatile
  7607  0021DA  D004               	goto	i2l3249
  7608                           
  7609                           ;main.c: 493: int y = 6 + 4;
  7610  0021DC  0E00               	movlw	0
  7611  0021DE  6E2B               	movwf	handler@y_683+1,c
  7612  0021E0  0E0A               	movlw	10
  7613  0021E2  6E2A               	movwf	handler@y_683,c
  7614  0021E4                     i2l3249:
  7615                           
  7616                           ;main.c: 494: }
  7617                           ;main.c: 495: if (PORTEbits.RE0 == 1) {
  7618  0021E4  A084               	btfss	3972,0,c	;volatile
  7619  0021E6  D004               	goto	i2l3253
  7620                           
  7621                           ;main.c: 496: int w = 3 * 3;
  7622  0021E8  0E00               	movlw	0
  7623  0021EA  6E2D               	movwf	handler@w_684+1,c
  7624  0021EC  0E09               	movlw	9
  7625  0021EE  6E2C               	movwf	handler@w_684,c
  7626  0021F0                     i2l3253:
  7627                           
  7628                           ;main.c: 497: }
  7629                           ;main.c: 498: if (PORTAbits.RA0 == 1) {
  7630  0021F0  A080               	btfss	3968,0,c	;volatile
  7631  0021F2  D004               	goto	i2l3257
  7632                           
  7633                           ;main.c: 499: int L = 123;
  7634  0021F4  0E00               	movlw	0
  7635  0021F6  6E2F               	movwf	handler@L_685+1,c
  7636  0021F8  0E7B               	movlw	123
  7637  0021FA  6E2E               	movwf	handler@L_685,c
  7638  0021FC                     i2l3257:
  7639                           
  7640                           ;main.c: 500: }
  7641                           ;main.c: 501: if (PORTEbits.RE0 == 1) {
  7642  0021FC  A084               	btfss	3972,0,c	;volatile
  7643  0021FE  D004               	goto	i2l3261
  7644                           
  7645                           ;main.c: 502: int z = 43 * 2;
  7646  002200  0E00               	movlw	0
  7647  002202  6E31               	movwf	handler@z_686+1,c
  7648  002204  0E56               	movlw	86
  7649  002206  6E30               	movwf	handler@z_686,c
  7650  002208                     i2l3261:
  7651                           
  7652                           ;main.c: 503: }
  7653                           ;main.c: 504: if (PORTAbits.RA0 == 1) {
  7654  002208  A080               	btfss	3968,0,c	;volatile
  7655  00220A  D004               	goto	i2l3265
  7656                           
  7657                           ;main.c: 505: int x = 5 + 5;
  7658  00220C  0E00               	movlw	0
  7659  00220E  6E33               	movwf	handler@x_687+1,c
  7660  002210  0E0A               	movlw	10
  7661  002212  6E32               	movwf	handler@x_687,c
  7662  002214                     i2l3265:
  7663                           
  7664                           ;main.c: 506: }
  7665                           ;main.c: 507: if (PORTAbits.RA1 == 1) {
  7666  002214  A280               	btfss	3968,1,c	;volatile
  7667  002216  D004               	goto	i2l3269
  7668                           
  7669                           ;main.c: 508: int y = 6 + 4;
  7670  002218  0E00               	movlw	0
  7671  00221A  6E35               	movwf	handler@y_688+1,c
  7672  00221C  0E0A               	movlw	10
  7673  00221E  6E34               	movwf	handler@y_688,c
  7674  002220                     i2l3269:
  7675                           
  7676                           ;main.c: 509: }
  7677                           ;main.c: 510: if (PORTEbits.RE0 == 1) {
  7678  002220  A084               	btfss	3972,0,c	;volatile
  7679  002222  D004               	goto	i2l3273
  7680                           
  7681                           ;main.c: 511: int w = 3 * 3;
  7682  002224  0E00               	movlw	0
  7683  002226  6E37               	movwf	handler@w_689+1,c
  7684  002228  0E09               	movlw	9
  7685  00222A  6E36               	movwf	handler@w_689,c
  7686  00222C                     i2l3273:
  7687                           
  7688                           ;main.c: 512: }
  7689                           ;main.c: 513: if (PORTAbits.RA0 == 1) {
  7690  00222C  A080               	btfss	3968,0,c	;volatile
  7691  00222E  D004               	goto	i2l3277
  7692                           
  7693                           ;main.c: 514: int L = 123;
  7694  002230  0E00               	movlw	0
  7695  002232  6E39               	movwf	handler@L_690+1,c
  7696  002234  0E7B               	movlw	123
  7697  002236  6E38               	movwf	handler@L_690,c
  7698  002238                     i2l3277:
  7699                           
  7700                           ;main.c: 515: }
  7701                           ;main.c: 516: if (PORTEbits.RE0 == 1) {
  7702  002238  A084               	btfss	3972,0,c	;volatile
  7703  00223A  D01B               	goto	i2l260
  7704                           
  7705                           ;main.c: 517: int z = 43 * 2;
  7706  00223C  0E00               	movlw	0
  7707  00223E  6E3B               	movwf	handler@z_691+1,c
  7708  002240  0E56               	movlw	86
  7709  002242  6E3A               	movwf	handler@z_691,c
  7710                           
  7711                           ;main.c: 521: }
  7712                           
  7713                           ;main.c: 518: }
  7714                           ;main.c: 520: break;
  7715  002244  D016               	goto	i2l260
  7716  002246                     i2l3283:
  7717  002246  C054  F001         	movff	_state,??_handler
  7718  00224A  C055  F002         	movff	_state+1,??_handler+1
  7719                           
  7720                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7721                           ; Switch size 1, requested type "space"
  7722                           ; Number of cases is 1, Range of values is 0 to 0
  7723                           ; switch strategies available:
  7724                           ; Name         Instructions Cycles
  7725                           ; simple_byte            4     3 (average)
  7726                           ;	Chosen strategy is simple_byte
  7727  00224E  5002               	movf	??_handler+1,w,c
  7728  002250  0A00               	xorlw	0	; case 0
  7729  002252  A4D8               	btfss	status,2,c
  7730  002254  D7BB               	goto	i2l278
  7731                           
  7732                           ; Switch size 1, requested type "space"
  7733                           ; Number of cases is 4, Range of values is 1 to 41
  7734                           ; switch strategies available:
  7735                           ; Name         Instructions Cycles
  7736                           ; simple_byte           13     7 (average)
  7737                           ;	Chosen strategy is simple_byte
  7738  002256  5001               	movf	??_handler,w,c
  7739  002258  0A01               	xorlw	1	; case 1
  7740  00225A  B4D8               	btfsc	status,2,c
  7741  00225C  D608               	goto	i2l3121
  7742  00225E  0A14               	xorlw	20	; case 21
  7743  002260  B4D8               	btfsc	status,2,c
  7744  002262  D711               	goto	i2l3213
  7745  002264  0A0A               	xorlw	10	; case 31
  7746  002266  B4D8               	btfsc	status,2,c
  7747  002268  D755               	goto	i2l268
  7748  00226A  0A36               	xorlw	54	; case 41
  7749  00226C  B4D8               	btfsc	status,2,c
  7750  00226E  D780               	goto	i2l273
  7751  002270  D7AD               	goto	i2l278
  7752  002272                     i2l260:
  7753                           
  7754                           ;main.c: 525: TMR1ON = 1;
  7755  002272  80CD               	bsf	4045,0,c	;volatile
  7756  002274                     i2l207:
  7757                           
  7758                           ;main.c: 528: }
  7759                           ;main.c: 532: }
  7760                           ;main.c: 535: if (TMR0IF) {
  7761  002274  A4F2               	btfss	intcon,2,c	;volatile
  7762  002276  D01A               	goto	i2l3299
  7763                           
  7764                           ;main.c: 536: TMR0IF = 0;
  7765  002278  94F2               	bcf	intcon,2,c	;volatile
  7766                           
  7767                           ;main.c: 537: TMR0ON = 0;
  7768  00227A  9ED5               	bcf	4053,7,c	;volatile
  7769                           
  7770                           ;main.c: 541: T0CON = 0b00000111;
  7771  00227C  0E07               	movlw	7
  7772  00227E  6ED5               	movwf	4053,c	;volatile
  7773                           
  7774                           ;main.c: 542: TMR0H = 0b10000101;
  7775  002280  0E85               	movlw	133
  7776  002282  6ED7               	movwf	4055,c	;volatile
  7777                           
  7778                           ;main.c: 543: TMR0L = 0b11101101;
  7779  002284  0EED               	movlw	237
  7780  002286  6ED6               	movwf	4054,c	;volatile
  7781                           
  7782                           ;main.c: 547: if (state != RESET && state != EMERGENCY && state != END) {
  7783  002288  5054               	movf	_state,w,c
  7784  00228A  1055               	iorwf	_state+1,w,c
  7785  00228C  B4D8               	btfsc	status,2,c
  7786  00228E  D00D               	goto	i2l3297
  7787  002290  0E64               	movlw	100
  7788  002292  1854               	xorwf	_state,w,c
  7789  002294  1055               	iorwf	_state+1,w,c
  7790  002296  B4D8               	btfsc	status,2,c
  7791  002298  D008               	goto	i2l3297
  7792  00229A  0E63               	movlw	99
  7793  00229C  1854               	xorwf	_state,w,c
  7794  00229E  1055               	iorwf	_state+1,w,c
  7795  0022A0  B4D8               	btfsc	status,2,c
  7796  0022A2  D003               	goto	i2l3297
  7797                           
  7798                           ;main.c: 548: operation_time += 1;
  7799  0022A4  0100               	movlb	0	; () banked
  7800  0022A6  4BB5               	infsnz	_operation_time& (0+255),f,b
  7801  0022A8  2BB6               	incf	(_operation_time+1)& (0+255),f,b
  7802  0022AA                     i2l3297:
  7803                           
  7804                           ;main.c: 549: }
  7805                           ;main.c: 553: TMR0ON = 1;
  7806  0022AA  8ED5               	bsf	4053,7,c	;volatile
  7807  0022AC                     i2l3299:
  7808                           
  7809                           ;main.c: 554: }
  7810                           ;main.c: 556: (INTCONbits.GIE = 1);
  7811  0022AC  8EF2               	bsf	intcon,7,c	;volatile
  7812  0022AE  C013  FFF5         	movff	??_handler+18,tablat
  7813  0022B2  C012  FFF8         	movff	??_handler+17,tblptru
  7814  0022B6  C011  FFF7         	movff	??_handler+16,tblptrh
  7815  0022BA  C010  FFF6         	movff	??_handler+15,tblptrl
  7816  0022BE  C00F  FFF4         	movff	??_handler+14,prodh
  7817  0022C2  C00E  FFF3         	movff	??_handler+13,prodl
  7818  0022C6  C00D  FFDA         	movff	??_handler+12,fsr2h
  7819  0022CA  C00C  FFD9         	movff	??_handler+11,fsr2l
  7820  0022CE  C00B  FFE2         	movff	??_handler+10,fsr1h
  7821  0022D2  C00A  FFE1         	movff	??_handler+9,fsr1l
  7822  0022D6  C009  FFEA         	movff	??_handler+8,fsr0h
  7823  0022DA  C008  FFE9         	movff	??_handler+7,fsr0l
  7824  0022DE  C007  FFFB         	movff	??_handler+6,pclatu
  7825  0022E2  C006  FFFA         	movff	??_handler+5,pclath
  7826  0022E6  9276               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7827  0022E8  0011               	retfie		f
  7828  0022EA                     __end_of_handler:
  7829                           	opt stack 0
  7830                           pclatu	equ	0xFFB
  7831                           pclath	equ	0xFFA
  7832                           tblptru	equ	0xFF8
  7833                           tblptrh	equ	0xFF7
  7834                           tblptrl	equ	0xFF6
  7835                           tablat	equ	0xFF5
  7836                           prodh	equ	0xFF4
  7837                           prodl	equ	0xFF3
  7838                           intcon	equ	0xFF2
  7839                           postinc0	equ	0xFEE
  7840                           fsr0h	equ	0xFEA
  7841                           fsr0l	equ	0xFE9
  7842                           wreg	equ	0xFE8
  7843                           postdec1	equ	0xFE5
  7844                           fsr1h	equ	0xFE2
  7845                           fsr1l	equ	0xFE1
  7846                           fsr2h	equ	0xFDA
  7847                           fsr2l	equ	0xFD9
  7848                           status	equ	0xFD8
  7849                           pclatu	equ	0xFFB
  7850                           pclath	equ	0xFFA
  7851                           tblptru	equ	0xFF8
  7852                           tblptrh	equ	0xFF7
  7853                           tblptrl	equ	0xFF6
  7854                           tablat	equ	0xFF5
  7855                           prodh	equ	0xFF4
  7856                           prodl	equ	0xFF3
  7857                           intcon	equ	0xFF2
  7858                           postinc0	equ	0xFEE
  7859                           fsr0h	equ	0xFEA
  7860                           fsr0l	equ	0xFE9
  7861                           wreg	equ	0xFE8
  7862                           postdec1	equ	0xFE5
  7863                           fsr1h	equ	0xFE2
  7864                           fsr1l	equ	0xFE1
  7865                           fsr2h	equ	0xFDA
  7866                           fsr2l	equ	0xFD9
  7867                           status	equ	0xFD8
  7868                           
  7869                           	psect	rparam
  7870  0000                     pclatu	equ	0xFFB
  7871                           pclath	equ	0xFFA
  7872                           tblptru	equ	0xFF8
  7873                           tblptrh	equ	0xFF7
  7874                           tblptrl	equ	0xFF6
  7875                           tablat	equ	0xFF5
  7876                           prodh	equ	0xFF4
  7877                           prodl	equ	0xFF3
  7878                           intcon	equ	0xFF2
  7879                           postinc0	equ	0xFEE
  7880                           fsr0h	equ	0xFEA
  7881                           fsr0l	equ	0xFE9
  7882                           wreg	equ	0xFE8
  7883                           postdec1	equ	0xFE5
  7884                           fsr1h	equ	0xFE2
  7885                           fsr1l	equ	0xFE1
  7886                           fsr2h	equ	0xFDA
  7887                           fsr2l	equ	0xFD9
  7888                           status	equ	0xFD8
  7889                           
  7890                           	psect	temp
  7891  000076                     btemp:
  7892                           	opt stack 0
  7893  000076                     	ds	1
  7894  0000                     int$flags	set	btemp
  7895                           pclatu	equ	0xFFB
  7896                           pclath	equ	0xFFA
  7897                           tblptru	equ	0xFF8
  7898                           tblptrh	equ	0xFF7
  7899                           tblptrl	equ	0xFF6
  7900                           tablat	equ	0xFF5
  7901                           prodh	equ	0xFF4
  7902                           prodl	equ	0xFF3
  7903                           intcon	equ	0xFF2
  7904                           postinc0	equ	0xFEE
  7905                           fsr0h	equ	0xFEA
  7906                           fsr0l	equ	0xFE9
  7907                           wreg	equ	0xFE8
  7908                           postdec1	equ	0xFE5
  7909                           fsr1h	equ	0xFE2
  7910                           fsr1l	equ	0xFE1
  7911                           fsr2h	equ	0xFDA
  7912                           fsr2l	equ	0xFD9
  7913                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    71
    Data        10
    BSS         64
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     59     117
    BANK0           128     45      63
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_FSM
    _keypad->___awdiv
    _intro->_initLCD
    _FSM->_print_batteries
    _print_simu->_initLCD
    _print_batteries->___awdiv
    _putch->_lcdNibble
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10941
                                _FSM
                              _intro
                             _keypad
 ---------------------------------------------------------------------------------
 (1) _keypad                                               1     1      0    3668
                                              8 BANK0      1     1      0
                            ___awdiv
                            ___awmod
                            _initLCD
                              _intro
                         _print_simu
                              _putch
 ---------------------------------------------------------------------------------
 (2) _intro                                                1     1      0     390
                                              4 BANK0      1     1      0
                            _initLCD
                              _putch
 ---------------------------------------------------------------------------------
 (1) _FSM                                                  3     3      0    6883
                                             42 BANK0      3     3      0
                            ___awdiv
                    _print_batteries
                         _print_simu
 ---------------------------------------------------------------------------------
 (2) _print_simu                                           2     2      0     390
                                              4 BANK0      2     2      0
                            _initLCD
                              _putch
 ---------------------------------------------------------------------------------
 (2) _print_batteries                                     34    34      0    5076
                                              8 BANK0     34    34      0
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _initLCD
                            _lcdInst
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     340
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     340
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     457
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1081
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1417
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _handler                                             59    59      0      20
                                              0 COMRAM    59    59      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FSM
     ___awdiv
     _print_batteries
       ___awdiv
       ___awmod
       ___lwdiv
       ___lwmod
       ___wmul
       _initLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _putch
         _lcdNibble
     _print_simu
       _initLCD
         _lcdInst
           _lcdNibble
       _putch
         _lcdNibble
   _intro
     _initLCD
       _lcdInst
         _lcdNibble
     _putch
       _lcdNibble
   _keypad
     ___awdiv
     ___awmod
     _initLCD
       _lcdInst
         _lcdNibble
     _intro
       _initLCD
         _lcdInst
           _lcdNibble
       _putch
         _lcdNibble
     _print_simu
       _initLCD
         _lcdInst
           _lcdNibble
       _putch
         _lcdNibble
     _putch
       _lcdNibble

 _handler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2D      3F       5       49.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3B      75       1       92.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B4      34        0.0%
DATA                 0      0      B4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Mar 27 17:05:48 2017

               ___awdiv@sign 0085          ___wmul@multiplicand 0082                  __CFG_BORV$3 000000  
              _FORWARD_POS_1 101E                _FORWARD_POS_2 1026                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l415 24F4                          l882 2EC4                          l892 2FF4  
               __CFG_CPB$OFF 000000                          _FSM 104A                 __CFG_CPD$OFF 000000  
                        _rlb 00B7                          _rlf 00B9                 ___awmod@sign 0085  
                        wreg 000FE8              __end_of_ELEC_UP 101C                 __CFG_LVP$OFF 000000  
                       ?_FSM 0001                 __CFG_WDT$OFF 000000                         l4023 1664  
                       l4007 158C                         l4105 197C                         l4025 166E  
                       l4017 164E                         l4123 1A2E                         l4107 1986  
                       l4051 1768                         l4133 1A9A                         l4061 179E  
                       l4037 16E2                         l4047 174E                         l4137 1AB4  
                       l4313 2888                         l4225 265E                         l3611 2DD0  
                       l4155 1B24                         l4147 1AE6                         l4067 17DC  
                       l4219 2646                         l3621 2E00                         l3701 2A3A  
                       l4165 1B72                         l4077 182A                         l3623 2E06  
                       l3631 2E38                         l3615 2DE0                         l3711 2AAA  
                       l3703 2A4E                         l4191 1CB0                         l4175 1BD8  
                       l4087 1890                         l4247 26F4                         l4335 2910  
                       l3721 2B2C                         l3713 2ABE                         l3705 2A62  
                       l4185 1C9A                         l3635 2E4C                         l3627 2E2A  
                       l3619 2DF4                         l3723 2B4C                         l3715 2AD8  
                       l3707 2A7C                         l3731 2C0E                         l4099 1966  
                       l4195 1CBA                         l4291 27F0                         l3581 2D52  
                       l3573 2D28                         l3645 2E74                         l3725 2B66  
                       l3717 2AF2                         l3709 2A90                         l4293 2802  
                       l3591 2D88                         l3583 2D58                         l3567 2D12  
                       l3647 2E80                         l3719 2B12                         l3903 1246  
                       l3657 2EB6                         l3649 2E86                         l3673 2FE6  
                       l3665 2FB0                         l3753 24EA                         l3681 2946  
                       l3729 2B7A                         l4393 2CEC                         l3579 2D46  
                       l3595 2D96                         l3667 2FBC                         l3691 29AC  
                       l3683 2954                         l3915 1298                         l3851 1058  
                       l3669 2FC2                         l3693 29C6                         l3861 10D2  
                       l3599 2DAA                         l3695 29E6                         l3679 2938  
                       l3687 2968                         l3871 116C                         l3863 111C  
                       l3943 134C                         l3697 2A00                         l3689 2992  
                       l3945 1376                         l3929 12FA                         l3873 1178  
                       l3849 104E                         l3699 2A20                         l3971 1464  
                       l3891 11F8                         l3981 149A                         l3957 13DE  
                       l3869 1144                         l3967 144A                         l3879 11AA  
                       l3987 14D8                         l3997 1526              __end_of_RAMP_AA 1034  
            __end_of_RAMP_9V 1032                         _LATB 000F8A                         _LATD 000F8C  
                       _PEIE 007F96                         u3807 2EF8                         u3727 281C  
                       u3817 2F24                         u3737 28A4                         u3827 2F2E  
                       u3747 303A                         u3757 2C16                         u3767 2612  
                       u3777 304E                         u3787 3082                         u3797 2EEE  
                       _main 2C22                         _keys 1001                         _temp 0072  
                       fsr0h 000FEA                         fsr1h 000FE2                         fsr2h 000FDA  
                       fsr0l 000FE9                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 0076                         prodh 000FF4                         prodl 000FF3  
                       start 000E                __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000  
            _FORWARD_POS_0_C 101C              _FORWARD_POS_1_C 1024              _FORWARD_POS_2_C 102C  
                _voltcheck_1 0068                  _voltcheck_2 006A                  _voltcheck_3 006C  
               ___param_bank 000000                        ??_FSM 00AA                        ?_main 0001  
            __end_of___awdiv 2DB4              __end_of___awmod 2E56                        _T0CON 000FD5  
            ___awdiv@divisor 0082                        _T1CON 000FCD              __end_of___lwdiv 2ECE  
            __end_of___lwmod 2FFE                        i2l207 2274                        i2l240 1F88  
                      i2l226 1E8A                        i2l260 2272                        i2l273 2170  
                      i2l249 1FEC                        i2l268 2114                        i2l278 21CC  
            ___awdiv@counter 0084                        _TMR0H 000FD7                        _TMR1H 000FCF  
                      _TMR0L 000FD6                        _TMR1L 000FCE                        _PORTB 000F81  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 30E2              __end_of_handler 22EA               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_initLCD 308C               __CFG_EBTRB$OFF 000000  
                      _intro 2FFE                        _state 0054                        _putch 30C2  
                      _voltC 0066                        pclath 000FFA                        tablat 000FF5  
                      status 000FD8               __CFG_PBADEN$ON 000000            __end_of_ELEC_DOWN 101A  
            __initialization 2F36             _FORWARD_POS_1_AA 1022             _FORWARD_POS_1_9V 1020  
           _FORWARD_POS_2_AA 102A             _FORWARD_POS_2_9V 1028                 __end_of_main 2CF6  
               __end_of_keys 1012                       ??_main 00AD                __activetblptr 000002  
          __end_of_MAX_COUNT 1030                       _ADCON0 000FC2                       _ADCON1 000FC1  
                     ?_intro 0001             ___awdiv@dividend 0080                       ?_putch 0001  
          __end_of_RAMP_DEAD 1038                       i2l3103 1E3A                       i2l3201 204C  
                     i2l3121 1E6E                       i2l3211 2066                       i2l3221 20D4  
                     i2l3213 2086                       i2l3205 2058                       i2l3133 1EE0  
                     i2l3117 1E5C                       i2l3231 215A                       i2l3143 1F36  
                     i2l3161 1FDE                       i2l3145 1F3A                       i2l3129 1ECC  
                     i2l3139 1F22                       i2l3091 1E0A                       i2l3261 2208  
                     i2l3253 21F0                       i2l3245 21D8                       i2l3181 2010  
                     i2l3173 1FF8                       i2l3157 1FCA                       i2l3149 1F78  
                     i2l3085 1DF2                       i2l3239 21B6                       i2l3079 1DDA  
                     i2l3273 222C                       i2l3265 2214                       i2l3257 21FC  
                     i2l3249 21E4                       i2l3193 2034                       i2l3185 201C  
                     i2l3177 2004                       i2l3097 1E22                       i2l3283 2246  
                     i2l3277 2238                       i2l3269 2220                       i2l3197 2040  
                     i2l3189 2028                       i2l3297 22AA                       i2l3299 22AC  
                     _RAMP_C 1034                       _OSCCON 000FD3                       _TMR0IF 007F92  
                     _TMR1IE 007CE8                       _TMR1IF 007CF0                       _TMR3IE 007D01  
    __end_of_FORWARD_POS_0_C 101E      __end_of_FORWARD_POS_1_C 1026                       _TMR0ON 007EAF  
    __end_of_FORWARD_POS_2_C 102E                       _TMR1ON 007E68            __end_of_RESET_POS 103A  
             __CFG_XINST$OFF 000000                       ___wmul 308C                    ??___awdiv 0084  
             __CFG_STVREN$ON 000000                    ??___awmod 0084                    ??___lwdiv 0084  
                  ??___lwmod 0084                       _countC 00B1                       _keypad 261E  
                     clear_0 2F7C                       clear_1 2F88             ___awdiv@quotient 0086  
            ___awmod@divisor 0082              ___awmod@counter 0084                    ??_lcdInst 0082  
                  ??_handler 0001                       _voltAA 0064                       _volt9V 0062  
         __end_of_AGITATE_DC 1014                    ??_initLCD 0083                 __pdataCOMRAM 006E  
          __end_of_VOLT_WAIT 1048                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                   __accesstop 0080  
    __end_of__initialization 2F8E                ___rparam_used 000001               __pcstackCOMRAM 0001  
               __pidataBANK0 30E8                __end_of_intro 3046                __end_of_putch 30D2  
         __size_of_lcdNibble 0068              __CFG_OSC$INTIO7 000000     __size_of_print_batteries 0334  
                    ??_intro 0084                      ??_putch 0082                   __pbssBANK0 00AD  
                 __pnvCOMRAM 0074                      ?___wmul 0080                      ?_keypad 0001  
                    _ELEC_UP 101A  print_batteries@choneDrained 00A3                      _AC_wait 0046  
                    _RAMP_AA 1032                      _RAMP_9V 1030     __end_of_FORWARD_POS_1_AA 1024  
   __end_of_FORWARD_POS_1_9V 1022     __end_of_FORWARD_POS_2_AA 102C     __end_of_FORWARD_POS_2_9V 102A  
print_batteries@chtenDrained 00A2            __end_of_lcdNibble 2F36                      __Hparam 0000  
         __end_of_SERVO_WAIT 1046                      __Lparam 0000                      ___awdiv 2CF6  
                    ___awmod 2DB4              __size_of___wmul 0036                      ___lwdiv 2E56  
                    ___lwmod 2F9C                    _ELEC_DOWN 1018                 __psmallconst 1000  
                    __pcinit 2F36              __size_of_keypad 0314                      __ramtop 1000  
                    _lcdInst 30D2                      _handler 0008                      __ptext0 2C22  
                    __ptext1 261E                      __ptext2 2FFE                      __ptext3 104A  
                    __ptext4 2932                      __ptext5 22EA                      __ptext6 30C2  
                    __ptext7 3046                      __ptext8 30D2                      __ptext9 2ECE  
                    _countAA 00AF                      _count9V 00AD                 __size_of_FSM 0D14  
                    _initLCD 3046             ___awmod@dividend 0080                      _sensorC 004E  
             __pintcode_body 1D5E         end_of_initialization 2F8E            ??_print_batteries 0088  
                  _MAX_COUNT 102E                __Lmediumconst 0000                      int_func 1D5E  
        print_batteries@oneC 008F          print_batteries@tenC 008D                    _RAMP_DEAD 1036  
             _operation_time 00B5                    _RESET_POS 1038               _AGITATE_WAIT_1 1014  
             _AGITATE_WAIT_2 1016                      postdec1 000FE5                      postinc0 000FEE  
                  _PORTAbits 000F80                    _PORTBbits 000F81                    _PORTCbits 000F82  
                  _PORTEbits 000F84                   _print_simu 2932                   _test_state 006E  
       __end_of_RESET_POS_AA 103E         __end_of_RESET_POS_9V 103C                    _TRISEbits 000F96  
   print_batteries@minOpChar 0099                    _VOLT_WAIT 1046     print_batteries@oneOpChar 009B  
             __end_of_RAMP_C 1036     print_batteries@tenOpChar 009A       __end_of_AGITATE_WAIT_1 1016  
     __end_of_AGITATE_WAIT_2 1018               __end_of___wmul 30C2        __end_of_FORWARD_POS_1 1020  
      __end_of_FORWARD_POS_2 1028                __pidataCOMRAM 30E2               __end_of_keypad 2932  
         _sensor_incrementer 0050          start_initialization 2F36                  __end_of_FSM 1D5E  
       __end_of_SERVO_F_WAIT 1044    print_batteries@minOpDigit 00A4                     ??___wmul 0084  
                __pdataBANK0 00BB             __CFG_LPT1OSC$OFF 000000                     ??_keypad 0088  
     print_batteries@choneAA 00A1       print_batteries@chone9V 009D       print_batteries@chtenAA 00A0  
     print_batteries@chten9V 009C    print_batteries@oneDrained 0097    print_batteries@oneOpDigit 00A8  
                ?_print_simu 0001                  __pbssCOMRAM 003C                __pcstackBANK0 0080  
               _oneDigitChar 0071    print_batteries@tenDrained 0095    print_batteries@tenOpDigit 00A6  
           ___lwdiv@dividend 0080            __CFG_CCP2MX$PORTC 000000                    __pintcode 0008  
                  _lcdNibble 2ECE                     ?___awdiv 0080                     ?___awmod 0080  
                   ?___lwdiv 0080                     ?___lwmod 0080                     ?_lcdInst 0001  
                   ?_handler 0001                     ?_initLCD 0001                  __smallconst 1000  
                  _countDead 00B3              _print_batteries 22EA             ___lwdiv@quotient 0085  
             __size_of_intro 0048               __size_of_putch 0010               ___wmul@product 0084  
                   _LATCbits 000F8B                     _LATDbits 000F8C                 _tenDigitChar 0073  
        __size_of_print_simu 02F0                     i2u243_40 1EDA                     i2u252_40 1FD8  
                   i2u246_40 1F30                     i2u255_40 1FE4                     i2u266_40 2090  
                   i2u275_40 2168                     i2u267_40 20A2                     i2u266_48 2092  
                   i2u268_40 20B4                     i2u267_48 20A4                     i2u268_48 20B6  
                   i2u278_40 21C4                 _RESET_POS_AA 103C                 _RESET_POS_9V 103A  
           __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001                    _test_mode 005A  
        __end_of_RESET_POS_C 1040            ___wmul@multiplier 0080                lcdNibble@data 0081  
              lcdNibble@temp 0080               _timer_counter2 005E               _timer_counter3 0060  
             _timer_counter4 00BD          __end_of_SENSOR_WAIT 1042                    copy_data0 2F4A  
                  copy_data1 2F6A                   _AGITATE_DC 1012                     __Hrparam 0000  
                   __Lrparam 0000           __CFG_BOREN$SBORDIS 000000        print_batteries@choneC 009F  
      print_batteries@chtenC 009E      __end_of_print_batteries 261E             __size_of___awdiv 00BE  
           __size_of___awmod 00A2             __size_of___lwdiv 0078             __size_of___lwmod 0062  
               _SERVO_F_WAIT 1042             __size_of_lcdInst 0010             __size_of_handler 22E2  
           __size_of_initLCD 0046              ___lwdiv@divisor 0082              ___lwdiv@counter 0084  
                   __ptext10 308C                     __ptext11 2F9C                     __ptext12 2E56  
                   __ptext13 2DB4                     __ptext14 2CF6                     _lcd_mode 00BB  
                   _oneDigit 0048                __size_of_main 00D4                     _keypress 0070  
                   _tenDigit 0056                  _RESET_POS_C 103E                     _sensorAA 004C  
                   _sensor9V 004A                     handler@L 001A                     handler@w 0018  
                   handler@x 0014                     handler@y 0016                     handler@z 001C  
                ??_lcdNibble 0080                     _timer_on 0074                     int$flags 0076  
              _timer_counter 005C                  _SENSOR_WAIT 1040                 ??_print_simu 0084  
                  putch@data 0082                  _OSCTUNEbits 000F9B                   _INTCONbits 000FF2  
               handler@L_672 0024                 handler@L_690 0038                 handler@L_685 002E  
       print_batteries@oneAA 0093         print_batteries@one9V 008B         print_batteries@tenAA 0091  
       print_batteries@ten9V 0089                 handler@w_671 0022                 handler@w_684 002C  
               handler@w_689 0036                 handler@x_682 0028                 handler@x_669 001E  
               handler@x_687 0032                 handler@y_670 0020                 handler@y_683 002A  
                   intlevel2 0000                 handler@y_688 0034                 handler@z_673 0026  
               handler@z_691 003A                 handler@z_686 0030                 _sensor_state 0052  
           ___lwmod@dividend 0080           __end_of_print_simu 2C22             ?_print_batteries 0001  
                lcdInst@data 0082                 _servo_duties 003C                   _SERVO_WAIT 1044  
               _test_counter 0058              ___lwmod@divisor 0082              ___lwmod@counter 0084  
